<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/</link>
    <description>Recent content on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Aug 2020 23:07:09 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[MySQL] MySQL配置文件my.cnf参数解释说明</title>
      <link>https://piaohua.github.io/post/20200817-mysql-my-cnf/</link>
      <pubDate>Mon, 17 Aug 2020 23:32:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200817-mysql-my-cnf/</guid>
      <description>MySQL配置文件my.cnf参数解释说明 参数说明 #BEGIN CONFIG INFO #DESCR: 4GB RAM, 只使用InnoDB, ACID, 少量的连接, 队列负载大 #TYPE: SYSTEM #END CONFIG INFO # # 此mysql配置文件</description>
    </item>
    
    <item>
      <title>[Go] Golang应用构建Docker镜像</title>
      <link>https://piaohua.github.io/post/20200816-golang-docker/</link>
      <pubDate>Sun, 16 Aug 2020 23:15:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200816-golang-docker/</guid>
      <description>Golang应用通过Dockerfile构建Docker镜像 构建镜像 构建一个go应用镜像，当前目录加载项目，编译生成二进制文件 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 内连接、外连接、左连接、右连接示例介绍</title>
      <link>https://piaohua.github.io/post/20200816-mysql-join/</link>
      <pubDate>Sun, 16 Aug 2020 12:57:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200816-mysql-join/</guid>
      <description>MySQL 内连接、左连接（左外连接）、右连接（右外连接） 创建示例表 1 2 3 4 5 6 7 8 9 10 11 CREATE TABLE `a_table` ( `a_id` int(11) DEFAULT NULL, `a_name` varchar(10) DEFAULT NULL, `a_part` varchar(10) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8 CREATE TABLE `b_table` ( `b_id` int(11) DEFAULT NULL, `b_name` varchar(10)</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL事务详情</title>
      <link>https://piaohua.github.io/post/20200816-mysql-transaction/</link>
      <pubDate>Sun, 16 Aug 2020 00:09:58 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200816-mysql-transaction/</guid>
      <description>数据库中的事务是指对数据库执行一批操作，这些操作最终要么全部执行成功，要么全部失败，不会存在部分成功的情况。 事务的特性(ACID) 原子性（A</description>
    </item>
    
    <item>
      <title>[Go] Golang 官方限流器time/rate使用</title>
      <link>https://piaohua.github.io/post/20200815-golang-rate-limiter/</link>
      <pubDate>Sat, 15 Aug 2020 21:36:37 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200815-golang-rate-limiter/</guid>
      <description>time/rate是基于Token Bucket(令牌桶)算法实现的限流 限流 限制某个服务每秒的调用本服务的频率 客户端请求太多，超出服务端的服务</description>
    </item>
    
    <item>
      <title>[Go] Golang http.Client请求程序遇到 Connection Reset by Peer 或 EOF 问题</title>
      <link>https://piaohua.github.io/post/20200814-golang-connection-reset-by-peer/</link>
      <pubDate>Fri, 14 Aug 2020 23:43:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200814-golang-connection-reset-by-peer/</guid>
      <description>Golang http.Client请求程序遇到Connection Reset by peer 或 EOF 问题 问题 线上服务经常规律性的出现http.Client请求服务器数据和上报</description>
    </item>
    
    <item>
      <title>[Hey] 基于Golang开发的一款类似Ab的压测工具</title>
      <link>https://piaohua.github.io/post/20200814-golang-hey/</link>
      <pubDate>Fri, 14 Aug 2020 23:05:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200814-golang-hey/</guid>
      <description>Hey 基于Golang开发的一款类似Ab的压测工具 安装 MaxOS 安装 1 brew install hey golang源码编译安装 1 go get -u github.com/rakyll/hey 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>[Phabricator] 代码审查工具</title>
      <link>https://piaohua.github.io/post/20200813-phabricator/</link>
      <pubDate>Thu, 13 Aug 2020 23:09:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200813-phabricator/</guid>
      <description>Phabricator是Facebook开源的一个可视化的代码审查工具 安装 1 2 git clone https://github.com/phacility/libphutil.git git clone https://github.com/phacility/arcanist.git arc执行文件路径加载到系统路径并加载 1 2 3 source ~/.bash_profile arc</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL通过Sys库查看数据库运行情况</title>
      <link>https://piaohua.github.io/post/20200812-mysql-sys/</link>
      <pubDate>Wed, 12 Aug 2020 22:52:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200812-mysql-sys/</guid>
      <description>快捷的了解到MySQL的一些信息 sys库里面的表、视图、函数、存储过程可以使我们更方便、快捷的了解到MySQL的一些信息，比如哪些语句使用了</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL autocommit</title>
      <link>https://piaohua.github.io/post/20200812-mysql-autocommit/</link>
      <pubDate>Wed, 12 Aug 2020 22:24:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200812-mysql-autocommit/</guid>
      <description>MySQL autocommit 控制是否开启隐式事务 查看状态 mysql&amp;gt; show variables like &#39;%autocommit%&#39;; 开启自动提交 mysql&amp;gt; set autocommit=1; 关闭自动提交 使用commit提交事务操作，或者使用rollback回滚操作 配置文</description>
    </item>
    
    <item>
      <title>[Go] 一个Golang实现的MySQL基准测试工具</title>
      <link>https://piaohua.github.io/post/20200812-golang-benchyou/</link>
      <pubDate>Wed, 12 Aug 2020 22:15:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200812-golang-benchyou/</guid>
      <description>benchyou is a benchmark tool for MySQL, similar Sysbench. Introduction benchyou is a benchmark tool for MySQL, real-time monitoring TPS and vmstat/iostat Build 1 2 3 $ git clone https://github.com/xelabs/benchyou $ cd benchyou $ make build Usage 1 $ ./bin/benchyou -h Examples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 prepare 64 tables: ./bin/benchyou --mysql-host=192.168.0.3</description>
    </item>
    
    <item>
      <title>[Go] Golang实现一个工作池</title>
      <link>https://piaohua.github.io/post/20200811-golang-worker-pool/</link>
      <pubDate>Tue, 11 Aug 2020 23:02:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200811-golang-worker-pool/</guid>
      <description>Golang实现一个工作池处理并发任务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51</description>
    </item>
    
    <item>
      <title>[Go] Golang用Channel实现互斥锁</title>
      <link>https://piaohua.github.io/post/20200810-golang-channel-lock/</link>
      <pubDate>Mon, 10 Aug 2020 22:23:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200810-golang-channel-lock/</guid>
      <description>使用长度为1的有缓冲channel实现互斥锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48</description>
    </item>
    
    <item>
      <title>[Go] Golang Quic</title>
      <link>https://piaohua.github.io/post/20200809-golang-quic/</link>
      <pubDate>Sun, 09 Aug 2020 23:53:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200809-golang-quic/</guid>
      <description>Quick UDP Internet Connection QUIC 概述 QUIC（Quick UDP Internet Connection，快速 UDP 互联网连接协议）是一种以 UDP 为底层传输协议，支持加密、多路复用，工作在用户空</description>
    </item>
    
    <item>
      <title>[Go] Golang 在编译时使用ldflags动态设置包中变量的值</title>
      <link>https://piaohua.github.io/post/20200809-golang-ldflags/</link>
      <pubDate>Sun, 09 Aug 2020 18:25:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200809-golang-ldflags/</guid>
      <description>Golang 在编译时使用ldflags动态设置包中变量的值 -X importpath.name=value Set the value of the string variable in importpath named name to value. Note that before Go 1.5 this option took two separate arguments. Now it takes one argument split on the first = sign. 参数作用 golan</description>
    </item>
    
    <item>
      <title>[Go] Golang Crc32 Packet</title>
      <link>https://piaohua.github.io/post/20200809-golang-crc32-packet/</link>
      <pubDate>Sun, 09 Aug 2020 12:47:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200809-golang-crc32-packet/</guid>
      <description>打包解包协议中应用crc32校验和 crc32 介绍 crc32包实现了32位循环冗余校验（CRC-32）的校验和算法; CRC全称为Cyclic Redundancy Chec</description>
    </item>
    
    <item>
      <title>[Go] Golang Adler32 Packet</title>
      <link>https://piaohua.github.io/post/20200809-golang-adler32-packet/</link>
      <pubDate>Sun, 09 Aug 2020 12:47:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200809-golang-adler32-packet/</guid>
      <description>打包解包协议中应用adler32校验和 adler32 介绍 Adler-32是Mark Adler发明的校验和算法，和32位CRC校验算法一样，都是保护数据防</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 连接数和状态查看</title>
      <link>https://piaohua.github.io/post/20200809-mysql-show-connections/</link>
      <pubDate>Sun, 09 Aug 2020 00:09:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200809-mysql-show-connections/</guid>
      <description>MySQL 连接数和状态查看 mysql的最大连接数默认是100, 最大可以达到16384 查看mysql服务器最大连接数 1 2 mysql&amp;gt; show variables like &amp;#39;%max_connections%&amp;#39;; mysql&amp;gt; select @@max_connections; 设置mysql</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Sysbench</title>
      <link>https://piaohua.github.io/post/20200808-mysql-sysbench/</link>
      <pubDate>Sat, 08 Aug 2020 11:53:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200808-mysql-sysbench/</guid>
      <description>MySQL 基准测试 sysbench介绍 sysbench 是一个模块化的、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。 它主要包括以</description>
    </item>
    
    <item>
      <title>[Go] Golang Context</title>
      <link>https://piaohua.github.io/post/20200808-golang-context/</link>
      <pubDate>Sat, 08 Aug 2020 11:53:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200808-golang-context/</guid>
      <description>Golang Context Context 接口 1 2 3 4 5 6 7 8 9 type Context interface { Deadline() (deadline time.Time, ok bool) Done() &amp;lt;-chan struct{} Err() error Value(key interface{}) interface{} } context包提供暴露Context接口可以在多个Goroutine共享数</description>
    </item>
    
    <item>
      <title>[Go] Golang Channel</title>
      <link>https://piaohua.github.io/post/20200808-golang-channel/</link>
      <pubDate>Sat, 08 Aug 2020 11:52:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200808-golang-channel/</guid>
      <description>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating. 介绍 channel是GO语言级别提供的goroutine间的通信方式，channel是类型相关的，需要在声明channel</description>
    </item>
    
    <item>
      <title>[VIM] Vim实用小技巧</title>
      <link>https://piaohua.github.io/post/20200807-vim-tips/</link>
      <pubDate>Fri, 07 Aug 2020 23:06:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200807-vim-tips/</guid>
      <description>Vim实用小技巧 插入递增数字 let i=0 | g/toPlaced/s//\=i/ |let i=i+1 这条命令由三部分组成： let i=1 和 let i=i+1 构成了一个变量递增的循环。 g命令用于全局查找一个字符串，并对此字符串</description>
    </item>
    
    <item>
      <title>[VIM] vim十六进制格式查看</title>
      <link>https://piaohua.github.io/post/20200806-vim-hex-edit/</link>
      <pubDate>Fri, 07 Aug 2020 00:24:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200806-vim-hex-edit/</guid>
      <description>vim十六进制格式查看 xxd xxd是linux下一个显示、编辑、转换二进制命令 man xxd 查看帮助 DESCRIPTION xxd creates a hex dump of a given file or standard input. It can also convert a hex dump back to its original binary form. Like</description>
    </item>
    
    <item>
      <title>[VIM] Vim命令图解</title>
      <link>https://piaohua.github.io/post/20200805-vim-cheat-sheet-full/</link>
      <pubDate>Thu, 06 Aug 2020 23:36:25 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200805-vim-cheat-sheet-full/</guid>
      <description>Vim命令图解</description>
    </item>
    
    <item>
      <title>[VIM] 我的VIM配置</title>
      <link>https://piaohua.github.io/post/20200805-my-config-vim/</link>
      <pubDate>Thu, 06 Aug 2020 23:23:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200805-my-config-vim/</guid>
      <description>我的Vim配置项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Affected Rows</title>
      <link>https://piaohua.github.io/post/20200805-mysql-affected-rows/</link>
      <pubDate>Wed, 05 Aug 2020 21:27:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200805-mysql-affected-rows/</guid>
      <description>MySQL INSERT/INSERT &amp;hellip; ON DUPLICATE KEY UPDATE Affected Rows 问题 问题描述 在INSERT/INSERT ... ON DUPLICATE KEY UPDATE操作时, 会存在MySQL连接client_flag是否设置CL</description>
    </item>
    
    <item>
      <title>[Mac] Mac OSX Keyword Cmd</title>
      <link>https://piaohua.github.io/post/20200805-mac-osx-keyword-cmd/</link>
      <pubDate>Wed, 05 Aug 2020 00:07:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20200805-mac-osx-keyword-cmd/</guid>
      <description>Mac OSX 快捷键指令 mac 终端shell下把option键设置为alt键 打开终端，在终端shell菜单下选择偏好设置，选择描述文件选项卡， 选择一个终端</description>
    </item>
    
    <item>
      <title>[Git] 指令集</title>
      <link>https://piaohua.github.io/post/20180803.git.command/</link>
      <pubDate>Mon, 03 Aug 2020 21:21:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/20180803.git.command/</guid>
      <description>Git常用操作命令 Clone仓库 # 获取一个仓库，支持多种协议(http/git/ssh) $ git clone https://git.kernel.org/pub/scm/git/git.git $ git clone git://git.kernel.org/pub/scm/git/git.git $ git clone user@server:path/to/repo.git # GitHub创建仓库提示代</description>
    </item>
    
    <item>
      <title>[helm] 基于github搭建helm repository</title>
      <link>https://piaohua.github.io/post/helm_github/</link>
      <pubDate>Mon, 03 Aug 2020 00:12:45 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/helm_github/</guid>
      <description>基于github搭建helm repository 创建仓库 通过 https://github.com/new 创建一个 repository; 比如：https://github.com/piaohua/helm-charts 创建</description>
    </item>
    
    <item>
      <title>[里仁篇] My Blog</title>
      <link>https://piaohua.github.io/post/first/</link>
      <pubDate>Sun, 02 Aug 2020 11:14:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/first/</guid>
      <description>《论语 &amp;ndash; 里仁篇》不患无位，患所以立。不患莫己知，求为可知也。</description>
    </item>
    
    <item>
      <title>Theme preview</title>
      <link>https://piaohua.github.io/post/even-preview/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/even-preview/</guid>
      <description>Based on MarkdownPreview test.md. Markdown 1 2 3 4 5 6 7 8 # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 ### Duplicate Header ### Duplicate Header H1 H2 H3 H4 H5 H6 Duplicate Header Duplicate Header Paragraphs 1 2 3 4 This is a paragraph. I am still part of the paragraph. New paragraph. This is a paragraph. I am still part of the paragraph.</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://piaohua.github.io/links/</link>
      <pubDate>Wed, 12 Aug 2020 23:07:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/links/</guid>
      <description>路漫漫其修道远，吾将上下而求索。 基础理论 操作系统 计算机组成 计算机网络 TCP的那些事 数据结构 编程语言 C语言 Golang Erlang Python Dart Java 数据库 MySQL 软件工程 架构设计 工</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://piaohua.github.io/about/</link>
      <pubDate>Sun, 02 Aug 2020 10:56:25 +0800</pubDate>
      
      <guid>https://piaohua.github.io/about/</guid>
      <description>Hey, this is piaohua&amp;rsquo;s blog. 不患无位，患所以立。不患莫己知，求为可知也。 It makes use of a variety of open source projects including: Cobra Viper J Walter Weatherman Cast Theme Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>This is a hidden post.</title>
      <link>https://piaohua.github.io/post/hidden-post/</link>
      <pubDate>Thu, 08 Mar 2018 17:40:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/hidden-post/</guid>
      <description>&lt;p&gt;This post is hidden from the home page.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[English] Creating a New Theme</title>
      <link>https://piaohua.github.io/post/english-preview/</link>
      <pubDate>Thu, 31 Aug 2017 15:43:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/english-preview/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>[日本語] 敬語体系</title>
      <link>https://piaohua.github.io/post/japanese-preview/</link>
      <pubDate>Wed, 30 Aug 2017 01:53:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/japanese-preview/</guid>
      <description>日本語の敬語体系は、一般に、大きく尊敬語・謙譲語・丁寧語に分類される。文化審議会国語分科会は、2007年2月に「敬語の指針」を答申し、これに</description>
    </item>
    
    <item>
      <title>[中文] 《长恨歌》</title>
      <link>https://piaohua.github.io/post/chinese-preview/</link>
      <pubDate>Wed, 30 Aug 2017 01:37:56 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese-preview/</guid>
      <description>《长恨歌》是中国唐朝诗人白居易的一首长篇叙事诗。 第一段：贵妃受宠爱 汉皇重色思倾国，御宇多年求不得。杨家有女初长成，养在深闺人未识。 天生丽质难</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://piaohua.github.io/post/shortcodes/</link>
      <pubDate>Tue, 30 Aug 2016 16:01:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/shortcodes/</guid>
      <description>&lt;h1 id=&#34;admonition&#34;&gt;Admonition&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;biu biu biu.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;{{% admonition note &amp;#34;I&amp;#39;m title!&amp;#34; false %}}
biu biu biu.

{{% admonition type=&amp;#34;note&amp;#34; title=&amp;#34;note&amp;#34; details=&amp;#34;true&amp;#34; %}}
biu biu biu.
{{% /admonition %}}

{{% admonition example %}}
Without title.
{{% /admonition %}}

{{% /admonition %}}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JS Flowchart Diagrams</title>
      <link>https://piaohua.github.io/post/js-flowchart-diagrams/</link>
      <pubDate>Wed, 04 Mar 2015 21:57:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/js-flowchart-diagrams/</guid>
      <description>&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;st=&amp;gt;start: Start|past:&amp;gt;http://www.google.com[blank]
e=&amp;gt;end: End:&amp;gt;http://www.google.com
op1=&amp;gt;operation: My Operation|past
op2=&amp;gt;operation: Stuff|current
sub1=&amp;gt;subroutine: My Subroutine|invalid
cond=&amp;gt;condition: Yes
or No?|approved:&amp;gt;http://www.google.com
c2=&amp;gt;condition: Good idea|rejected
io=&amp;gt;inputoutput: catch something...|request

st-&amp;gt;op1(right)-&amp;gt;cond
cond(yes, right)-&amp;gt;c2
cond(no)-&amp;gt;sub1(left)-&amp;gt;op1
c2(yes)-&amp;gt;io-&amp;gt;e
c2(no)-&amp;gt;op2-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JS Sequence Diagrams</title>
      <link>https://piaohua.github.io/post/js-sequence-diagrams/</link>
      <pubDate>Wed, 04 Mar 2015 21:57:45 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/js-sequence-diagrams/</guid>
      <description>&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Andrew-&amp;gt;China: Says Hello
Note right of China: China thinks\nabout it
China--&amp;gt;Andrew: How are you?
Andrew-&amp;gt;&amp;gt;China: I am good thanks!
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Syntax Highlighting</title>
      <link>https://piaohua.github.io/post/syntax-highlighting/</link>
      <pubDate>Tue, 30 Aug 2011 16:01:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/syntax-highlighting/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helloWorld&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>