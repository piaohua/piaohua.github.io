<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/categories/python/</link>
    <description>Recent content in python on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 May 2025 23:11:59 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Telegram Bot 做客服系统来快速服务客户</title>
      <link>https://piaohua.github.io/post/python/20250517-telegram-bot-customer-service/</link>
      <pubDate>Sat, 17 May 2025 23:11:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20250517-telegram-bot-customer-service/</guid>
      <description>使用 Telegram Bot 做客服系统来快速服务客户 用Telegram Bot做客服服务是一个常用且理想的方案，因为Bot不仅可以匹配问题关键字来回答， 还可以接入</description>
    </item>
    
    <item>
      <title>Python 使用 SQLAlchemy 执行数据库操作</title>
      <link>https://piaohua.github.io/post/python/20240818-sqlalchemy/</link>
      <pubDate>Sun, 18 Aug 2024 18:09:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240818-sqlalchemy/</guid>
      <description>SQLAlchemy SQL Toolkit 和 Object Relational Mapper (ORM: 对象关系映射器)是一套用于处理数据库和Python的综合工具 SQLAlchemy各组件依赖关系图: 安装 1 pip install SQLAlchemy 使用 数据表模型</description>
    </item>
    
    <item>
      <title>[Python] itsdangerous 一个用于签名和序列化数据，确保数据安全传输不被篡改的库</title>
      <link>https://piaohua.github.io/post/python/20240813-itsdangerous/</link>
      <pubDate>Tue, 13 Aug 2024 21:46:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240813-itsdangerous/</guid>
      <description>itsdangerous 可以对数据进行加密签名，并将其交给其他不受信任的环境。当拿回数据时，可以确保没有人篡改它。 在URL中签署用户ID，并通过电子邮件发送给他们</description>
    </item>
    
    <item>
      <title>fastapi 发送 html 模板邮件</title>
      <link>https://piaohua.github.io/post/python/20240802-fastapi-html-email-template/</link>
      <pubDate>Fri, 02 Aug 2024 20:56:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240802-fastapi-html-email-template/</guid>
      <description>使用Fastapi-mail发送html模板邮件 安装 1 2 3 4 5 python3 -m venv .venv source .venv/bin/activate pip install fastapi-mail 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description>
    </item>
    
    <item>
      <title>正则表达式 - 字符匹配不以某字段开头或者结尾</title>
      <link>https://piaohua.github.io/post/python/20240707-prefix-suffix-re/</link>
      <pubDate>Sun, 07 Jul 2024 11:56:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240707-prefix-suffix-re/</guid>
      <description>正则表达式 - 字符匹配不以某字段开头或者结尾 在文件搜索或数据库查询中，经常会遇到一种场景，需要过滤以某段字符开头或结尾，或者不以某段字符开头或</description>
    </item>
    
    <item>
      <title>FastAPI Middleware</title>
      <link>https://piaohua.github.io/post/python/20240626-fastapi-middleware/</link>
      <pubDate>Wed, 26 Jun 2024 21:25:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240626-fastapi-middleware/</guid>
      <description>&amp;ldquo;中间件&amp;quot;是一个函数,它在每个请求被特定的路径操作处理之前,以及在每个响应返回之前工作. 它接收你的应用程序的每一个请求</description>
    </item>
    
    <item>
      <title>Mac pytest install error: externally-managed-environment</title>
      <link>https://piaohua.github.io/post/python/20240609-pytest-install/</link>
      <pubDate>Sun, 09 Jun 2024 15:43:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240609-pytest-install/</guid>
      <description>macox安装pytest报错解决方案 错误提示信息如下: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 pip3 install pytest error: externally-managed-environment × This</description>
    </item>
    
    <item>
      <title>Python Fastapi 实现获取 Snowflake ID 接口</title>
      <link>https://piaohua.github.io/post/python/20240608-snowflake-fastapi/</link>
      <pubDate>Sat, 08 Jun 2024 00:06:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240608-snowflake-fastapi/</guid>
      <description>Python Fastapi 实现获取 Snowflake ID 接口，并用helm部署。 snowflake python 实现如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44</description>
    </item>
    
    <item>
      <title>Python 装饰器</title>
      <link>https://piaohua.github.io/post/python/20240518-decorator/</link>
      <pubDate>Sat, 18 May 2024 16:59:25 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240518-decorator/</guid>
      <description>装饰器是语法糖： 在代码中利用更简洁流畅的语法实现更为复杂的功能。 装饰器允许包装另一个函数，以扩展包装函数的行为，而无需修改基础函数定义。 经常</description>
    </item>
    
    <item>
      <title>Python定时任务</title>
      <link>https://piaohua.github.io/post/python/20240518-cron-task/</link>
      <pubDate>Sat, 18 May 2024 15:49:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240518-cron-task/</guid>
      <description>原文： Python定时任务8种实现方式 使用 threading.Timer 实现 threading.Timer类允许你安排一个函数在指定时间后执行。 它通过创建一个新的线程来</description>
    </item>
    
    <item>
      <title>Python中合并两个字典</title>
      <link>https://piaohua.github.io/post/python/20240518-merge-dict/</link>
      <pubDate>Sat, 18 May 2024 14:06:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240518-merge-dict/</guid>
      <description>如何在Python中优雅地合并两个字典 使用Update函数 1 2 3 4 5 &amp;gt;&amp;gt;&amp;gt; d1 = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2} &amp;gt;&amp;gt;&amp;gt; d2 = {&amp;#39;c&amp;#39;: 3, &amp;#39;b&amp;#39;: 4} &amp;gt;&amp;gt;&amp;gt; d1.update(d2) &amp;gt;&amp;gt;&amp;gt; d1 {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 4, &amp;#39;c&amp;#39;: 3} 用字典d2更新字典d1,</description>
    </item>
    
    <item>
      <title>Python 打包工具 Nuitka</title>
      <link>https://piaohua.github.io/post/python/20240516-nuitka/</link>
      <pubDate>Thu, 16 May 2024 22:03:25 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240516-nuitka/</guid>
      <description>Nuitka Nuitka is a Python compiler written in Python. Install Nuitka python -m pip install nuitka Verify using command python -m nuitka --version Write some code and test Create a folder for the Python code mkdir HelloWorld make a python file named hello.py 1 2 3 4 5 6 7 8 9 10 def talk(message): return &amp;#34;Talk &amp;#34; + message def main(): print(talk(&amp;#34;Hello World&amp;#34;)) if __name__ == &amp;#34;__main__&amp;#34;: main() Test</description>
    </item>
    
    <item>
      <title>python 任意数量的实参(*args)和关键参数(**args)</title>
      <link>https://piaohua.github.io/post/python/20240516-keyword-arguments/</link>
      <pubDate>Thu, 16 May 2024 21:41:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240516-keyword-arguments/</guid>
      <description>*args 形参接收一个 元组, 形参为 **args 形式时，接收一个字典, *args 必须在 **args 前面 *（星号）用于解包序列或可迭代对象，将其元素分配给函数的参数或在列表、元组等</description>
    </item>
    
    <item>
      <title>Dataclasses 数据类</title>
      <link>https://piaohua.github.io/post/python/20240515-dataclasses/</link>
      <pubDate>Wed, 15 May 2024 21:33:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240515-dataclasses/</guid>
      <description>Dataclasses 数据类 @dataclasses.dataclass() 是Python 3.7及更高版本中引入的一个装饰器，用于简化数据封装类（即主要用于存储数据的类）的编写。 这个装饰器可以自动为类生成一</description>
    </item>
    
    <item>
      <title>Python 函数注解</title>
      <link>https://piaohua.github.io/post/python/20240513-function-annotations/</link>
      <pubDate>Mon, 13 May 2024 22:10:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240513-function-annotations/</guid>
      <description>函数注解 是可选的用户自定义函数类型的元数据完整信息 标注 以字典的形式存放在函数的 annotations 属性中而对函数的其他部分没有影响。 形参标注的定义方式是在形参</description>
    </item>
    
    <item>
      <title>python 内置数据类型</title>
      <link>https://piaohua.github.io/post/python/20240512-native-datatypes/</link>
      <pubDate>Sun, 12 May 2024 12:42:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240512-native-datatypes/</guid>
      <description>内置数据类型 在 Python 中， 每个值都有一种数据类型，但您并不需要声明变量的数据类型。 Python 根据每个变量的初始赋值情况分析其类型，并在内部对其进行跟踪。 Python</description>
    </item>
    
    <item>
      <title>unittest 单元测试框架</title>
      <link>https://piaohua.github.io/post/python/20240511-unittest/</link>
      <pubDate>Sat, 11 May 2024 23:09:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240511-unittest/</guid>
      <description>unittest 单元测试框架是受到 JUnit 的启发，与其他语言中的主流单元测试框架有着相似的风格。其支持测试自动化，配置共享和关机代码测试。支持将测试样例聚合到测</description>
    </item>
    
    <item>
      <title>Python基础知识点及使用</title>
      <link>https://piaohua.github.io/post/python/20240325-basic/</link>
      <pubDate>Mon, 25 Mar 2024 17:41:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240325-basic/</guid>
      <description>Python是一种解释的、高级的、通用的编程语言。 原文： 总结了50道必备的Python面试题(附答案) Python代码是如何执行的？ 首先，解</description>
    </item>
    
    <item>
      <title>完全二叉树的复原</title>
      <link>https://piaohua.github.io/post/python/20240314-build-tree/</link>
      <pubDate>Thu, 14 Mar 2024 11:01:07 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240314-build-tree/</guid>
      <description>完全二叉树的复原 完全二叉树是一种特殊的二叉树，其中除了最后一层之外，其他层的节点都是满的，且最后一层的节点都集中在左侧。要复原一个完全二叉树</description>
    </item>
    
    <item>
      <title>删除链表倒数第n个元素</title>
      <link>https://piaohua.github.io/post/python/20240314-linked-list-delete-nth-from-end/</link>
      <pubDate>Thu, 14 Mar 2024 10:15:06 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240314-linked-list-delete-nth-from-end/</guid>
      <description>删除链表倒数第n个元素 要实现一个链表并删除链表的倒数第n个元素，首先需要定义链表的节点结构，然后实现链表的基本操作，包括插入元素和删除元素。</description>
    </item>
    
    <item>
      <title>使用 ulid-py 替换 uuid</title>
      <link>https://piaohua.github.io/post/python/20240119-ulid-py/</link>
      <pubDate>Fri, 19 Jan 2024 23:39:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240119-ulid-py/</guid>
      <description>使用 ulid-py 替换 uuid ULID特性 1 2 3 import ulid ulid.new() &amp;lt;ULID(&amp;#39;01BJQE4QTHMFP0S5J153XCFSP9&amp;#39;)&amp;gt; 与UUID的128位兼容性 每毫秒1.21e + 24个唯一ULID 按字典顺序(也就是字母顺序)排序！ 规范地</description>
    </item>
    
    <item>
      <title>Python操作Redis</title>
      <link>https://piaohua.github.io/post/python/20240113-redis/</link>
      <pubDate>Sat, 13 Jan 2024 22:40:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240113-redis/</guid>
      <description>Python操作Redis redis-py install 1 pip install redis Start a redis via docker: 1 docker run -p 6379:6379 -it redis/redis-stack:latest Quickly connecting to redis 1 2 3 4 5 import redis r = redis.Redis(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) r.ping() r.set(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;) r.get(&amp;#39;foo&amp;#39;) Connection Pools 1 2 3 4 import redis pool = redis.ConnectionPool(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) r = redis.Redis(connection_pool=pool) r.ping() 操作</description>
    </item>
    
    <item>
      <title>golang text/template &amp; python Jinja2</title>
      <link>https://piaohua.github.io/post/golang/20231230-template/</link>
      <pubDate>Tue, 02 Jan 2024 19:47:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20231230-template/</guid>
      <description>golang text/template &amp;amp; python Jinja2 模板语法 模板语法都包含在{{和}}中间，其中{{.}}中的点表示当前对象。 如果想清除左右的空格，则需要添加-符号，{{- 清除左边空</description>
    </item>
    
    <item>
      <title>金融数据分析库yfinance使用</title>
      <link>https://piaohua.github.io/post/python/20231231-yfinance/</link>
      <pubDate>Sun, 31 Dec 2023 11:42:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20231231-yfinance/</guid>
      <description>yfinance 是一个使用 Yahoo! 获取数据的 Python 第三方模块。它支持获取最细到1分钟级的历史数据及股票基本面数据。 yfinance 是一个流行的开源库，由 Ran Aroussi 开发，用于访问雅虎财经</description>
    </item>
    
    <item>
      <title>TA-Lib - Technical Analysis Library</title>
      <link>https://piaohua.github.io/post/python/20231231-ta-lib/</link>
      <pubDate>Sun, 31 Dec 2023 10:36:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20231231-ta-lib/</guid>
      <description>TA-Lib is widely used by trading software developers requiring to perform technical analysis of financial market data. Install install from PyPI: 1 $ python -m pip install TA-Lib or Max OS 1 $ brew install ta-lib Abstract API Quick Start 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import numpy as np from talib.abstract import * # note that all ndarrays</description>
    </item>
    
    <item>
      <title>Python Telegram Bot</title>
      <link>https://piaohua.github.io/post/python/20231230-telegram-bot/</link>
      <pubDate>Sat, 30 Dec 2023 11:50:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20231230-telegram-bot/</guid>
      <description>Telegram Bot Example Installing EASY TO SETUP 1 $ pip install python-telegram-bot --upgrade Example inlinekeyboard2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55</description>
    </item>
    
    <item>
      <title>[Python] Learn python3 in one picture.</title>
      <link>https://piaohua.github.io/post/python/20200903-python3-in-one-pic/</link>
      <pubDate>Thu, 03 Sep 2020 23:46:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20200903-python3-in-one-pic/</guid>
      <description>Learn python3 in one picture. 离线版思维导图 示例 字典 1 2 3 4 5 ls = {s: len(s) for s in [&amp;#34;Python&amp;#34;, &amp;#34;Javascript&amp;#34;, &amp;#34;Golang&amp;#34;]} print(ls) sl = {v: k for k, v in ls.items()} print(sl) 装饰符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def log(f): def wrapper(): print(&amp;#34;Hey log~&amp;#34;)</description>
    </item>
    
  </channel>
</rss>