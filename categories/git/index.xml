<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/categories/git/</link>
    <description>Recent content in git on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 25 Sep 2021 12:39:57 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Git] git add -A 和 git add . 及 git add -u的区别</title>
      <link>https://piaohua.github.io/post/git/20210925-git-add/</link>
      <pubDate>Sat, 25 Sep 2021 12:39:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20210925-git-add/</guid>
      <description>git add -A 和 git add . 及 git add -u的区别 git add . git add .会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区， 包括文件内容修改(modified)</description>
    </item>
    
    <item>
      <title>[Git] git commit 输入 message 方式和规范</title>
      <link>https://piaohua.github.io/post/git/20201231-git-commit-message/</link>
      <pubDate>Thu, 31 Dec 2020 19:50:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20201231-git-commit-message/</guid>
      <description>git commit 输入 message 方式和规范 方式 常见的-m &amp;lt;msg&amp;gt;单行输入 git commit -m &amp;quot;message&amp;quot; . 当要输入多行时，可以不带参数，直接使用git commit会启动默认</description>
    </item>
    
    <item>
      <title>[Git] Git 代码回滚操作(reset/revert/checkout)</title>
      <link>https://piaohua.github.io/post/git/20201228-git-reset/</link>
      <pubDate>Mon, 28 Dec 2020 22:44:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20201228-git-reset/</guid>
      <description>Git 代码回滚操作 git reset的理解 git reset 直接把之前 commit 删掉，非 git reset --hard 的操作是不会删掉 git reset 参数定义 --soft 回退后分支修改的代码被保留并标记为add的状态（</description>
    </item>
    
    <item>
      <title>[Git] Git cherry-pick用法</title>
      <link>https://piaohua.github.io/post/git/20200913-git-cherry-pick/</link>
      <pubDate>Sun, 13 Sep 2020 15:08:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20200913-git-cherry-pick/</guid>
      <description>Git cherry-pick可以选择指定的若干commit进行合并 cherry-pick与merge、bease之间的最大区别是，cherry-</description>
    </item>
    
    <item>
      <title>[Git] git rebase 合并多个commit</title>
      <link>https://piaohua.github.io/post/git/20200905-git-rebase/</link>
      <pubDate>Sat, 05 Sep 2020 10:29:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20200905-git-rebase/</guid>
      <description>git rebase 合并多个commit git rebase命令在另一个分支基础之上重新应用，用于把一个分支的修改合并到当前分支。 使用语法 1 2 3 4 5 git rebase [-i | --interactive] [options] [--exec</description>
    </item>
    
    <item>
      <title>[Phabricator] 代码审查工具</title>
      <link>https://piaohua.github.io/post/tool/20200813-phabricator/</link>
      <pubDate>Thu, 13 Aug 2020 23:09:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20200813-phabricator/</guid>
      <description>Phabricator是Facebook开源的一个可视化的代码审查工具 安装 1 2 git clone https://github.com/phacility/libphutil.git git clone https://github.com/phacility/arcanist.git arc执行文件路径加载到系统路径并加载 1 2 3 source ~/.bash_profile arc</description>
    </item>
    
    <item>
      <title>[Git] 指令集</title>
      <link>https://piaohua.github.io/post/git/20180803.git.command/</link>
      <pubDate>Mon, 03 Aug 2020 21:21:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20180803.git.command/</guid>
      <description>Git常用操作命令 Clone仓库 # 获取一个仓库，支持多种协议(http/git/ssh) $ git clone https://git.kernel.org/pub/scm/git/git.git $ git clone git://git.kernel.org/pub/scm/git/git.git $ git clone user@server:path/to/repo.git # GitHub创建仓库提示代</description>
    </item>
    
  </channel>
</rss>