<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/post/</link>
    <description>Recent content in Posts on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Sep 2025 18:04:26 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>客户端直接上传文件到 Aws S3 方案实现</title>
      <link>https://piaohua.github.io/post/learn/20250907-aws-s3-upload/</link>
      <pubDate>Sun, 07 Sep 2025 18:04:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20250907-aws-s3-upload/</guid>
      <description>Web 直接上传 S3 技术方案验证 | Golang 实现 将线上传文件到 AWS S3 的方案中，最常用的是前端直接上传，后端生成签名，然后前端通过签名上传到 AWS S3。 AWS S3 一次性签</description>
    </item>
    
    <item>
      <title>Docker 安装 Elasticsearch</title>
      <link>https://piaohua.github.io/post/docker/20250907-docker-elasticsearch-quickstart/</link>
      <pubDate>Sun, 07 Sep 2025 17:04:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20250907-docker-elasticsearch-quickstart/</guid>
      <description>Docker Insert Elasticsearch Quickstart 安装 Elasticsearch 拉取镜像 1 docker pull docker.elastic.co/elasticsearch/elasticsearch:7.16.1 运行 Elasticsearch 容器 1 docker run -p 9200:9200 -p 9300:9300 --name elasticsearch -e ES_JAVA_OPTS=&amp;#34;-Xms4G -Xmx4G&amp;#34; -e &amp;#34;discovery.type=single-node&amp;#34; docker.elastic.co/elasticsearch/elasticsearch:7.16.1 参数说明： -d：在后台运行容器。 -p 9200:9200：将容器的 9200 端口映</description>
    </item>
    
    <item>
      <title>crontab 安装及使用</title>
      <link>https://piaohua.github.io/post/linux/20250907-crontab/</link>
      <pubDate>Sun, 07 Sep 2025 16:13:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20250907-crontab/</guid>
      <description>crontab 安装及使用 crontab -l 查看当前用户的crontab，如果提示 -bash: crontab: command not found，意味着没有安装crontab。 安装 Debian 的系统（如 Ubuntu） 1 2 sudo</description>
    </item>
    
    <item>
      <title>[Go] golang中defer和return执行顺序</title>
      <link>https://piaohua.github.io/post/golang/20250907-go-defer-return/</link>
      <pubDate>Sun, 07 Sep 2025 15:52:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20250907-go-defer-return/</guid>
      <description>Golang中defer和return执行顺序 基本执行顺序 ‌返回值赋值‌：return首先将计算结果赋值给函数的返回值。 执行defer链‌：</description>
    </item>
    
    <item>
      <title>Aws 创建和配置弹性负载均衡器，并配置运行状况检查</title>
      <link>https://piaohua.github.io/post/learn/20250831-aws-es2-application-load-balancers/</link>
      <pubDate>Sun, 31 Aug 2025 19:40:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20250831-aws-es2-application-load-balancers/</guid>
      <description>AWS 创建和配置弹性负载均衡器，并配置运行状况检查 使用aws负载均衡器，可以将单一入口的流量分发到多个后端服务器。同时可以结合Auto Scali</description>
    </item>
    
    <item>
      <title>aws windows rdp 创建新的远程登录账号</title>
      <link>https://piaohua.github.io/post/learn/20250830-aws-windows-rdp-connect/</link>
      <pubDate>Sat, 30 Aug 2025 23:01:00 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20250830-aws-windows-rdp-connect/</guid>
      <description>使用 RDP 客户端连接到 Windows 实例 要在AWS上的Windows EC2实例上创建新的远程登录账号，需要先连接到实例，然后使用本地用户和组工具创建新用户，</description>
    </item>
    
    <item>
      <title>Typescript 极速梳理</title>
      <link>https://piaohua.github.io/post/learn/20250830-typescript-quick-start/</link>
      <pubDate>Sat, 30 Aug 2025 20:57:35 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20250830-typescript-quick-start/</guid>
      <description>Typescript 极速梳理 TypeScript 极速梳理 1. 类型声明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 let a: string // 变量a只能存储字符串 let b: number // 变量a只能存储数值 let c: boolean // 变量</description>
    </item>
    
    <item>
      <title>Vue3 快速入手</title>
      <link>https://piaohua.github.io/post/learn/20250830-vue3-quick-start/</link>
      <pubDate>Sat, 30 Aug 2025 18:36:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20250830-vue3-quick-start/</guid>
      <description>Vue3 快速入手 1. Vue3简介 2020年9月18日，Vue.js发布版3.0版本，代号：One Piece（n 经历了：4800+次提交、40+个RF</description>
    </item>
    
    <item>
      <title>Openresty &#43; Lua &#43; Redis 实现动态IP黑名单</title>
      <link>https://piaohua.github.io/post/tool/20250828-openresty-lua-redis-ip-black/</link>
      <pubDate>Thu, 28 Aug 2025 22:38:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250828-openresty-lua-redis-ip-black/</guid>
      <description>Openresty + Lua + Redis 实现动态IP黑名单 在 Nginx 中屏蔽特定 IP 地址是提升服务器安全性的有效方式，可以防止恶意访问和攻击。 配置deny指令来屏蔽IP Nginx 主要通过 deny</description>
    </item>
    
    <item>
      <title>Openresty &#43; Websocket &#43; Redis Stream 实现一个简单聊天室，保持长连接，并通过Redis转发消息</title>
      <link>https://piaohua.github.io/post/tool/20250824-openresty-websocket-redis/</link>
      <pubDate>Sun, 24 Aug 2025 19:30:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250824-openresty-websocket-redis/</guid>
      <description>用 Openresty + Websocket + Redis Stream 实现一个简单聊天室，保持长连接，并通过Redis Stream 转发消息 在 Openresty + Websocket + Redis 实现一个简单聊天室，保持长连接，并通过Redis转发消息</description>
    </item>
    
    <item>
      <title>Openresty &#43; Websocket &#43; Redis 实现一个简单聊天室，保持长连接，并通过Redis转发消息</title>
      <link>https://piaohua.github.io/post/tool/20250823-openresty-websocket-redis/</link>
      <pubDate>Sat, 23 Aug 2025 17:31:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250823-openresty-websocket-redis/</guid>
      <description>用 Openresty + Websocket + Redis 实现一个简单聊天室，保持长连接，并通过Redis转发消息 在 Openresty 创建 Websocket 连接，并将消息发到 Redis 队列中 中，详细实现了一个简单的聊天室，将消</description>
    </item>
    
    <item>
      <title>Openresty 创建 Websocket 连接，并将消息发到 Redis 队列中</title>
      <link>https://piaohua.github.io/post/tool/20250816-openresty-websocket-redis/</link>
      <pubDate>Sat, 16 Aug 2025 16:22:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250816-openresty-websocket-redis/</guid>
      <description>Openresty 实现 Websocket 连接，并将消息发到 Redis 队列中，方便其他服务消费。 docker 安装 openresty 在宿主机上创建挂载的目录 1 2 3 mkdir -p /data/openresty/nginx/ cd /data/openresty/nginx mkdir -p conf.d html logs lua conf 下载 openresty 镜像 1 docker pull openresty/openresty:1.25.3.2-alpine-aarch64 启动容</description>
    </item>
    
    <item>
      <title>Openresty 使用入门</title>
      <link>https://piaohua.github.io/post/tool/20250727-openresty-usages/</link>
      <pubDate>Sun, 27 Jul 2025 17:01:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250727-openresty-usages/</guid>
      <description>使用Docker安装OpenResty并使用示例学习 OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模</description>
    </item>
    
    <item>
      <title>[Go] RSA 私钥加密公钥解密，及和 Java 实现互通</title>
      <link>https://piaohua.github.io/post/golang/20250717-go-rsa-private-encrypt-and-public-decrypt/</link>
      <pubDate>Thu, 17 Jul 2025 00:54:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20250717-go-rsa-private-encrypt-and-public-decrypt/</guid>
      <description>golang RSA 私钥加密公钥解密，及和 Java 实现互通。 在golang中使用RSA算法时，一般都是公钥加密，私钥解密，这是一个常见的场景。但是在实际使用中， 往</description>
    </item>
    
    <item>
      <title>[Go] 新一代官方标准日志库 slog 将日志按级别写入到不同文件</title>
      <link>https://piaohua.github.io/post/golang/20250622-slog-glog-zap/</link>
      <pubDate>Sun, 22 Jun 2025 16:37:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20250622-slog-glog-zap/</guid>
      <description>log/slog 是 Go 1.21 引入的一个新的日志记录包 slog相较于传统log包，slog提供了更丰富的功能，如：支持结构化日志，能输出json等格式的日志， 同时</description>
    </item>
    
    <item>
      <title>在使用Cloudflare的情况下，如何在Nginx中获取到真实的客户端IP地址呢？</title>
      <link>https://piaohua.github.io/post/tool/20250614-nginx-cloudflare/</link>
      <pubDate>Sat, 14 Jun 2025 20:25:28 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250614-nginx-cloudflare/</guid>
      <description>在使用Cloudflare的情况下，如何在后端Nginx中获取到真实的客户端IP地址呢？ Cloudflare作为代理服务，它的作用是让用户的</description>
    </item>
    
    <item>
      <title>[唐诗] 《山中送别》</title>
      <link>https://piaohua.github.io/post/chinese/20250525-poetry-shanzhongsongbie/</link>
      <pubDate>Sun, 25 May 2025 10:59:31 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20250525-poetry-shanzhongsongbie/</guid>
      <description>《山中送别》唐·王维 山中相送罢，日暮掩柴扉。 春草年年绿，王孙归不归。 “春草年年绿，王孙归不归？”后两句翻用《楚辞》语意，原文“王孙游兮不归，</description>
    </item>
    
    <item>
      <title>[Go] Golang 实现 Server Sent Events Demo</title>
      <link>https://piaohua.github.io/post/golang/20250618-server-sent-events/</link>
      <pubDate>Sun, 18 May 2025 19:40:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20250618-server-sent-events/</guid>
      <description>以下是一个完整的 Server-Sent Events (SSE) 在 Go 中的实现示例，包含服务端和客户端的代码。SSE 适用于服务器向客户端单向推送实时数据的场景（如通知、日志流等）。 Server-Sent Events</description>
    </item>
    
    <item>
      <title>[Go] go-zero 使用入门</title>
      <link>https://piaohua.github.io/post/golang/20250618-go-zero-start/</link>
      <pubDate>Sun, 18 May 2025 15:31:29 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20250618-go-zero-start/</guid>
      <description>go-zero快速开始 go-zero 是一个集成了各种工程实践的 web 和 rpc 框架。 架构图 框架设计​ 轻松获得支撑千万日活服务的稳定性，内建级联超时控制、限流、自适</description>
    </item>
    
    <item>
      <title>开源在线客服系统GO语言开发GO-FLY,免费在线客服系统</title>
      <link>https://piaohua.github.io/post/golang/20250618-go-fly/</link>
      <pubDate>Sun, 18 May 2025 15:14:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20250618-go-fly/</guid>
      <description>开源在线客服系统GO语言开发GO-FLY,免费在线客服系统 在使用 Telegram Bot 做客服系统来快速服务客户中介绍了如何用Telegram机器人做客服系统，</description>
    </item>
    
    <item>
      <title>使用 Telegram Bot 做客服系统来快速服务客户</title>
      <link>https://piaohua.github.io/post/python/20250517-telegram-bot-customer-service/</link>
      <pubDate>Sat, 17 May 2025 23:11:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20250517-telegram-bot-customer-service/</guid>
      <description>使用 Telegram Bot 做客服系统来快速服务客户 用Telegram Bot做客服服务是一个常用且理想的方案，因为Bot不仅可以匹配问题关键字来回答， 还可以接入</description>
    </item>
    
    <item>
      <title>兰亭集序</title>
      <link>https://piaohua.github.io/post/chinese/20250517-lantingjixu/</link>
      <pubDate>Sat, 17 May 2025 09:36:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20250517-lantingjixu/</guid>
      <description>兰亭集序 魏晋·王羲之 永和九年，岁在癸丑，暮春之初，会于会稽山阴之兰亭，修禊事也。群贤毕至，少长咸集。此地有崇山峻岭，茂林修竹，又有清流激湍，</description>
    </item>
    
    <item>
      <title>[Go] 类型引用的方法表达式</title>
      <link>https://piaohua.github.io/post/golang/20250422-method-expression/</link>
      <pubDate>Tue, 22 Apr 2025 20:56:14 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20250422-method-expression/</guid>
      <description>在Go中通过类型引用的方法表达式会被还原成普通函数样式，接收者是第一个参数，调用时显示传参。 示例如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>学习如何在家看食材做菜</title>
      <link>https://piaohua.github.io/post/learn/20250418-how-to-cook/</link>
      <pubDate>Fri, 18 Apr 2025 23:12:21 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20250418-how-to-cook/</guid>
      <description>How to Cook 程序员做饭指南 之前收藏过一个菜谱网站食用手册，你可以在网站上选择自己的食材，然后就可以帮你 搜索和筛选对应的食谱，这样在家就不用纠结做什</description>
    </item>
    
    <item>
      <title>[Go] go-micro 使用入门</title>
      <link>https://piaohua.github.io/post/golang/20250408-go-micro-start/</link>
      <pubDate>Tue, 08 Apr 2025 12:01:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20250408-go-micro-start/</guid>
      <description>go-micro 入门 go-micro是一个简化分布式开发的微服务生态系统，该系统为开发分布式应用程序提供了高效，便捷的模块构建。主要目的是简化分布式系统的</description>
    </item>
    
    <item>
      <title>Cloudflare 将 example.com 重定向到 www.example.com</title>
      <link>https://piaohua.github.io/post/learn/20241216-cloudflare-redirect/</link>
      <pubDate>Mon, 16 Dec 2024 21:59:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20241216-cloudflare-redirect/</guid>
      <description>20241216 Cloudflare Redirecte 在 AWS Amazon S3 存储桶配置自定义域名访问 文章中，有两个问题: 使用 CloudFront 托管网站时，必须使用https，也就是必须上传安全证书密钥，但是 aws 很早就不接</description>
    </item>
    
    <item>
      <title>AWS Amazon S3 存储桶配置自定义域名访问</title>
      <link>https://piaohua.github.io/post/learn/20241118-aws-s3-website/</link>
      <pubDate>Mon, 18 Nov 2024 22:28:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20241118-aws-s3-website/</guid>
      <description>使用自定义域名访问 AWS S3 在使用AWS S3存储桶时，当您将存储桶配置为静态网站时，先将AWS Amazon S3 存储桶设置开放外部访问。 然后在存储桶属性中，开启</description>
    </item>
    
    <item>
      <title>Git Flow</title>
      <link>https://piaohua.github.io/post/git/20241023-git-flow/</link>
      <pubDate>Wed, 23 Oct 2024 19:58:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20241023-git-flow/</guid>
      <description>git flow 在 2010 年的时候，有人提出了一套流程，或说是一套規矩让大家可以遵守: A successful Git branching model 随后陆续出现其它优秀的开发流程，如：GitHub flow, Gitlab Flow, git-</description>
    </item>
    
    <item>
      <title>一个学习欣赏中国古诗词的网站 AsPoem.com</title>
      <link>https://piaohua.github.io/post/chinese/20241015-aspoem-com/</link>
      <pubDate>Tue, 15 Oct 2024 23:25:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20241015-aspoem-com/</guid>
      <description>学习欣赏中国古诗词的网站AsPoem.com 秋 兴 · 其 一 唐·杜甫 玉 露 凋 伤 枫 树 林 ， 巫 山 巫 峡 气 萧 森 。 江 间 波 浪 兼 天 涌 ， 塞 上 风 云 接 地 阴 。 丛 菊 两 开 他 日 泪</description>
    </item>
    
    <item>
      <title>禁用web开发者工具，阻止浏览器F12开发者工具调试</title>
      <link>https://piaohua.github.io/post/learn/20240929-disable-devtool/</link>
      <pubDate>Sun, 29 Sep 2024 20:38:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240929-disable-devtool/</guid>
      <description>前端页面防止恶意调试的几种方法。 debugger 利用debugger关键字阻止F12调试，在打开F12调试工具时，会执行debugger来设置断点， 此时，</description>
    </item>
    
    <item>
      <title>在 K8s 中使用 云原生API网关 Higress</title>
      <link>https://piaohua.github.io/post/docker/20240918-higress-quickstart/</link>
      <pubDate>Wed, 18 Sep 2024 20:01:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240918-higress-quickstart/</guid>
      <description>在标准 K8s 集群中使用 在Docker中启动 Higress 只需 Docker 即可启动，方便个人开发者在本地搭建学习，或者用于搭建简易站点: 1 2 3 4 5 6 # 创建一个工作目录 mkdir</description>
    </item>
    
    <item>
      <title>AWS RDS 创建MySQL数据库，并通过EC2服务器连接</title>
      <link>https://piaohua.github.io/post/mysql/20240909-aws-rds-init/</link>
      <pubDate>Mon, 09 Sep 2024 23:57:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240909-aws-rds-init/</guid>
      <description>AWS RDS 创建MySQL数据库，并通过Ec2服务器连接 创建数据库时，根据自己的需求，按RDS提示创建数据库即可，比如选择MySQL社区版本创建， 选</description>
    </item>
    
    <item>
      <title>docker.io无法访问情况下，如何构建golang应用</title>
      <link>https://piaohua.github.io/post/golang/20240901-docker-build-golang-app/</link>
      <pubDate>Sun, 01 Sep 2024 19:18:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240901-docker-build-golang-app/</guid>
      <description>最近docker.io国内无法访问，拉取不到最新的镜像，记录使用新的代理获取构建过程 使用镜像加速dockerpull.com拉取镜像 1 2 3 4</description>
    </item>
    
    <item>
      <title>macos golang 程序依赖 cgo 编译不兼容问题解决方案</title>
      <link>https://piaohua.github.io/post/golang/20240901-mac-cgo-enabled/</link>
      <pubDate>Sun, 01 Sep 2024 11:25:58 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240901-mac-cgo-enabled/</guid>
      <description>macos golang 程序依赖 cgo 编译不兼容问题解决方案 在本地macos环境上编译程序，上传到linux环境，发现运行失败，失败信息如下： 1 [error] failed to initialize database, got error Binary was compiled</description>
    </item>
    
    <item>
      <title>AWS Amazon S3 存储桶设置开放外部访问</title>
      <link>https://piaohua.github.io/post/learn/20240830-aws-amazon-s3-public-read/</link>
      <pubDate>Fri, 30 Aug 2024 21:26:29 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240830-aws-amazon-s3-public-read/</guid>
      <description>AWS Amazon S3 存储桶设置开放外部访问 aws s3存储桶中的资源要开放访问，需要开放公共访问权限，配置存储桶策略，否则访问失败，失败提示内容示例如下： 1 2 3</description>
    </item>
    
    <item>
      <title>Python 使用 SQLAlchemy 执行数据库操作</title>
      <link>https://piaohua.github.io/post/python/20240818-sqlalchemy/</link>
      <pubDate>Sun, 18 Aug 2024 18:09:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240818-sqlalchemy/</guid>
      <description>SQLAlchemy SQL Toolkit 和 Object Relational Mapper (ORM: 对象关系映射器)是一套用于处理数据库和Python的综合工具 SQLAlchemy各组件依赖关系图: 安装 1 pip install SQLAlchemy 使用 数据表模型</description>
    </item>
    
    <item>
      <title>使用 Docker 构建和部署 FastAPI 程序</title>
      <link>https://piaohua.github.io/post/docker/20240817-fastapi-build/</link>
      <pubDate>Sat, 17 Aug 2024 17:01:16 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240817-fastapi-build/</guid>
      <description>使用 Docker 构建和部署 FastAPI 程序，可以保证环境一致性，也方便程序扩展和移植。同时也可以用到官方预制的Docker镜像。 创建FastAPI 应用 初始应用的</description>
    </item>
    
    <item>
      <title>[Python] itsdangerous 一个用于签名和序列化数据，确保数据安全传输不被篡改的库</title>
      <link>https://piaohua.github.io/post/python/20240813-itsdangerous/</link>
      <pubDate>Tue, 13 Aug 2024 21:46:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240813-itsdangerous/</guid>
      <description>itsdangerous 可以对数据进行加密签名，并将其交给其他不受信任的环境。当拿回数据时，可以确保没有人篡改它。 在URL中签署用户ID，并通过电子邮件发送给他们</description>
    </item>
    
    <item>
      <title>fastapi 发送 html 模板邮件</title>
      <link>https://piaohua.github.io/post/python/20240802-fastapi-html-email-template/</link>
      <pubDate>Fri, 02 Aug 2024 20:56:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240802-fastapi-html-email-template/</guid>
      <description>使用Fastapi-mail发送html模板邮件 安装 1 2 3 4 5 python3 -m venv .venv source .venv/bin/activate pip install fastapi-mail 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description>
    </item>
    
    <item>
      <title>开源手绘风格绘图工具Excalidraw</title>
      <link>https://piaohua.github.io/post/tool/20240801-excalidraw/</link>
      <pubDate>Thu, 01 Aug 2024 23:27:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240801-excalidraw/</guid>
      <description>Excalidraw 是一个开源的在线绘图工具，专为手绘风格的图形设计，且支持中文。 直接浏览器打开Excalidraw即可在线使用，在线可以使用丰富的素材库，可</description>
    </item>
    
    <item>
      <title>git stash 命令将未完成工作保存到栈，方便从当前工作切换出来</title>
      <link>https://piaohua.github.io/post/git/20240801-stash/</link>
      <pubDate>Thu, 01 Aug 2024 23:02:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20240801-stash/</guid>
      <description>在 Git 的栈中保存当前修改或删除的工作进度，当你在一个分支里做某项功能开发时，接到通知把昨天已经测试完没问题的代码发布到线上，但这时你已经在这个</description>
    </item>
    
    <item>
      <title>markdown 语法学习</title>
      <link>https://piaohua.github.io/post/tool/20240731-markdown-it-demo/</link>
      <pubDate>Wed, 31 Jul 2024 22:47:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240731-markdown-it-demo/</guid>
      <description>markdown-it demo 和even-preview对比，可以看出even-preview语法支持的不够全。 Advertisement :) pica - high quality and fast image resize in browser. babelfish - developer friendly i18n with plurals support and easy syntax. You will like those</description>
    </item>
    
    <item>
      <title>Redis-stack helm chart</title>
      <link>https://piaohua.github.io/post/docker/20240730-redis-stack-helm-chart/</link>
      <pubDate>Tue, 30 Jul 2024 22:42:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240730-redis-stack-helm-chart/</guid>
      <description>Redis-stack helm chart
 Run Redis Stack on Docker Docker Pull Command
1  docker pull redis/redis-stack:7.4.0-v0   Getting started with Docker In the default configuration, Redis does not require a password to authenticate clients. To provide basic security for your Redis Stack server, it is recommended to set a password using the requirepass directive. Configure this using an environment variable when starting the container:
To start Redis Stack server using the redis-stack image, run the following command in your terminal:</description>
    </item>
    
    <item>
      <title>[Linux] flock 文件锁防止重复执行</title>
      <link>https://piaohua.github.io/post/linux/20240729-flock/</link>
      <pubDate>Mon, 29 Jul 2024 22:49:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20240729-flock/</guid>
      <description>可以通过 flock 文件锁，保护相同数据同时被多个进程操作；也可以同时运行多个相同进程。 flock 参数 -s,&amp;ndash;shared：获取一个共享锁，在定向</description>
    </item>
    
    <item>
      <title>leveldb 安装及使用</title>
      <link>https://piaohua.github.io/post/learn/20240716-leveldb-install/</link>
      <pubDate>Tue, 16 Jul 2024 23:02:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240716-leveldb-install/</guid>
      <description>leveldb 安装及使用 leveldb 简介 leveldb 是 Google 用 C++ 开发的一个快速的键值对存储数据库，提供从字符串键到字符串值的有序映射。 leveldb 安装 下载 leveldb 1 git clone https://github.com/google/leveldb.git 编译 leveldb 1 2 cd leveldb/ make 编译的</description>
    </item>
    
    <item>
      <title>云原生API网关 Higress 使用</title>
      <link>https://piaohua.github.io/post/docker/20240716-higress/</link>
      <pubDate>Tue, 16 Jul 2024 22:18:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240716-higress/</guid>
      <description>Higress 一个遵循开源Ingress/Gateway API标准，提供流量调度、服务治理、安全防护三合一的高集成、易使用、易扩展、热更新的云原生API</description>
    </item>
    
    <item>
      <title>[转载] The Log: What Every Software Engineer Should Know About Real Time Datas Unifying</title>
      <link>https://piaohua.github.io/post/learn/20240716-log-what-every-software-engineer-should-know-about-real-time-datas-unifying/</link>
      <pubDate>Tue, 16 Jul 2024 22:12:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240716-log-what-every-software-engineer-should-know-about-real-time-datas-unifying/</guid>
      <description>The Log: What every software engineer should know about real-time data&amp;rsquo;s unifying abstraction 日志：每个软件工程师都应该知道关于实时数据的统一抽象的内容</description>
    </item>
    
    <item>
      <title>正则表达式 - 字符匹配不以某字段开头或者结尾</title>
      <link>https://piaohua.github.io/post/python/20240707-prefix-suffix-re/</link>
      <pubDate>Sun, 07 Jul 2024 11:56:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240707-prefix-suffix-re/</guid>
      <description>正则表达式 - 字符匹配不以某字段开头或者结尾 在文件搜索或数据库查询中，经常会遇到一种场景，需要过滤以某段字符开头或结尾，或者不以某段字符开头或</description>
    </item>
    
    <item>
      <title>Docker Slim(toolkit): 一个优化容器体验，自动分析、缩小容器镜像的工具</title>
      <link>https://piaohua.github.io/post/docker/20240630-docker-slim/</link>
      <pubDate>Sun, 30 Jun 2024 17:07:56 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240630-docker-slim/</guid>
      <description>docker-slim 一个不需要更改容器镜像中的任何内容，而能将其缩小多达 30 倍的命令工具（对于编译语言，缩小幅度甚至更大）。可以优化容器使用体验，让容器更好、更</description>
    </item>
    
    <item>
      <title>FastAPI Middleware</title>
      <link>https://piaohua.github.io/post/python/20240626-fastapi-middleware/</link>
      <pubDate>Wed, 26 Jun 2024 21:25:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240626-fastapi-middleware/</guid>
      <description>&amp;ldquo;中间件&amp;quot;是一个函数,它在每个请求被特定的路径操作处理之前,以及在每个响应返回之前工作. 它接收你的应用程序的每一个请求</description>
    </item>
    
    <item>
      <title>在 Mac 上将iPhone上的照片备份到外接(移动硬盘)存储设备</title>
      <link>https://piaohua.github.io/post/tool/20240616-mac-copy-photos/</link>
      <pubDate>Sun, 16 Jun 2024 17:13:07 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240616-mac-copy-photos/</guid>
      <description>将iPhone和Mac上的“照片”备份到第三方（移动硬盘）存储，达到释放存储空间目的。 在购移动存储设备时，大多都支持连接多种设备，如iPho</description>
    </item>
    
    <item>
      <title>[Mac] 在 Mac 上格式化新买的 ssd 固态硬盘</title>
      <link>https://piaohua.github.io/post/tool/20240614-mac-ssd-disk-utility/</link>
      <pubDate>Fri, 14 Jun 2024 20:36:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240614-mac-ssd-disk-utility/</guid>
      <description>新买的 ssd 固态硬盘，在使用前需要进行格式化处理 第一步：ssd 硬盘连接上Mac系统 第二步: 打开 磁盘工具 ,选择外置磁盘空间 第三步：点按“抹掉”按钮</description>
    </item>
    
    <item>
      <title>Mac pytest install error: externally-managed-environment</title>
      <link>https://piaohua.github.io/post/python/20240609-pytest-install/</link>
      <pubDate>Sun, 09 Jun 2024 15:43:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240609-pytest-install/</guid>
      <description>macox安装pytest报错解决方案 错误提示信息如下: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 pip3 install pytest error: externally-managed-environment × This</description>
    </item>
    
    <item>
      <title>kubernetes 基础组件及作用</title>
      <link>https://piaohua.github.io/post/docker/20240608-k8s-base/</link>
      <pubDate>Sat, 08 Jun 2024 16:23:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240608-k8s-base/</guid>
      <description>Kubernetes documentation 什么是 Kubernetes？ Kubernetes 是一个开源容器管理工具，负责容器部署，容器扩缩容以及负载平衡。它提供了出色的社区，并与所有云提供商合作。因</description>
    </item>
    
    <item>
      <title>Python Fastapi 实现获取 Snowflake ID 接口</title>
      <link>https://piaohua.github.io/post/python/20240608-snowflake-fastapi/</link>
      <pubDate>Sat, 08 Jun 2024 00:06:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240608-snowflake-fastapi/</guid>
      <description>Python Fastapi 实现获取 Snowflake ID 接口，并用helm部署。 snowflake python 实现如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44</description>
    </item>
    
    <item>
      <title>MySQL 数据同步工具 dtle (Data-Transformation-le) 使用</title>
      <link>https://piaohua.github.io/post/mysql/20240602-data-transformation-le/</link>
      <pubDate>Sun, 02 Jun 2024 18:15:14 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240602-data-transformation-le/</guid>
      <description>dtle (Data-Transformation-le) 是上海爱可生信息技术股份有限公司 开发并开源的 CDC 工具. 特点 多种数据传输模式 支持链路压缩 支持同构传输和异构传输 支持跨网络边际的传输 多种数据处</description>
    </item>
    
    <item>
      <title>MySQL Binlog Event</title>
      <link>https://piaohua.github.io/post/mysql/20240602-binlog-event/</link>
      <pubDate>Sun, 02 Jun 2024 17:38:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240602-binlog-event/</guid>
      <description>常见binlog event解析 mysql binlog event 定义如下： https://github.com/go-mysql-org/go-mysql/blob/master/replication/const.go#L51 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46</description>
    </item>
    
    <item>
      <title>MySQL备份工具 percona/xtrabackup 原理及使用</title>
      <link>https://piaohua.github.io/post/mysql/20240602-xtrabackup/</link>
      <pubDate>Sun, 02 Jun 2024 17:20:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240602-xtrabackup/</guid>
      <description>MariaDB/MySQL备份和恢复(三)：xtrabackup用法和原理详述 Percona-xtrabackup是 Percona公司开发的</description>
    </item>
    
    <item>
      <title>Protocol Buffers &#43; Docker</title>
      <link>https://piaohua.github.io/post/docker/20240601-protobuf/</link>
      <pubDate>Sat, 01 Jun 2024 15:02:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240601-protobuf/</guid>
      <description>An all-inclusive protoc Docker image docker-protobuf 使用protoc docker镜像编译proto文件，生成指定的语言文件。 Usage 使用命令格式 1 $ docker run --rm -v&amp;lt;some-path&amp;gt;:&amp;lt;some-path&amp;gt; -w&amp;lt;some-path&amp;gt; rvolosatovs/protoc [OPTION] PROTO_FILES 使用帮助查看 1 $ docker run --rm</description>
    </item>
    
    <item>
      <title>helm 安装 bitnami/nginx-ingress-controller</title>
      <link>https://piaohua.github.io/post/docker/20240529-bitnami-nginx-ingress-controller/</link>
      <pubDate>Wed, 29 May 2024 22:18:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240529-bitnami-nginx-ingress-controller/</guid>
      <description>helm 安装 bitnami/nginx-ingress-controller 镜像源环境 1 2 3 4 5 6 7 8 9 10 11 12 # 镜像源 helm repo list NAME URL bitnami https://charts.bitnami.com/bitnami # 搜索 nginx-ingress helm search repo nginx NAME CHART VERSION APP VERSION DESCRIPTION bitnami/nginx 16.0.6 1.25.5 NGINX Open Source is a web server that can be a... bitnami/nginx-ingress-controller 11.1.1 1.10.1 NGINX Ingress Controller is an Ingress controll...</description>
    </item>
    
    <item>
      <title>使用 Kind 运行本地Kubernetes集群</title>
      <link>https://piaohua.github.io/post/docker/20240529-kind/</link>
      <pubDate>Wed, 29 May 2024 21:28:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240529-kind/</guid>
      <description>使用 Kind 运行本地Kubernetes集群 Kind 是 Kubernetes In Docker 的缩写，顾名思义，就是把 Kubernetes 运行在 Docker容器里面。 特点 创建、启动k8s集群非常快速，资源</description>
    </item>
    
    <item>
      <title>Helm repo 配置</title>
      <link>https://piaohua.github.io/post/docker/20240529-helm-repo/</link>
      <pubDate>Wed, 29 May 2024 20:48:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240529-helm-repo/</guid>
      <description>helm 国内镜像源配置 Repository（仓库） 是用来存放和共享 charts 的地方, 供 Kubernetes 包使用。 Helm Search Helm 自带一个强大的搜索命令，可以用来从两种来源中进行搜索</description>
    </item>
    
    <item>
      <title>Helm 部署 nginx 和 fastapi 本地镜像服务</title>
      <link>https://piaohua.github.io/post/docker/20240525-helm-nginx-fastapi-short-code/</link>
      <pubDate>Sat, 25 May 2024 18:10:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240525-helm-nginx-fastapi-short-code/</guid>
      <description>Helm 部署 nginx 和 fastapi 本地镜像服务 FastAPI web服务 目录结构： 1 2 3 4 5 6 . ├── app │ ├── __init__.py │ └── main.py ├── app.Dockerfile └── requirements.txt app服务 创建一个fastapi服务</description>
    </item>
    
    <item>
      <title>9个导致 CPU 100% 的原因</title>
      <link>https://piaohua.github.io/post/linux/20240524-top9-cases-behind-100-cpu-usage/</link>
      <pubDate>Fri, 24 May 2024 22:18:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20240524-top9-cases-behind-100-cpu-usage/</guid>
      <description>原文：https://url.hi-linux.com/hgTAk 1. 无限循环 导致 CPU 占用率高的最简单但最具破坏性的编程错误之一就是无限循环。 当</description>
    </item>
    
    <item>
      <title>Redis 布隆过滤器(Bloom Filter)</title>
      <link>https://piaohua.github.io/post/redis/20240519-bloom-filter/</link>
      <pubDate>Sun, 19 May 2024 11:33:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240519-bloom-filter/</guid>
      <description>Bloom Filter 是一个二进制bit数组，初始为 0 用于快速查找一个集合中是否存在某个元素。尤其是大数据量中快速查找判断是否存在的问题。 布隆过滤器能记录一个</description>
    </item>
    
    <item>
      <title>Redis内存淘汰策略</title>
      <link>https://piaohua.github.io/post/redis/20240519-maxmemory-policy/</link>
      <pubDate>Sun, 19 May 2024 11:21:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240519-maxmemory-policy/</guid>
      <description>Redis内存淘汰策略 在 Redis 中 过期策略 和 内存淘汰策略 是两个完全不同的概念。Redis 过期策略指的是 Redis 使用那种策略，来删除已经过期的键值对；而内</description>
    </item>
    
    <item>
      <title>Python 装饰器</title>
      <link>https://piaohua.github.io/post/python/20240518-decorator/</link>
      <pubDate>Sat, 18 May 2024 16:59:25 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240518-decorator/</guid>
      <description>装饰器是语法糖： 在代码中利用更简洁流畅的语法实现更为复杂的功能。 装饰器允许包装另一个函数，以扩展包装函数的行为，而无需修改基础函数定义。 经常</description>
    </item>
    
    <item>
      <title>Python定时任务</title>
      <link>https://piaohua.github.io/post/python/20240518-cron-task/</link>
      <pubDate>Sat, 18 May 2024 15:49:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240518-cron-task/</guid>
      <description>原文： Python定时任务8种实现方式 使用 threading.Timer 实现 threading.Timer类允许你安排一个函数在指定时间后执行。 它通过创建一个新的线程来</description>
    </item>
    
    <item>
      <title>Python中合并两个字典</title>
      <link>https://piaohua.github.io/post/python/20240518-merge-dict/</link>
      <pubDate>Sat, 18 May 2024 14:06:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240518-merge-dict/</guid>
      <description>如何在Python中优雅地合并两个字典 使用Update函数 1 2 3 4 5 &amp;gt;&amp;gt;&amp;gt; d1 = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2} &amp;gt;&amp;gt;&amp;gt; d2 = {&amp;#39;c&amp;#39;: 3, &amp;#39;b&amp;#39;: 4} &amp;gt;&amp;gt;&amp;gt; d1.update(d2) &amp;gt;&amp;gt;&amp;gt; d1 {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 4, &amp;#39;c&amp;#39;: 3} 用字典d2更新字典d1,</description>
    </item>
    
    <item>
      <title>Sqids: 简短唯一ID生成器</title>
      <link>https://piaohua.github.io/post/golang/20240518-sqids/</link>
      <pubDate>Sat, 18 May 2024 13:24:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240518-sqids/</guid>
      <description>Sqids: 简短唯一ID生成器 Sqids 是Short Quick Unique Identifiers的缩写。 允许从数字中生成简短的唯一且看起来随机的标识符, 而且这些 ID 是 URL 安全的，可</description>
    </item>
    
    <item>
      <title>文件传输防篡改 （Chcecksum &amp; GPG）</title>
      <link>https://piaohua.github.io/post/tool/20240517-file-checksum/</link>
      <pubDate>Fri, 17 May 2024 21:49:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240517-file-checksum/</guid>
      <description>Checksum 是验证文件在网络传输过程中，有没有损坏或篡改的常用方法。 比如在golang安装包下载页面中，可以看到下载包对应的SHA256 Checksu</description>
    </item>
    
    <item>
      <title>Python 打包工具 Nuitka</title>
      <link>https://piaohua.github.io/post/python/20240516-nuitka/</link>
      <pubDate>Thu, 16 May 2024 22:03:25 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240516-nuitka/</guid>
      <description>Nuitka Nuitka is a Python compiler written in Python. Install Nuitka python -m pip install nuitka Verify using command python -m nuitka --version Write some code and test Create a folder for the Python code mkdir HelloWorld make a python file named hello.py 1 2 3 4 5 6 7 8 9 10 def talk(message): return &amp;#34;Talk &amp;#34; + message def main(): print(talk(&amp;#34;Hello World&amp;#34;)) if __name__ == &amp;#34;__main__&amp;#34;: main() Test</description>
    </item>
    
    <item>
      <title>python 任意数量的实参(*args)和关键参数(**args)</title>
      <link>https://piaohua.github.io/post/python/20240516-keyword-arguments/</link>
      <pubDate>Thu, 16 May 2024 21:41:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240516-keyword-arguments/</guid>
      <description>*args 形参接收一个 元组, 形参为 **args 形式时，接收一个字典, *args 必须在 **args 前面 *（星号）用于解包序列或可迭代对象，将其元素分配给函数的参数或在列表、元组等</description>
    </item>
    
    <item>
      <title>MySQL 表分区和事件调度器</title>
      <link>https://piaohua.github.io/post/mysql/20240515-partition/</link>
      <pubDate>Wed, 15 May 2024 22:42:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240515-partition/</guid>
      <description>MySQL 表分区 MySQL表分区是将一个大表分割成若干个小表的技术。这样做可以提高查询和维护的效率，并且还可以改善数据的管理方式。 注意：如果分区字段</description>
    </item>
    
    <item>
      <title>Dataclasses 数据类</title>
      <link>https://piaohua.github.io/post/python/20240515-dataclasses/</link>
      <pubDate>Wed, 15 May 2024 21:33:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240515-dataclasses/</guid>
      <description>Dataclasses 数据类 @dataclasses.dataclass() 是Python 3.7及更高版本中引入的一个装饰器，用于简化数据封装类（即主要用于存储数据的类）的编写。 这个装饰器可以自动为类生成一</description>
    </item>
    
    <item>
      <title>Python 函数注解</title>
      <link>https://piaohua.github.io/post/python/20240513-function-annotations/</link>
      <pubDate>Mon, 13 May 2024 22:10:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240513-function-annotations/</guid>
      <description>函数注解 是可选的用户自定义函数类型的元数据完整信息 标注 以字典的形式存放在函数的 annotations 属性中而对函数的其他部分没有影响。 形参标注的定义方式是在形参</description>
    </item>
    
    <item>
      <title>python 内置数据类型</title>
      <link>https://piaohua.github.io/post/python/20240512-native-datatypes/</link>
      <pubDate>Sun, 12 May 2024 12:42:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240512-native-datatypes/</guid>
      <description>内置数据类型 在 Python 中， 每个值都有一种数据类型，但您并不需要声明变量的数据类型。 Python 根据每个变量的初始赋值情况分析其类型，并在内部对其进行跟踪。 Python</description>
    </item>
    
    <item>
      <title>unittest 单元测试框架</title>
      <link>https://piaohua.github.io/post/python/20240511-unittest/</link>
      <pubDate>Sat, 11 May 2024 23:09:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240511-unittest/</guid>
      <description>unittest 单元测试框架是受到 JUnit 的启发，与其他语言中的主流单元测试框架有着相似的风格。其支持测试自动化，配置共享和关机代码测试。支持将测试样例聚合到测</description>
    </item>
    
    <item>
      <title>[Helm] Kubernetes 包管理器</title>
      <link>https://piaohua.github.io/post/tool/20240505-helm/</link>
      <pubDate>Sun, 05 May 2024 00:19:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240505-helm/</guid>
      <description>Helm 是查找、分享和使用软件构建 Kubernetes 的最优方式。 Helm 帮助管理 Kubernetes 应用—— Helm Chart，即使是最复杂的 Kubernetes 应用程序，都可以帮助定义，安装和升级。 概念 chart 创建</description>
    </item>
    
    <item>
      <title>Pulsar Docker中启动和golang使用示例</title>
      <link>https://piaohua.github.io/post/tool/20240504-pulsar-start/</link>
      <pubDate>Sat, 04 May 2024 14:11:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240504-pulsar-start/</guid>
      <description>在Docker中启动用于学习 在Docker中启动 以独立模式standalone启动 Pulsar 1 2 3 4 5 6 7 docker run -it \ -p 6650:6650 \ -p 8080:8080 \ --mount source=pulsardata,target=/pulsar/data \ --mount source=pulsarconf,target=/pulsar/conf \ apachepulsar/pulsar:3.2.2 \ bin/pulsar standalone 启</description>
    </item>
    
    <item>
      <title>[Go] redis 限速器</title>
      <link>https://piaohua.github.io/post/redis/20240501-rate/</link>
      <pubDate>Wed, 01 May 2024 17:45:36 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240501-rate/</guid>
      <description>go-redis/redis_rate 库实现了一个漏桶调度算法（又名通用信元速率算法）。 安装 1 go get github.com/go-redis/redis_rate/v10 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 rdb := redis.NewClient(&amp;amp;redis.Options{ Addr: &amp;#34;localhost:6379&amp;#34;, }) limiter := redis_rate.NewLimiter(rdb) res, err := limiter.Allow(ctx, &amp;#34;project:123&amp;#34;, redis_rate.PerSecond(10)) if err != nil { panic(err) } fmt.Println(&amp;#34;allowed&amp;#34;,</description>
    </item>
    
    <item>
      <title>[Go] 单元测试覆盖率</title>
      <link>https://piaohua.github.io/post/golang/20240501-test-cover/</link>
      <pubDate>Wed, 01 May 2024 15:13:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240501-test-cover/</guid>
      <description>测试覆盖率是代码质量的一个非常重要的衡量指标。 在 golang 中可以使用 go test 运行单元测试，并输出代码测试覆盖率报告。 进入项目目录，执行下面命令，输出当前</description>
    </item>
    
    <item>
      <title>在macOS上启动MySQL</title>
      <link>https://piaohua.github.io/post/mysql/20240427-start-mysql-on-mac/</link>
      <pubDate>Sat, 27 Apr 2024 23:06:02 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240427-start-mysql-on-mac/</guid>
      <description>在macOS上启动MySQL 在macOS上启动MySQL服务，可以使用内置的mysql.server脚本，该脚本通常位于 /usr/local/mysql/support-files 目录下。 如果是通过</description>
    </item>
    
    <item>
      <title>[Go] examples for the mongo-go-driver mock</title>
      <link>https://piaohua.github.io/post/golang/20240424-mongo-go-driver-mock/</link>
      <pubDate>Wed, 24 Apr 2024 23:34:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240424-mongo-go-driver-mock/</guid>
      <description>examples for the mongo-go-driver mock 在使用 mongo-go-driver 时，需要对mongo数据库操作模拟单元测试用例， 使用 testify 或 genmock 中的 mock 都需要实现mock接口。 而 mongo-go-driver 官方有一个 mtest 包，提供更好的实现</description>
    </item>
    
    <item>
      <title>[Go] 在go中使用redis分布式锁</title>
      <link>https://piaohua.github.io/post/golang/20240424-redislock/</link>
      <pubDate>Wed, 24 Apr 2024 22:56:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240424-redislock/</guid>
      <description>Simplified distributed locking implementation using Redis GoDoc 分布式锁使用示例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54</description>
    </item>
    
    <item>
      <title>[Git] git push 使用</title>
      <link>https://piaohua.github.io/post/git/20240424-push/</link>
      <pubDate>Wed, 24 Apr 2024 22:46:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20240424-push/</guid>
      <description>git push 命令用于从将本地的分支版本上传到远程并合并。 命令格式如下： git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;</description>
    </item>
    
    <item>
      <title>MongoDB索引使用</title>
      <link>https://piaohua.github.io/post/tool/20240424-mongodb-index/</link>
      <pubDate>Wed, 24 Apr 2024 22:02:14 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240424-mongodb-index/</guid>
      <description>MongoDB索引使用 分类 MongoDB 中的索引与其他数据库系统中的索引类似。 MongoDB 在集合级别定义索引，并支持 MongoDB 集合中文档的任何字段或子字段的索引。 常见的有</description>
    </item>
    
    <item>
      <title>了解 MongoDB 看这一篇就够了【华为云技术分享】</title>
      <link>https://piaohua.github.io/post/tool/20240424-mongodb/</link>
      <pubDate>Wed, 24 Apr 2024 21:27:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240424-mongodb/</guid>
      <description>原文地址：https://blog.csdn.net/devcloud/article/details/102629922 遵循 CC 4.0 BY-SA 版权协议</description>
    </item>
    
    <item>
      <title>Apache Pulsar 基本概念学习</title>
      <link>https://piaohua.github.io/post/tool/20240417-pulsar/</link>
      <pubDate>Wed, 17 Apr 2024 22:02:29 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240417-pulsar/</guid>
      <description>Apache Pulsar 是灵活的发布-订阅消息系统（Flexible Pub/Sub messaging），采用计算与存储分离的架构。雅虎在 2013 年开始开发 Pulsar ，于 2016 年首次开源，目前</description>
    </item>
    
    <item>
      <title>[Go] go list 命令</title>
      <link>https://piaohua.github.io/post/golang/20240417-go-list/</link>
      <pubDate>Wed, 17 Apr 2024 21:20:03 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240417-go-list/</guid>
      <description>go list命令的作用是列出指定的代码包的信息。 查看帮助文档 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &amp;gt; go help list usage: go list [-f format] [-json] [-m] [list flags] [build flags] [packages] List lists the named packages,</description>
    </item>
    
    <item>
      <title>MongoDB 存储引擎</title>
      <link>https://piaohua.github.io/post/tool/20240417-mongodb-engine/</link>
      <pubDate>Wed, 17 Apr 2024 21:19:35 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240417-mongodb-engine/</guid>
      <description>20240417 Mongodb Engine MongoDB支持多种存储引擎，最常用的是WiredTiger存储引擎和MMAPv1存储引擎。 WiredTiger存储引擎（3.2开始</description>
    </item>
    
    <item>
      <title>实时系统监控工具mpstat</title>
      <link>https://piaohua.github.io/post/tool/20240416-mpstat/</link>
      <pubDate>Tue, 16 Apr 2024 23:12:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240416-mpstat/</guid>
      <description>mpstat mpstat是Multiprocessor Statistics的缩写，是实时系统监控工具。其报告与CPU的一些统计信息，这些信息存放在/p</description>
    </item>
    
    <item>
      <title>[清] 《苔》</title>
      <link>https://piaohua.github.io/post/chinese/20240415-poetry-tai/</link>
      <pubDate>Mon, 15 Apr 2024 22:58:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20240415-poetry-tai/</guid>
      <description>《苔》清·袁枚 白日不到处，青春恰自来。 苔花如米小，也学牡丹开。</description>
    </item>
    
    <item>
      <title>[Go] 数组与切片</title>
      <link>https://piaohua.github.io/post/golang/20240331-array-slice/</link>
      <pubDate>Sun, 31 Mar 2024 20:20:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240331-array-slice/</guid>
      <description>原文：Go语言进阶：数组与切片 Array （数组） 数组 Array 是一片连续的内存区域，存储相同类型的元素，元素的个数固定。在Go语言中，数组Array不能进行</description>
    </item>
    
    <item>
      <title>[Go] 深入理解深拷贝与浅拷贝</title>
      <link>https://piaohua.github.io/post/golang/20240331-copy/</link>
      <pubDate>Sun, 31 Mar 2024 20:00:06 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240331-copy/</guid>
      <description>原文：Go语言进阶：深入理解深拷贝与浅拷贝 深拷贝和浅拷贝是编程中处理对象或数据结构复制时的两种主要策略。 深拷贝和浅拷贝的定义 浅拷贝 浅拷贝，是</description>
    </item>
    
    <item>
      <title>[Go] 互斥锁实现原理</title>
      <link>https://piaohua.github.io/post/golang/20240330-lock/</link>
      <pubDate>Sat, 30 Mar 2024 16:11:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240330-lock/</guid>
      <description>互斥锁（Mutex）是一种关键的并发控制机制，用于保护共享资源免受多个Goroutine的并发访问。 互斥锁(sync.Mutex)的基本操作</description>
    </item>
    
    <item>
      <title>Redis 持久化机制</title>
      <link>https://piaohua.github.io/post/redis/20240328-persistence/</link>
      <pubDate>Thu, 28 Mar 2024 00:24:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240328-persistence/</guid>
      <description>Redis 的持久化机制有两种，第一种是快照，第二种是 AOF 日志。快照是一次全量备份，AOF 日志是连续的增量备份。快照是内存数据的二进制序列化形式，在存储</description>
    </item>
    
    <item>
      <title>redis的底层数据结构</title>
      <link>https://piaohua.github.io/post/redis/20240327-type-struct/</link>
      <pubDate>Wed, 27 Mar 2024 23:02:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240327-type-struct/</guid>
      <description>redis有String、List、Hash、Set、Sorted Set这五大基本数据类型，不同的数据类型适用不同的场景。 redis数据类型</description>
    </item>
    
    <item>
      <title>Redis 和 HashMap 的区别</title>
      <link>https://piaohua.github.io/post/redis/20240327-hashmap/</link>
      <pubDate>Wed, 27 Mar 2024 17:19:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240327-hashmap/</guid>
      <description>Redis 和 HashMap 的区别 Redis 是 Remote Dictionary Service 三个单词中加粗字母的组合，是一种基于键值对（key-value）的 NoSQL 数据库。 但比一般的键值对，比如 HashMap 强大的多，Redi</description>
    </item>
    
    <item>
      <title>Redis 事务</title>
      <link>https://piaohua.github.io/post/redis/20240327-transaction/</link>
      <pubDate>Wed, 27 Mar 2024 17:10:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240327-transaction/</guid>
      <description>原文：Redis 事务 Redis 支持简单的事务，可以将多个命令打包，然后一次性的，按照顺序执行。 主要通过 multi、exec、discard、watc</description>
    </item>
    
    <item>
      <title>Redis热key和大key</title>
      <link>https://piaohua.github.io/post/redis/20240327-bigkey-hotkey/</link>
      <pubDate>Wed, 27 Mar 2024 17:04:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240327-bigkey-hotkey/</guid>
      <description>Redis热key和大key 所谓的热 key，就是指在很短时间内被频繁访问的键。 比如，热门新闻或热门商品，这类 key 通常会有大流量的访问，对存储这</description>
    </item>
    
    <item>
      <title>进程线程、死锁、进程间通信</title>
      <link>https://piaohua.github.io/post/linux/20240327-process-thread/</link>
      <pubDate>Wed, 27 Mar 2024 16:37:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20240327-process-thread/</guid>
      <description>原文：进程线程、死锁、进程间通信 说一下你对进程和线程的理解，它们地址空间有什么区别？ **本质区别：**进程是操作系统资源分配的基本单位，而线</description>
    </item>
    
    <item>
      <title>Python基础知识点及使用</title>
      <link>https://piaohua.github.io/post/python/20240325-basic/</link>
      <pubDate>Mon, 25 Mar 2024 17:41:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240325-basic/</guid>
      <description>Python是一种解释的、高级的、通用的编程语言。 原文： 总结了50道必备的Python面试题(附答案) Python代码是如何执行的？ 首先，解</description>
    </item>
    
    <item>
      <title>[Go] 防缓存击穿利器 singleflight</title>
      <link>https://piaohua.github.io/post/golang/20240324-singleflight/</link>
      <pubDate>Sun, 24 Mar 2024 18:02:35 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240324-singleflight/</guid>
      <description>Package singleflight provides a duplicate function call suppression mechanism. 原文： Go singleflight：防缓存击穿利器 Documentation 什么是缓存击穿 缓存击穿 是指在高并发的情况下，某个热点的 key 突然过期，导致大</description>
    </item>
    
    <item>
      <title>什么是缓存雪崩、缓存击穿、缓存穿透</title>
      <link>https://piaohua.github.io/post/learn/20240324-cache/</link>
      <pubDate>Sun, 24 Mar 2024 17:46:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240324-cache/</guid>
      <description>什么是缓存雪崩、缓存击穿、缓存穿透，各自有哪些解析方案？ Redis 缓存穿透、缓存击穿、缓存雪崩区别和解决方案 缓存穿透 缓存穿透说简单点就是大量请求的 key</description>
    </item>
    
    <item>
      <title>52条SQL语句性能优化策略</title>
      <link>https://piaohua.github.io/post/mysql/20240324-sql-optimize/</link>
      <pubDate>Sun, 24 Mar 2024 17:20:29 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240324-sql-optimize/</guid>
      <description>原文： 52条SQL语句性能优化策略 1、对查询进行优化，应尽量避免全表扫描，首先应考虑在 WHERE 及 ORDER BY 涉及的列上建立索引。 2、应尽量避免在 WHERE 子句中对</description>
    </item>
    
    <item>
      <title>MySQL优化步骤</title>
      <link>https://piaohua.github.io/post/mysql/20240324-optimize-steps/</link>
      <pubDate>Sun, 24 Mar 2024 16:31:07 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240324-optimize-steps/</guid>
      <description>数据库调优步骤详解 优化成本及效果如图： 当发现执行SQL时存在不规则延迟或卡顿的时候，就可以采用分析工具定位有问题的SQL，这三种分析工具可以</description>
    </item>
    
    <item>
      <title>MySQL锁机制</title>
      <link>https://piaohua.github.io/post/mysql/20240324-locking-strategy/</link>
      <pubDate>Sun, 24 Mar 2024 16:11:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240324-locking-strategy/</guid>
      <description>鹅厂T12详解MySQL加锁机制 锁机制 InnoDB使用不同的锁策略(Locking Strategy)以及MVCC机制来实现不同的隔离级别。 读</description>
    </item>
    
    <item>
      <title>web-check 一款网站检查工具</title>
      <link>https://piaohua.github.io/post/tool/20240324-web-check/</link>
      <pubDate>Sun, 24 Mar 2024 16:02:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240324-web-check/</guid>
      <description>All-in-one OSINT tool for analysing any website. web-check 是一款超强大的全功能网站检查工具，目的是帮助您轻松了解、优化和保护您的网站。 web-check 可以帮助你深入了解指定网站的内部工作原理。发现</description>
    </item>
    
    <item>
      <title>[Go] 数据校验工具Validator</title>
      <link>https://piaohua.github.io/post/golang/20240323-validator/</link>
      <pubDate>Sat, 23 Mar 2024 21:13:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240323-validator/</guid>
      <description>validator Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving Validator包是Golang中一个非常受欢迎的数据验证工具，它提供了丰富的验证规则和简单易用的API。</description>
    </item>
    
    <item>
      <title>Docker 部署 Jenkins 并实现项目的自动构建与部署</title>
      <link>https://piaohua.github.io/post/tool/20240323-jenkins/</link>
      <pubDate>Sat, 23 Mar 2024 20:58:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240323-jenkins/</guid>
      <description>原文： https://mp.weixin.qq.com/s/Tof1fDJkckIMTMZplSYizA Jenkins 是开源 CI&amp;amp;CD 软件的佼佼者，提供超过 1000 个插件，支持构建、部署和自动化，满足各种项目的需求。 部署 Jenkins 编写 docker-compose.yml</description>
    </item>
    
    <item>
      <title>MySQL高可用集群搭建 (主主&#43;keepalived)</title>
      <link>https://piaohua.github.io/post/mysql/20240323-master-master-keepalived/</link>
      <pubDate>Sat, 23 Mar 2024 20:32:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240323-master-master-keepalived/</guid>
      <description>MySQL高可用集群的搭建(主主+keepalived) 先做主从复制 修改主库和从库的参数文件(/etc/my.cnf) master1：192</description>
    </item>
    
    <item>
      <title>MySQL运维常备工具集、分库分表和高可用解决方案</title>
      <link>https://piaohua.github.io/post/mysql/20240323-tools/</link>
      <pubDate>Sat, 23 Mar 2024 18:18:45 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240323-tools/</guid>
      <description>MySQL 有很多周边工具，用这些工具提高日常维护管理 MySQL 的效率。 原文： https://mp.weixin.qq.com/s/6IvA-rKhFO4ikRg0Ks43LA Percona Toolkit 官方地址： https://docs.percona.com/percona-toolkit/ 常用的有这些： pt-query-digest，分析MySQL查</description>
    </item>
    
    <item>
      <title>HeidiSQL: 一个开源的数据库管理工具</title>
      <link>https://piaohua.github.io/post/mysql/20240323-heidisql/</link>
      <pubDate>Sat, 23 Mar 2024 17:37:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240323-heidisql/</guid>
      <description>HeidiSQL is free software, and has the aim to be easy to learn. &amp;ldquo;Heidi&amp;rdquo; lets you see and edit data and structures from computers running one of the database systems MariaDB, MySQL, Microsoft SQL, PostgreSQL and SQLite. Invented in 2002 by Ansgar, HeidiSQL belongs to the most popular tools for MariaDB and MySQL worldwide. Screenshot: Unicode1 International character support in editors, database tree, log panel &amp;hellip; Connecting to a server</description>
    </item>
    
    <item>
      <title>SQL中count(*)、count(字段)、count(distinct字段)的区别</title>
      <link>https://piaohua.github.io/post/mysql/20240317-diff-count/</link>
      <pubDate>Sun, 17 Mar 2024 18:36:03 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240317-diff-count/</guid>
      <description>SQL中count(*)、count(字段)、count(distinct字段)的区别 count() 是MySQL内置函数，用来统计字段中非NULL的数量</description>
    </item>
    
    <item>
      <title>SQL 语句中的执行顺序</title>
      <link>https://piaohua.github.io/post/mysql/20240317-sql-exec-order/</link>
      <pubDate>Sun, 17 Mar 2024 18:25:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240317-sql-exec-order/</guid>
      <description>原文 SQL 语句中的执行顺序是怎样的 SQL执行顺序： 先执行from,join来确定表之间的连接关系，得到初步的数据 where对数据进行普通的初步的</description>
    </item>
    
    <item>
      <title>Nginx配置SSL证书及跳转配置</title>
      <link>https://piaohua.github.io/post/tool/20240317-nginx-ssl/</link>
      <pubDate>Sun, 17 Mar 2024 18:02:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240317-nginx-ssl/</guid>
      <description>Nginx配置SSL证书及跳转配置 Nginx 配置 SSL 证书 SSL 证书是一种数字证书，它使用 Secure Socket Layer 协议在浏览器和 Web 服务器之间建立一条安全通道，从而实现： 1、数</description>
    </item>
    
    <item>
      <title>Nginx常见应用场景及配置</title>
      <link>https://piaohua.github.io/post/tool/20240317-nginx-scene/</link>
      <pubDate>Sun, 17 Mar 2024 17:47:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240317-nginx-scene/</guid>
      <description>Nginx常见应用场景及配置 Web服务器 HTTP: 1 2 3 4 5 6 7 8 server { listen 80; server_name _; location / { root /data/wwwroot; index index.html index.htm; } } HTTPS: 1 2 3 4 5 6 7 8 9 10 server { listen 443 ssl; server_name _; ssl_certificate /path/to/certificate.crt; ssl_certificate_key /path/to/private-key.key; location / {</description>
    </item>
    
    <item>
      <title>如何用 Nginx 解决前端跨域问题？</title>
      <link>https://piaohua.github.io/post/tool/20240317-nginx-cors/</link>
      <pubDate>Sun, 17 Mar 2024 17:34:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240317-nginx-cors/</guid>
      <description>使用 Nginx 转发请求。把跨域的接口写成调本域的接口，然后将这些接口转发到真正的请求地址。 原文: 别整复杂了！Nginx 可以轻松搞定跨域问题 跨域主要涉</description>
    </item>
    
    <item>
      <title>Nginx 常见功能介绍</title>
      <link>https://piaohua.github.io/post/tool/20240317-nginx/</link>
      <pubDate>Sun, 17 Mar 2024 17:10:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240317-nginx/</guid>
      <description>原文 40个 Nginx 常问面试题 Nginx 是一款轻量级的 Web 服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。 什么是 N</description>
    </item>
    
    <item>
      <title>SQL语句的执行流程</title>
      <link>https://piaohua.github.io/post/mysql/20240317-sql-exec/</link>
      <pubDate>Sun, 17 Mar 2024 15:52:56 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240317-sql-exec/</guid>
      <description>SQL语句的执行流程 一条查询SQL语句的执行流程： 客户端通过连接器连接MySQL服务。 连接成功后向SQL接口发送SQL语句请求。 SQL接口接</description>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://piaohua.github.io/post/learn/20240316-http/</link>
      <pubDate>Sat, 16 Mar 2024 23:42:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240316-http/</guid>
      <description>源文 HTTP协议 http协议是超文本传输协议。它是基于TCP协议的应用层传输协议，即客户端和服务端进行数据传输的一种规则。该协议本身HTTP</description>
    </item>
    
    <item>
      <title>TCP 与 UDP 的区别？</title>
      <link>https://piaohua.github.io/post/learn/20240316-tcp-udp/</link>
      <pubDate>Sat, 16 Mar 2024 22:49:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240316-tcp-udp/</guid>
      <description>TCP 与 UDP 的区别？ TCP 基于连接 UDP 无连接； 对系统资源的要求(TCP较多，UDP少)； TCP 流模式，UDP 数据报模式； TCP 保证数据正确性且保证数据顺序； UDP 可</description>
    </item>
    
    <item>
      <title>MySQL慢查询分析工具pt-query-digest</title>
      <link>https://piaohua.github.io/post/mysql/20240316-pt-query-digest/</link>
      <pubDate>Sat, 16 Mar 2024 17:28:31 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240316-pt-query-digest/</guid>
      <description>MySQL慢查询分析工具pt-query-digest pt-query-digest是用于分析mysql慢日志的工具，它可以分析binlog</description>
    </item>
    
    <item>
      <title>performance_schema 和 information_schema 的区别</title>
      <link>https://piaohua.github.io/post/mysql/20240316-performance-information/</link>
      <pubDate>Sat, 16 Mar 2024 16:25:56 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240316-performance-information/</guid>
      <description>performance_schema 和 information_schema 的区别 performance_schema performance_schema这个库提供的是MySQL数据库性能的一些指标，主要保存 MySQL 服务器运行过程中的一些状态信息， 算</description>
    </item>
    
    <item>
      <title>怎么判断主从延迟？</title>
      <link>https://piaohua.github.io/post/mysql/20240316-seconds-behind-master/</link>
      <pubDate>Sat, 16 Mar 2024 16:25:07 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240316-seconds-behind-master/</guid>
      <description>怎么判断主从延迟？ 第一种：Seconds_Behind_Master 一种常规的方法就是 show slave status 查看 Seconds_Behind_Master，</description>
    </item>
    
    <item>
      <title>一条 update 会经历哪些过程</title>
      <link>https://piaohua.github.io/post/mysql/20240316-update/</link>
      <pubDate>Sat, 16 Mar 2024 16:24:14 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240316-update/</guid>
      <description>一条 update 会经历哪些过程 首先是连上连接器，负责跟客户端建立连接、获取权限、维持和管理连接。 分析器会先做词法分析。需要确定SQL语句中的字符串分表</description>
    </item>
    
    <item>
      <title>Prometheus监控MySQL</title>
      <link>https://piaohua.github.io/post/mysql/20240315-prometheus/</link>
      <pubDate>Fri, 15 Mar 2024 17:11:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240315-prometheus/</guid>
      <description>Prometheus监控MySQL docker-compose配置 通过docker-compose.yaml文件配置启动MySQL和mysq</description>
    </item>
    
    <item>
      <title>阿里巴巴 MySQL binlog 增量订阅&amp;消费组件Canal介绍和使用指南</title>
      <link>https://piaohua.github.io/post/mysql/20240314-canal/</link>
      <pubDate>Thu, 14 Mar 2024 13:14:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240314-canal/</guid>
      <description>来源 Canal介绍和使用指南 Canal 是阿里开源的一款 MySQL 数据库增量日志解析工具，提供增量数据订阅和消费。使用Canal能够实现异步更新数据，配合MQ</description>
    </item>
    
    <item>
      <title>mysql读取已提交(RC)和可重复读(RR)级别下的共享锁和排他锁有什么区别吗？</title>
      <link>https://piaohua.github.io/post/mysql/20240314-diff-s-x-locks/</link>
      <pubDate>Thu, 14 Mar 2024 12:55:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240314-diff-s-x-locks/</guid>
      <description>mysql读取已提交和可重复读级别下的共享锁和排他锁有什么区别吗？ MySQL 的事务隔离级别对锁的行为有重要影响。在 READ COMMITTED 和 REPEATABLE READ 这两个隔离级别下，共享锁</description>
    </item>
    
    <item>
      <title>varchar(50)和varchar(500)有什么区别？</title>
      <link>https://piaohua.github.io/post/mysql/20240314-diff-varchar-size/</link>
      <pubDate>Thu, 14 Mar 2024 12:50:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240314-diff-varchar-size/</guid>
      <description>varchar(50)和varchar(500)有什么区别？占用字节空间一样的话，为什么不直接用varchar(500)呢？ varchar(50) 和 varchar(500) 之间的主要</description>
    </item>
    
    <item>
      <title>完全二叉树的复原</title>
      <link>https://piaohua.github.io/post/python/20240314-build-tree/</link>
      <pubDate>Thu, 14 Mar 2024 11:01:07 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240314-build-tree/</guid>
      <description>完全二叉树的复原 完全二叉树是一种特殊的二叉树，其中除了最后一层之外，其他层的节点都是满的，且最后一层的节点都集中在左侧。要复原一个完全二叉树</description>
    </item>
    
    <item>
      <title>删除链表倒数第n个元素</title>
      <link>https://piaohua.github.io/post/python/20240314-linked-list-delete-nth-from-end/</link>
      <pubDate>Thu, 14 Mar 2024 10:15:06 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240314-linked-list-delete-nth-from-end/</guid>
      <description>删除链表倒数第n个元素 要实现一个链表并删除链表的倒数第n个元素，首先需要定义链表的节点结构，然后实现链表的基本操作，包括插入元素和删除元素。</description>
    </item>
    
    <item>
      <title>如何找到慢 SQL？</title>
      <link>https://piaohua.github.io/post/mysql/20240312-slow-log/</link>
      <pubDate>Tue, 12 Mar 2024 23:23:07 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240312-slow-log/</guid>
      <description>如何找到慢 SQL？ MySQL 慢查询日志是用来记录 MySQL 在执行命令中，响应时间超过预设阈值的 SQL 语句。因此，通过分析慢查询日志我们就可以找出执行速度比较慢的</description>
    </item>
    
    <item>
      <title>云原生 API 网关 APISIX 介绍使用</title>
      <link>https://piaohua.github.io/post/tool/20240303-apisix/</link>
      <pubDate>Sun, 03 Mar 2024 15:19:03 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240303-apisix/</guid>
      <description>云原生 API 网关 APISIX 入门教程 Apache APISIX 是 Apache 软件基金会下的云原生 API 网关，它具有动态、实时、高性能等特点，提供了负载均衡、动态上游、灰度发布（金丝雀发布）、</description>
    </item>
    
    <item>
      <title>MySQL 性能优化：碎片整理</title>
      <link>https://piaohua.github.io/post/mysql/20240302-data-free/</link>
      <pubDate>Sat, 02 Mar 2024 16:00:33 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240302-data-free/</guid>
      <description>MySQL 性能优化：碎片整理 MySQL 碎片是什么 MySQL 碎片就是 MySQL 数据文件中一些不连续的空白空间，这些空间无法再被全部利用，久而久之越来多，越来越零碎，从而造成物</description>
    </item>
    
    <item>
      <title>MySQL索引下推知识</title>
      <link>https://piaohua.github.io/post/mysql/20240302-index-condition-pushdown/</link>
      <pubDate>Sat, 02 Mar 2024 15:43:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240302-index-condition-pushdown/</guid>
      <description>MySQL索引下推知识分享 什么是索引下推 索引下推 (Index Condition Pushdown，索引条件下推，简称 ICP)，是 MySQL5.6 版本的新特性，它可以在对联合索引遍历过</description>
    </item>
    
    <item>
      <title>MySQL Explain分析SQL执行计划</title>
      <link>https://piaohua.github.io/post/mysql/20240301-explain/</link>
      <pubDate>Fri, 01 Mar 2024 16:27:33 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240301-explain/</guid>
      <description>EXPLAIN生成的查询计划中显示优化器计划如何执行查询 MySQL的EXPALIN是优化查询语句必不可少的工具，用户通过它可以获得查询计划的</description>
    </item>
    
    <item>
      <title>MySQL 8.0 中的隐藏特性</title>
      <link>https://piaohua.github.io/post/mysql/20240222-invisible/</link>
      <pubDate>Thu, 22 Feb 2024 17:30:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240222-invisible/</guid>
      <description>MySQL 8.0 中的隐藏特性 隐藏有关的特性 隐藏列 生成的隐藏主键 隐藏索引 隐藏列 8.0.23 新增隐藏列特性。什么是隐藏列？它基本上是一个表的常规列，具有自己的名称和数</description>
    </item>
    
    <item>
      <title>MySQL的索引失效场景</title>
      <link>https://piaohua.github.io/post/mysql/20240221-mysql-index-invalidation/</link>
      <pubDate>Wed, 21 Feb 2024 17:56:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240221-mysql-index-invalidation/</guid>
      <description>[一张图搞懂MySQL的索引失效]((https://segmentfault.com/a/1190000021464570) 全值匹配（索引</description>
    </item>
    
    <item>
      <title>Redis GUI 管理工具 Redislnsight</title>
      <link>https://piaohua.github.io/post/redis/20240221-redislnsight/</link>
      <pubDate>Wed, 21 Feb 2024 16:10:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240221-redislnsight/</guid>
      <description>Redis 官方可视化工具 RedisInsight 是一个直观高效的 Redis GUI 管理工具，它可以对 Redis 的内存、连接数、命中率以及正常运行时间进行监控，并且可以在界面上使用 CLI 和连接的 Redis 进</description>
    </item>
    
    <item>
      <title>[Go] io.TeeReader()函数使用</title>
      <link>https://piaohua.github.io/post/golang/20240120-io-teereader/</link>
      <pubDate>Sat, 20 Jan 2024 12:36:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240120-io-teereader/</guid>
      <description>io.TeeReader() 函数用于同时读取输入流并将其复制到输出流中。 io.TeeReader() 函数的作用是将一个输入流 Reader 复制到一个输出流 Writer 中，并返回一个新的 Reader，该 Reader 可以同时读取</description>
    </item>
    
    <item>
      <title>进制转换及位运算</title>
      <link>https://piaohua.github.io/post/learn/20240120-math-base/</link>
      <pubDate>Sat, 20 Jan 2024 10:44:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240120-math-base/</guid>
      <description>在计算机中，除了二进制，比较常用的还有八进制和十六进制。 常用进制 二进制：只有0，1两个数，满2进1，以0b开头表示 八进制：0-7表示，满8进</description>
    </item>
    
    <item>
      <title>[Go] slog日志库使用</title>
      <link>https://piaohua.github.io/post/golang/20240120-slog/</link>
      <pubDate>Sat, 20 Jan 2024 00:04:29 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240120-slog/</guid>
      <description>Go slog 包：开启结构化日志的奇妙之旅 go 1.21.0 版本引入了一个新的包 log/slog，该包提供了结构化日志的功能。相比于普通的日志，结构化日志更受欢迎，</description>
    </item>
    
    <item>
      <title>使用 ulid-py 替换 uuid</title>
      <link>https://piaohua.github.io/post/python/20240119-ulid-py/</link>
      <pubDate>Fri, 19 Jan 2024 23:39:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240119-ulid-py/</guid>
      <description>使用 ulid-py 替换 uuid ULID特性 1 2 3 import ulid ulid.new() &amp;lt;ULID(&amp;#39;01BJQE4QTHMFP0S5J153XCFSP9&amp;#39;)&amp;gt; 与UUID的128位兼容性 每毫秒1.21e + 24个唯一ULID 按字典顺序(也就是字母顺序)排序！ 规范地</description>
    </item>
    
    <item>
      <title>[Go] CGO使用方法和示例</title>
      <link>https://piaohua.github.io/post/golang/20240119-cgo/</link>
      <pubDate>Fri, 19 Jan 2024 23:08:21 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240119-cgo/</guid>
      <description>Golang中的Cgo是Go语言提供的一种机制，用于在Go程序和C/C++程序之间进行互操作，为Go程序员提供了一个直接调用C库以及使用C语</description>
    </item>
    
    <item>
      <title>网络传输：大小端</title>
      <link>https://piaohua.github.io/post/learn/20240119-big-little-endian/</link>
      <pubDate>Fri, 19 Jan 2024 17:18:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240119-big-little-endian/</guid>
      <description>网络传输：大小端 什么是大端序(Big-Endian)和小端序(Little-Endian) Little-Endian 就是低位字节排放在内存的低地址端，高位字节排放在</description>
    </item>
    
    <item>
      <title>Minio on Docker Compose</title>
      <link>https://piaohua.github.io/post/tool/20240119-minio-on-docker-compose/</link>
      <pubDate>Fri, 19 Jan 2024 17:00:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240119-minio-on-docker-compose/</guid>
      <description>minio集群docker部署 MinIO 是在 GNU Affero 通用公共许可证 v3.0 下发布的高性能对象存储。它与 Amazon S3 云存储服务 API 兼容。使用 MinIO 为机器学习、分析和应用程序数</description>
    </item>
    
    <item>
      <title>MySQL-router MGR on Docker Compose</title>
      <link>https://piaohua.github.io/post/mysql/20240119-mysql-mgr-on-docker-compose/</link>
      <pubDate>Fri, 19 Jan 2024 16:44:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240119-mysql-mgr-on-docker-compose/</guid>
      <description>docker-compose之mysql-router(MGR单主模式) MGR介绍 MGR 即 MySQL Group Replication MGR 的特点 高一致性，基于原生复制及 paxos 协议的组复制技</description>
    </item>
    
    <item>
      <title>Nginx 生产环境下的安全配置</title>
      <link>https://piaohua.github.io/post/tool/20240118-nginx-safty-conf/</link>
      <pubDate>Thu, 18 Jan 2024 23:32:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240118-nginx-safty-conf/</guid>
      <description>Nginx 生产环境下的安全配置 典型配置示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # ma</description>
    </item>
    
    <item>
      <title>使用 Docker Compose 安装 nginx</title>
      <link>https://piaohua.github.io/post/docker/20240118-nginx-docker-compose/</link>
      <pubDate>Thu, 18 Jan 2024 23:14:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240118-nginx-docker-compose/</guid>
      <description>前后端都用得上的 Nginx 日常使用经验 docker-compose配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 version:&amp;#39;3.1&amp;#39;services:nginx:image:nginx:1.24.0container_name:nginx_1_24restart:alwaysenvironment:TZ :&amp;#39;Asia/Shanghai&amp;#39;ports:- &amp;#34;80:80&amp;#34;- &amp;#34;443:443&amp;#34;volumes:- ./config/nginx.conf:/etc/nginx/nginx.conf- ./config/conf.d:/etc/nginx/conf.d- ./html:/usr/share/nginx/html- ./logs:/var/log/nginx- ./ssl:/sslnetworks:- devopsnetworknetworks:devopsnetwork:external:true 创建相</description>
    </item>
    
    <item>
      <title>MySQL的容量统计和规划</title>
      <link>https://piaohua.github.io/post/mysql/20240118-mysql-size/</link>
      <pubDate>Thu, 18 Jan 2024 21:22:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240118-mysql-size/</guid>
      <description>MySQL的容量规划 MySQL容量规划 InnoDB的行和索引数据都保存在磁盘页中，页的默认大小为16KB。InnoDB表和索引由包含数据的叶</description>
    </item>
    
    <item>
      <title>MySQL 8.0 安装</title>
      <link>https://piaohua.github.io/post/mysql/20240118-mysql8-install/</link>
      <pubDate>Thu, 18 Jan 2024 21:02:24 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240118-mysql8-install/</guid>
      <description>MySQL 8.0 安装脚本 下载安装包 下载MySQL 8.0.25的安装包 1 wget https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.25-linux-glibc2.12-x86_64.tar.xz 解压这个xz文件 1 xz -d mysql-8.0.25-linux-glibc2.12-x86_64.tar.xz 配置文件 my.cnf 文件添加如下内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14</description>
    </item>
    
    <item>
      <title>将对象上传到aws s3存储桶方案</title>
      <link>https://piaohua.github.io/post/golang/20240117-aws-s3-uploading/</link>
      <pubDate>Wed, 17 Jan 2024 15:05:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240117-aws-s3-uploading/</guid>
      <description>将对象上传到aws s3存储桶方案 aws s3提供多种文件上传方式： 业务服务器中转，即业务客户端上传对象到业务服务器，业务服务器接收并上传到s3。 这</description>
    </item>
    
    <item>
      <title>Nginx反向代理之路径替换</title>
      <link>https://piaohua.github.io/post/tool/20240114-nginx-reverse-proxy/</link>
      <pubDate>Sun, 14 Jan 2024 17:13:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240114-nginx-reverse-proxy/</guid>
      <description>原文：Nginx反向代理之路径替换 在使用nginx进行反向代理时，有时需要使用别名，或者说需要进行路径的替换。 代理静态资源 nginx默认是通</description>
    </item>
    
    <item>
      <title>Go 加密解密算法</title>
      <link>https://piaohua.github.io/post/golang/20240114-crypto/</link>
      <pubDate>Sun, 14 Jan 2024 16:45:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240114-crypto/</guid>
      <description>Go 加密解密算法总结 加密解密在实际开发中应用比较广泛，常用加解密分为：“对称式”、“非对称式”和”数字签名“。 对称式：对称加密(也叫私钥加密)</description>
    </item>
    
    <item>
      <title>Go 1.16新特性-embed包及其使用</title>
      <link>https://piaohua.github.io/post/golang/20240114-embed/</link>
      <pubDate>Sun, 14 Jan 2024 16:04:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240114-embed/</guid>
      <description>Go 1.16新特性-embed包及其使用 embed是什么 embed是在Go 1.16中新加包。它通过//go:embed指令，可以在编译阶段将静</description>
    </item>
    
    <item>
      <title>使用 docker 快速启动本地 ZooKeeper 集群</title>
      <link>https://piaohua.github.io/post/docker/20240114-zookeeper-cluster-with-docker/</link>
      <pubDate>Sun, 14 Jan 2024 15:47:31 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240114-zookeeper-cluster-with-docker/</guid>
      <description>使用 docker 快速启动本地 ZooKeeper 集群 ZooKeeper 是一个为分布式应用提供一致性服务的软件，是大数据场景下的一个重要的基础组件。 利用 Docker 来快速的在本地启动一个 ZooKeeper 环境。 单</description>
    </item>
    
    <item>
      <title>Nginx反向代理WebSocket</title>
      <link>https://piaohua.github.io/post/tool/20240114-nginx-websocket/</link>
      <pubDate>Sun, 14 Jan 2024 15:33:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240114-nginx-websocket/</guid>
      <description>Nginx反向代理WebSocket WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。该协议使得客户端和服务器之间的数据交换变得更加简</description>
    </item>
    
    <item>
      <title>Python操作Redis</title>
      <link>https://piaohua.github.io/post/python/20240113-redis/</link>
      <pubDate>Sat, 13 Jan 2024 22:40:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240113-redis/</guid>
      <description>Python操作Redis redis-py install 1 pip install redis Start a redis via docker: 1 docker run -p 6379:6379 -it redis/redis-stack:latest Quickly connecting to redis 1 2 3 4 5 import redis r = redis.Redis(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) r.ping() r.set(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;) r.get(&amp;#39;foo&amp;#39;) Connection Pools 1 2 3 4 import redis pool = redis.ConnectionPool(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) r = redis.Redis(connection_pool=pool) r.ping() 操作</description>
    </item>
    
    <item>
      <title>Nginx 直接访问 Redis方案</title>
      <link>https://piaohua.github.io/post/redis/20240113-nginx-redis/</link>
      <pubDate>Sat, 13 Jan 2024 17:12:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240113-nginx-redis/</guid>
      <description>Nginx直接访问Redis方案 HttpRedis：提供指令少，功能单一。 HttpRedis2Module：比HttpRedis操作更灵活，</description>
    </item>
    
    <item>
      <title>Nginx 和 ModSecurity 加强 Web 应用程序的安全性</title>
      <link>https://piaohua.github.io/post/tool/20240113-nginx-modsecurity/</link>
      <pubDate>Sat, 13 Jan 2024 16:23:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240113-nginx-modsecurity/</guid>
      <description>Nginx 和 ModSecurity 加强 Web 应用程序的安全性 在当今互联网时代，Web 应用程序的安全性变得尤为重要。为了保护应用程序和用户的数据免受恶意攻击和漏洞利用，使用合</description>
    </item>
    
    <item>
      <title>[MySQL] delete in select 语句不走索引问题分析</title>
      <link>https://piaohua.github.io/post/mysql/20240111-delete-in-select/</link>
      <pubDate>Thu, 11 Jan 2024 23:22:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240111-delete-in-select/</guid>
      <description>delete in (select &amp;hellip;) 语句执行慢，delete语句不走索引。 在清理MySQL中的一些过期数据时，发现delete操作执行非常慢。 问题场景 需要清理的数据查询</description>
    </item>
    
    <item>
      <title>golang text/template &amp; python Jinja2</title>
      <link>https://piaohua.github.io/post/golang/20231230-template/</link>
      <pubDate>Tue, 02 Jan 2024 19:47:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20231230-template/</guid>
      <description>golang text/template &amp;amp; python Jinja2 模板语法 模板语法都包含在{{和}}中间，其中{{.}}中的点表示当前对象。 如果想清除左右的空格，则需要添加-符号，{{- 清除左边空</description>
    </item>
    
    <item>
      <title>金融数据分析库yfinance使用</title>
      <link>https://piaohua.github.io/post/python/20231231-yfinance/</link>
      <pubDate>Sun, 31 Dec 2023 11:42:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20231231-yfinance/</guid>
      <description>yfinance 是一个使用 Yahoo! 获取数据的 Python 第三方模块。它支持获取最细到1分钟级的历史数据及股票基本面数据。 yfinance 是一个流行的开源库，由 Ran Aroussi 开发，用于访问雅虎财经</description>
    </item>
    
    <item>
      <title>TA-Lib - Technical Analysis Library</title>
      <link>https://piaohua.github.io/post/python/20231231-ta-lib/</link>
      <pubDate>Sun, 31 Dec 2023 10:36:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20231231-ta-lib/</guid>
      <description>TA-Lib is widely used by trading software developers requiring to perform technical analysis of financial market data. Install install from PyPI: 1 $ python -m pip install TA-Lib or Max OS 1 $ brew install ta-lib Abstract API Quick Start 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import numpy as np from talib.abstract import * # note that all ndarrays</description>
    </item>
    
    <item>
      <title>如何解读你的正则表达式</title>
      <link>https://piaohua.github.io/post/tool/20231230-understand-your-regular-expression/</link>
      <pubDate>Sat, 30 Dec 2023 16:45:16 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20231230-understand-your-regular-expression/</guid>
      <description>如何解读你的正则表达式 推荐一个网站：https://regexper.com 在这个网站不仅可以验证你的正则表达式，还可以生成图片来解读你的正</description>
    </item>
    
    <item>
      <title>如何快速测试你的crontab配置是否正确</title>
      <link>https://piaohua.github.io/post/linux/20231230-test-your-crontab/</link>
      <pubDate>Sat, 30 Dec 2023 16:33:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20231230-test-your-crontab/</guid>
      <description>如何快速测试你的crontab配置是否正确 crontab 的语法虽然简单，但由于缺乏有效的验证机制， 可以通过crontab 网站或者https://cron</description>
    </item>
    
    <item>
      <title>DBeaver：一款免费开源的通用数据库工具</title>
      <link>https://piaohua.github.io/post/mysql/20231230-dbeaver/</link>
      <pubDate>Sat, 30 Dec 2023 16:11:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20231230-dbeaver/</guid>
      <description>DBeaver：一款免费开源的通用数据库工具 DBeaver 是一个基于 Java 开发，免费开源的通用数据库管理和开发工具，使用非常友好的 ASL 协议。可以通过官方网站或</description>
    </item>
    
    <item>
      <title>[envsubst] 在bash中优雅的使用配置模板</title>
      <link>https://piaohua.github.io/post/linux/20231230-envsubst/</link>
      <pubDate>Sat, 30 Dec 2023 12:16:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20231230-envsubst/</guid>
      <description>envsubst 用shell中环境变量值替换字符串中的变量 在shell脚本中，常会遇到需要动态修改或生成配置文件的场景，这个情况如果在其他编程语言里， 就会</description>
    </item>
    
    <item>
      <title>Python Telegram Bot</title>
      <link>https://piaohua.github.io/post/python/20231230-telegram-bot/</link>
      <pubDate>Sat, 30 Dec 2023 11:50:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20231230-telegram-bot/</guid>
      <description>Telegram Bot Example Installing EASY TO SETUP 1 $ pip install python-telegram-bot --upgrade Example inlinekeyboard2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55</description>
    </item>
    
    <item>
      <title>[Go] 快速实现电报机器人</title>
      <link>https://piaohua.github.io/post/golang/20231230-telebot/</link>
      <pubDate>Sat, 30 Dec 2023 11:26:21 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20231230-telebot/</guid>
      <description>Telebot is a Telegram bot framework in Go. 先登录telegram创建机器人,创建机器人获取到 ,可以通过API查询。 1 curl -s &amp;#39;https://api.telegram.org/bot&amp;lt;TOKEN&amp;gt;/getMe&amp;#39; 响应结果 1 {&amp;#34;ok&amp;#34;:true,&amp;#34;result&amp;#34;:{&amp;#34;id&amp;#34;:6906901111,&amp;#34;is_bot&amp;#34;:true,&amp;#34;first_name&amp;#34;:&amp;#34;test&amp;#34;,&amp;#34;username&amp;#34;:&amp;#34;test&amp;#34;,&amp;#34;can_join_groups&amp;#34;:true,&amp;#34;can_read_all_group_messages&amp;#34;:false,&amp;#34;supports_inline_queries&amp;#34;:false}} 实现电报机器人示例: 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Polygon测试网络上实现Token交易</title>
      <link>https://piaohua.github.io/post/golang/20230623-polygon-token-transation/</link>
      <pubDate>Sun, 17 Dec 2023 16:52:00 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230623-polygon-token-transation/</guid>
      <description>Polygon测试网络上实现Token交易。 交易节点 Infura和Alchemy是两个最受欢迎的节点供应商。两个节点都支持Polygon主网</description>
    </item>
    
    <item>
      <title>Mac使用Colima运行Docker</title>
      <link>https://piaohua.github.io/post/docker/20231028-mac-colima/</link>
      <pubDate>Sat, 28 Oct 2023 14:00:28 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20231028-mac-colima/</guid>
      <description>Mac使用Colima运行Docker Container runtimes on macOS (and Linux) with minimal setup Colima是一个免费的开源容器运行时，它使用QEMU在虚拟机中运行Docker容器</description>
    </item>
    
    <item>
      <title>更改 MySQL 用户密码的三种方法</title>
      <link>https://piaohua.github.io/post/mysql/20231026-change-password/</link>
      <pubDate>Thu, 26 Oct 2023 23:04:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20231026-change-password/</guid>
      <description>在MySQL中，可以使用 UPDATE , SET PASSWORD 和 ALTER USER 语句更改 MySQL 用户密码。 UPDATE 使用 UPDATE 语句更新 mysql 数据库中的 user 表。 执行完 UPDATE 语句后，还需要执行 FLUSH PRIVILEGES 语句从 mysql 数据库中的</description>
    </item>
    
    <item>
      <title>fatal: couldn&#39;t find remote ref refs/heads/master</title>
      <link>https://piaohua.github.io/post/tool/20231022-brew-update-fail/</link>
      <pubDate>Sun, 22 Oct 2023 21:04:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20231022-brew-update-fail/</guid>
      <description>fatal: couldn&amp;rsquo;t find remote ref refs/heads/master brew 更新提示失败如下： 1 2 3 4 5 &amp;gt; brew update Warning: No available formula with the name &amp;#34;ca-certificates&amp;#34;. ==&amp;gt; Searching for similarly named formulae and casks... Error: No formulae or casks found for ca-certificates. fatal: Couldn&amp;#39;t find remote ref refs/heads/master 解决方法： 1 2 /usr/local/Homebrew/Library/Taps/homebrew git:(master) &amp;gt; git pull origin master 更新</description>
    </item>
    
    <item>
      <title>Shell 工具和脚本</title>
      <link>https://piaohua.github.io/post/linux/20230917-shell-tools/</link>
      <pubDate>Sun, 17 Sep 2023 14:01:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20230917-shell-tools/</guid>
      <description>Shell 工具和脚本 shell 基于空格分割命令并进行解析，然后执行第一个单词代表的程序，并将后续的单词作为程序可以访问的参数。 如果您希望传递的参数中包含空格</description>
    </item>
    
    <item>
      <title>[Linux] linux系统创建交换文件（swapfile）</title>
      <link>https://piaohua.github.io/post/linux/20230907-swapfile/</link>
      <pubDate>Thu, 07 Sep 2023 17:18:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20230907-swapfile/</guid>
      <description>linux系统创建交换文件（swapfile） 查看交换空间大小 1 2 3 4 # free -h total used free shared buff/cache available Mem: 1.8Gi 699Mi 465Mi 3.0Mi 694Mi 1.0Gi Swap: 2.0Gi 885Mi 1.1Gi 如果没有设置交换空间，则Swa</description>
    </item>
    
    <item>
      <title>[Shell] shell变量替换:=、=、:-、-、:?、?、:&#43;、&#43;句法</title>
      <link>https://piaohua.github.io/post/linux/20230907-shell-var/</link>
      <pubDate>Thu, 07 Sep 2023 17:17:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20230907-shell-var/</guid>
      <description>shell变量替换:=、=、:-、-、:?、?、:+、+句法 linux bash shell之变量替换：:=句法、=句法、:-句法、-句法、=?句法、?句法、</description>
    </item>
    
    <item>
      <title>[Nats] nats 简介及使用</title>
      <link>https://piaohua.github.io/post/golang/20230907-nats/</link>
      <pubDate>Thu, 07 Sep 2023 15:24:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230907-nats/</guid>
      <description>NATS是一个开源、轻量级、高性能的分布式消息中间件，实现了高可伸缩性和优雅的Publish/Subscribe模型，使用Golang语言开</description>
    </item>
    
    <item>
      <title>[Linux] bash标准输出及文件重定向</title>
      <link>https://piaohua.github.io/post/linux/20230820-file-redirect/</link>
      <pubDate>Sun, 20 Aug 2023 15:13:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20230820-file-redirect/</guid>
      <description>bash标准输出及文件重定向 标准输入输出 在Linux中，每个进程都会有三个文件，即打开的输入输出流，也叫标准I/O流。 并且这三个文件会进行重</description>
    </item>
    
    <item>
      <title>[Go] Golang服务平滑重启更新</title>
      <link>https://piaohua.github.io/post/golang/20230713-gracefully-restarting/</link>
      <pubDate>Thu, 13 Jul 2023 11:24:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230713-gracefully-restarting/</guid>
      <description>重启更新Golang服务，不中断请求中的连接，请求会继续响应，实现服务平滑处理。 Github开源稳定解决方案 facebookgo/grace - Package grace provides a library that makes it easy to build socket based servers</description>
    </item>
    
    <item>
      <title>[MySQL] where和order by使用索引不一致导致慢SQL问题</title>
      <link>https://piaohua.github.io/post/mysql/20230627-index/</link>
      <pubDate>Tue, 27 Jun 2023 10:17:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20230627-index/</guid>
      <description>where和order by使用索引不一致导致慢SQL问题 慢SQL场景 数据库版本： 1 2 3 4 5 6 7 MySQL [test]&amp;gt; select version(); +------------+ | version() | +------------+ | 5.7.25-log | +------------+ 1 row in set (0.03 sec) 表结构语</description>
    </item>
    
    <item>
      <title>systemd授权mysql用户管理MySQL服务</title>
      <link>https://piaohua.github.io/post/mysql/20230624-systemd/</link>
      <pubDate>Sat, 24 Jun 2023 22:01:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20230624-systemd/</guid>
      <description>Linux平台如何配置systemd授权mysql用户管理MySQL服务 在Linux系统中，默认情况下，mysql用户是没有权限启动MySQ</description>
    </item>
    
    <item>
      <title>[Git] git提交使用SSH签名和GPG签名验证</title>
      <link>https://piaohua.github.io/post/git/20230624-git-ssh-gpg/</link>
      <pubDate>Sat, 24 Jun 2023 21:40:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20230624-git-ssh-gpg/</guid>
      <description>Git 支持使用SSH签名，也支持GPG签名提交记录 SSH签名 SSH 签名的工具是 ssh-keygen 使用 ssh-keygen 生成 SSH Key 1 ssh-keygen -t ed25519 -C &amp;#34;Gitee SSH Key&amp;#34; -t key 类型 -C 注释 执行后，在~/.ssh目</description>
    </item>
    
    <item>
      <title>[Go] 生成polygon和tron钱包地址</title>
      <link>https://piaohua.github.io/post/golang/20230623-ethereum-wallet/</link>
      <pubDate>Fri, 23 Jun 2023 16:38:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230623-ethereum-wallet/</guid>
      <description>使用Go语言创建Polygon公链钱包地址 生成Polygon公链钱包地址 Polygon是建立在以太坊上的Layer2解决方案，私钥、公钥、地</description>
    </item>
    
    <item>
      <title>[ClickHouse] ClickHouse 删除数据或分区后为什么还能查到？</title>
      <link>https://piaohua.github.io/post/clickhouse/20230614-clickhouse-mutations/</link>
      <pubDate>Wed, 14 Jun 2023 17:37:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/clickhouse/20230614-clickhouse-mutations/</guid>
      <description>ClickHouse 删除数据或分区后为什么还能查询到？ 在删除清理clickhouse系统日志数据时，执行完清理操作后，数据并没有立即删除。 清理操作如下： 1 2 3</description>
    </item>
    
    <item>
      <title>[ClickHouse] ClickHouse 启动失败</title>
      <link>https://piaohua.github.io/post/clickhouse/20230614-clickhouse-start-err/</link>
      <pubDate>Wed, 14 Jun 2023 16:37:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/clickhouse/20230614-clickhouse-start-err/</guid>
      <description>ClickHouse 重启时一直提示Waiting for server to start, 无法启动生成。 修改clickhouse配置重启时，一直重启不成功。 1 2 3 4 $ sudo /etc/init.d/clickhouse-server restart Waiting for server to start Cannot start server. You can</description>
    </item>
    
    <item>
      <title>[ClickHouse] ClickHouse 查询表占用空间大小</title>
      <link>https://piaohua.github.io/post/clickhouse/20230614-clickhouse-disk/</link>
      <pubDate>Wed, 14 Jun 2023 14:37:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/clickhouse/20230614-clickhouse-disk/</guid>
      <description>ClickHouse查看数据库容量、表的指标、表分区、数据大小等。 业务表空间 通过 system.parts 查询数据库容量大小。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 SELECT formatReadableSize(sum(bytes)) AS bytes_size, formatReadableSize(sum(primary_key_bytes_in_memory))</description>
    </item>
    
    <item>
      <title>[SSH] Dokcer 基于 Alpine 构建 SSH 服务</title>
      <link>https://piaohua.github.io/post/docker/20230610-sshd/</link>
      <pubDate>Sun, 11 Jun 2023 00:02:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20230610-sshd/</guid>
      <description>基于alpine构建ssh服务 Docker构建SSH服务镜像 基于alpine构建，拉取alpine镜像 1 2 3 4 5 6 7 &amp;gt; docker pull alpine Using default tag: latest latest: Pulling from library/alpine</description>
    </item>
    
    <item>
      <title>[SSH] ssh 登录增加 Google Authenticator 二次验证</title>
      <link>https://piaohua.github.io/post/tool/20230610-ssh-google-authenticator/</link>
      <pubDate>Sat, 10 Jun 2023 18:37:24 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20230610-ssh-google-authenticator/</guid>
      <description>SSH Google Authenticator Docker构建SSH服务镜像 基于alpine构建，拉取alpine镜像 1 2 3 4 5 6 7 &amp;gt; docker pull alpine Using default tag: latest latest: Pulling from library/alpine 59bf1c3509f3: Already exists Digest: sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300 Status: Downloaded newer image for alpine:latest docker.io/library/alpine:latest</description>
    </item>
    
    <item>
      <title>[JMeter] JMeter 介绍及使用</title>
      <link>https://piaohua.github.io/post/tool/20230609-jmeter/</link>
      <pubDate>Fri, 09 Jun 2023 14:37:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20230609-jmeter/</guid>
      <description>JMeter Download JMeter是什么？ JMeter是一个软件，使负载测试或业绩为导向的业务（功能）测试不同的协议或技术。 Apache软件基金会的Stefa</description>
    </item>
    
    <item>
      <title>[Go] 实现 Google Authenticator 二次验证</title>
      <link>https://piaohua.github.io/post/golang/20230527-google-authenticator/</link>
      <pubDate>Sat, 27 May 2023 13:20:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230527-google-authenticator/</guid>
      <description>Google Authenticator 二次验证 Google Authenticator 使用一次性密码(One-time Passcodes)(OTP)进行两步验证。 广泛应用于网站或APP登录二次验证。 Google Authe</description>
    </item>
    
    <item>
      <title>[Graylog] Graylog 安装部署</title>
      <link>https://piaohua.github.io/post/tool/20230331-graylog-install/</link>
      <pubDate>Fri, 31 Mar 2023 17:53:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20230331-graylog-install/</guid>
      <description>Graylog graylog是一个简单易用、功能较全面的日志管理工具，graylog采用Elasticsearch或OpenSearch作为存储和索引以</description>
    </item>
    
    <item>
      <title>[Clickhouse] clickhouse中使用AggregatingMergeTree表引擎聚合k线数据</title>
      <link>https://piaohua.github.io/post/clickhouse/20230218-kline/</link>
      <pubDate>Sat, 18 Feb 2023 21:06:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/clickhouse/20230218-kline/</guid>
      <description>使用 AggregatingMergeTree 表来做增量数据的聚合统计，包括物化视图的数据聚合。 股市及期货市场中的K线图的画法包含四个数据，即开盘价、最高价、最低价、收盘价。 以及单</description>
    </item>
    
    <item>
      <title>[ClickHouse] ClickHouse SQL简单操作</title>
      <link>https://piaohua.github.io/post/clickhouse/20230101-sql/</link>
      <pubDate>Sun, 01 Jan 2023 12:24:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/clickhouse/20230101-sql/</guid>
      <description>ClickHouse支持一种基于SQL的声明式查询语言，它在许多情况下与ANSI SQL标准相同。 支持的查询GROUP BY, ORDER BY, FROM, JOIN, IN以及非相关</description>
    </item>
    
    <item>
      <title>[ClickHouse] ClickHouse 表引擎介绍</title>
      <link>https://piaohua.github.io/post/clickhouse/20221231-table-engines/</link>
      <pubDate>Sat, 31 Dec 2022 21:13:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/clickhouse/20221231-table-engines/</guid>
      <description>ClickHouse 表引擎介绍 表引擎 表引擎（即表的类型）决定了： 数据的存储方式和位置，写到哪里以及从哪里读取数据 支持哪些查询以及如何支持。 并发数据访问。 索引的</description>
    </item>
    
    <item>
      <title>[ClickHouse] ClickHouse 安装部署</title>
      <link>https://piaohua.github.io/post/docker/20221231-clickhouse/</link>
      <pubDate>Sat, 31 Dec 2022 14:43:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20221231-clickhouse/</guid>
      <description>ClickHouse 安装部署 RPM安装包 推荐使用CentOS、RedHat和所有其他基于rpm的Linux发行版的官方预编译rpm包。 首先，您需要添加官方存储</description>
    </item>
    
    <item>
      <title>HTTP 负载测试工具 wrk 和 vegeta</title>
      <link>https://piaohua.github.io/post/tool/20221113-wrk-vegeta/</link>
      <pubDate>Sun, 13 Nov 2022 11:12:41 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20221113-wrk-vegeta/</guid>
      <description>HTTP 负载测试工具wrk/vegeta简介 wrk 简介 Wrk是一个支持HTTP协议的基准测试工具，结合了多线程设计和可扩展事件通知，底层封装epoll</description>
    </item>
    
    <item>
      <title>使用mkdocs-material搭建一个支持markdown语法的静态网站</title>
      <link>https://piaohua.github.io/post/tool/20221108-mkdocs-material/</link>
      <pubDate>Tue, 08 Nov 2022 21:44:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20221108-mkdocs-material/</guid>
      <description>mkdocs-material符合google material ui规范的静态文档网站生成器，使用markdown进行文档书写 mkdocs 介绍 MkDocs是一个快速、</description>
    </item>
    
    <item>
      <title>[Linux] curl 使用指南</title>
      <link>https://piaohua.github.io/post/linux/20221108-curl/</link>
      <pubDate>Tue, 08 Nov 2022 20:43:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20221108-curl/</guid>
      <description>Curl 是一个常用的命令行数据传输工具，可以方便的从命令行创建网络请求。它支持众多协议，支持如 HTTP, HTTPS, FTP, FTPS, SFTP, IMAP, SMTP, POP3 等等协议。Curl 提供了很多强大的功</description>
    </item>
    
    <item>
      <title>[Go] sync.Cond 使用详解</title>
      <link>https://piaohua.github.io/post/golang/20221108-sync-cond/</link>
      <pubDate>Tue, 08 Nov 2022 20:23:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221108-sync-cond/</guid>
      <description>Cond 通常应用于等待某个条件的一组 goroutine，等条件变为 true 的时候，其中一个 goroutine 或者所有的 goroutine 都会被唤醒执行。 sync.Cond 提供的方法 1 2 3 4 func NewCond(l Locker) *Cond {} //</description>
    </item>
    
    <item>
      <title>[Go] Http 服务加载多个ssl证书</title>
      <link>https://piaohua.github.io/post/golang/20221022-http-with-multiple-certificates/</link>
      <pubDate>Sat, 22 Oct 2022 11:41:52 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221022-http-with-multiple-certificates/</guid>
      <description>Http 服务加载多个ssl证书 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cfg := &amp;amp;tls.Config{} cert, err := tls.LoadX509KeyPair(&amp;#34;cert_one.pem&amp;#34;, &amp;#34;key_one.pem&amp;#34;) if err != nil { log.Fatal(err) } cfg.Certificates = append(cfg.Certificates, cert) // keep adding remaining certs to cfg.Certificates server := http.Server{ Addr: &amp;#34;:443&amp;#34;, // Handler: myHandler, TLSConfig: cfg, } server.ListenAndServeTLS(&amp;#34;&amp;#34;, &amp;#34;&amp;#34;) http.ListenAndServeTLS with</description>
    </item>
    
    <item>
      <title>[Gin] Gin 实现反向代理</title>
      <link>https://piaohua.github.io/post/golang/20221022-gin-reverse-proxy/</link>
      <pubDate>Sat, 22 Oct 2022 10:56:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221022-gin-reverse-proxy/</guid>
      <description>Gin 实现代理 直接代理，不做任何修改 1 2 3 4 5 6 router.POST(&amp;#34;/api&amp;#34;, func(c *gin.Context) { proxy := httputil.ReverseProxy{Director: func(request *http.Request) { request = c.Request }} proxy.ServeHTTP(c.Writer, c.Request) }) 转发指定路径给后端服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 router.POST(&amp;#34;/api/v1/backend&amp;#34;, ReverseProxy()) func ReverseProxy() gin.HandlerFunc</description>
    </item>
    
    <item>
      <title>[godaddy SSL] godaddy SSL证书申请</title>
      <link>https://piaohua.github.io/post/tool/20221021-godaddy-ssl/</link>
      <pubDate>Fri, 21 Oct 2022 23:22:03 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20221021-godaddy-ssl/</guid>
      <description>godaddy SSL证书申请 生成CSRs (Certificate Signing Requests) 从服务器上生成证书签名请求(CSRs)： 1 openssl req -new -newkey rsa:2048 -nodes -keyout coolexample.key -out coolexample.csr 用自己的域名替换coolexample，执行</description>
    </item>
    
    <item>
      <title>[Databend] 使用对象存储 MinIO 部署云数据仓库 Databend</title>
      <link>https://piaohua.github.io/post/tool/20221013-databend-minio/</link>
      <pubDate>Thu, 13 Oct 2022 10:23:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20221013-databend-minio/</guid>
      <description>使用对象存储 MinIO 部署云数据仓库 Databend MinIO MinIO 是在 Apache License v2.0 下发布的高性能对象存储。 它是与 Amazon S3 云存储服务 兼容的 API。 使用 MinIO 构建 用于机器学习、分析和应用的高</description>
    </item>
    
    <item>
      <title>[Go] 官方mock框架gomock工具使用</title>
      <link>https://piaohua.github.io/post/golang/20220814-mock/</link>
      <pubDate>Sun, 14 Aug 2022 11:24:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220814-mock/</guid>
      <description>mock 是Go官方提供的测试框架，很好的集成testing包，实现对interface的mock。 安装mock 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &amp;gt; go version</description>
    </item>
    
    <item>
      <title>[Go] 使用 go-sqlmock 模拟数据库驱动编写单元测试用例</title>
      <link>https://piaohua.github.io/post/golang/20220813-go-sqlmock/</link>
      <pubDate>Sat, 13 Aug 2022 12:35:06 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220813-go-sqlmock/</guid>
      <description>go-sqlmock 是一个实现 sql/driver 的模拟库 在使用gorm等orm框架时，由于需要和数据库进行交互，使得单元测试难于编写， 使用go-sqlmock库可以很好的缓解</description>
    </item>
    
    <item>
      <title>[Go] 代码规范检查工具GolangCI-Lint</title>
      <link>https://piaohua.github.io/post/golang/20220810-lint/</link>
      <pubDate>Wed, 10 Aug 2022 21:33:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220810-lint/</guid>
      <description>GolangCI-Lint 是Go的代码规范检查工具。 `GolangCi-Lint功能特点： 非常快：并行运行 linters，重用 Go 构建缓存和缓存分析结果。 基于 Yaml 的配置</description>
    </item>
    
    <item>
      <title>[Go] 第三方命令行工具 - spf13/cobra和urfave/cli</title>
      <link>https://piaohua.github.io/post/golang/20220807-cobra-cli/</link>
      <pubDate>Sun, 07 Aug 2022 18:33:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220807-cobra-cli/</guid>
      <description>spf13/cobra 和 urfave/cli 是Go的2个最流行的优秀的命令行工具 对比 spf13/cobra urfave/cli 简介 A Framework for Modern CLI Apps in Go urfave/cli is a simple, fast, and fun package for building command line apps in Go. 应用项目 docker, kubernetes, istio, etcd, hugo &amp;hellip; drone, peach, gogs, gitea &amp;hellip; LICENSE Apache 2.0 license MIT</description>
    </item>
    
    <item>
      <title>[Linux] 理解 Iptables</title>
      <link>https://piaohua.github.io/post/linux/20220807-understanding-iptables/</link>
      <pubDate>Sun, 07 Aug 2022 10:10:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20220807-understanding-iptables/</guid>
      <description>iptables 作为 Linux 内核中的重要功能，有着广泛的应用，在 Istio 中默认就是利用 iptables 做透明流量劫持的。 iptables 简介 iptables 是 Linux 内核中的防火墙软件 netfilter 的管理工具，位于用户空间，同</description>
    </item>
    
    <item>
      <title>[hugo] 使用 Hugo 和 Github Pages 搭建属于自己的博客</title>
      <link>https://piaohua.github.io/post/tool/20220806-building-github-pages-with-hugo/</link>
      <pubDate>Sat, 06 Aug 2022 18:25:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20220806-building-github-pages-with-hugo/</guid>
      <description>记录使用Hugo和Github Pages 搭建博客的过程和方法 Hugo介绍 Hugo是什么，下面是来自官网的介绍： Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes</description>
    </item>
    
    <item>
      <title>[Go] Handle &#39;broken pipe&#39; error in Go</title>
      <link>https://piaohua.github.io/post/golang/20220731-connection-broken-pipe/</link>
      <pubDate>Sun, 31 Jul 2022 11:30:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220731-connection-broken-pipe/</guid>
      <description>Handle &amp;lsquo;broken pipe&amp;rsquo; error in Go 向一个异常关闭并发送过RST包的TCP连接写入数据时，会发生broken pipe错误。第一次向异常关闭的连接 发送数据时，对端会回</description>
    </item>
    
    <item>
      <title>[Go] Handle &#39;connection reset by peer&#39; error in Go</title>
      <link>https://piaohua.github.io/post/golang/20220731-connection-reset-by-peer/</link>
      <pubDate>Sun, 31 Jul 2022 11:04:37 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220731-connection-reset-by-peer/</guid>
      <description>Handle &amp;lsquo;connection reset by peer&amp;rsquo; error in Go TCP连接在对端异常关闭，并发送RST包过来重建连接时，连接会报connection reset by peer错误，正常关闭连接会发送FI</description>
    </item>
    
    <item>
      <title>[Go] time.Time 时间格式处理</title>
      <link>https://piaohua.github.io/post/golang/20220730-time/</link>
      <pubDate>Sat, 30 Jul 2022 16:37:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220730-time/</guid>
      <description>golang中对时间和日期格式处理 date format in Go golang 时间格式化文档time constants 1 2 3 4 5 6 7 time.Now().UTC().Format(&amp;#34;2006-01-02&amp;#34;) time.Now().UTC().Format(&amp;#34;02/01/2006&amp;#34;) time.Now().UTC().Format(&amp;#34;2006-01-02 15:04:05&amp;#34;) time.Now().UTC().Format(time.RFC3339) Parse date with a timezone 1 2 3 4 s := &amp;#34;2022-07-30T19:12:00+01:00&amp;#34; loc, _ := time.LoadLocation(&amp;#34;Europe/Berlin&amp;#34;) t, _ := time.ParseInLocation(time.RFC3339, s, loc) fmt.Println(t) 计</description>
    </item>
    
    <item>
      <title>[Databend] 使用 hyperfine 通过 MySQL 客户端执行基准测试</title>
      <link>https://piaohua.github.io/post/mysql/20220724-databend/</link>
      <pubDate>Sun, 24 Jul 2022 10:42:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20220724-databend/</guid>
      <description>Databend 是一款开源、弹性、低成本，基于对象存储也可以做实时分析的新式数仓。 部署Databend 参照 Docs - Deploy Databend 完成部署。 安装 hyperfine 根据 hyperfine - installation 的提示安装 hy</description>
    </item>
    
    <item>
      <title>[YCSB] 使用YCSB对数据库性能测试</title>
      <link>https://piaohua.github.io/post/mysql/20220723-ycsb/</link>
      <pubDate>Sat, 23 Jul 2022 11:21:06 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20220723-ycsb/</guid>
      <description>Yahoo! Cloud Serving Benchmark (YCSB) 是一个Java语言实现的主要用于云端或者服务器端的数据库性能测试工具。 下载YCSB 下载最新版本的YCSB 1 2 3 curl -O --location https://github.com/brianfrankcooper/YCSB/releases/download/0.17.0/ycsb-0.17.0.tar.gz tar xfvz ycsb-0.17.0.tar.gz cd ycsb-0.17.0 查</description>
    </item>
    
    <item>
      <title>[Linux] NTP时间服务器</title>
      <link>https://piaohua.github.io/post/linux/20220716-ntp/</link>
      <pubDate>Sat, 16 Jul 2022 19:06:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20220716-ntp/</guid>
      <description>NTP(Network Time Protocol) 网络时间协议，工作在UDP的123端口上 是用来使计算机时间同步化的一种协议，它可以使计算机对其服务器或时钟源（如石英钟，GPS等等)做</description>
    </item>
    
    <item>
      <title>[MobaXterm] Windows 上的终端工具</title>
      <link>https://piaohua.github.io/post/tool/20220715-mobaxterm/</link>
      <pubDate>Fri, 15 Jul 2022 23:07:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20220715-mobaxterm/</guid>
      <description>MobaXterm是一款Windows上的全能型终端软件 优点 功能十分强大，支持SSH，FTP，串口，VNC，X server等功能 支持标签，切</description>
    </item>
    
    <item>
      <title>[MySQLSlap] mysqlslap 对 MySQL 进行压力测试</title>
      <link>https://piaohua.github.io/post/mysql/20220715-mysqlslap/</link>
      <pubDate>Fri, 15 Jul 2022 22:17:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20220715-mysqlslap/</guid>
      <description>mysqlslap是mysql自带的基准测试工具，可以模拟多个客户端同时向服务器发起请求 mysqlslap 常用参数 1 2 3 4 5 6 7 8 9 10 11 12 --concurrency 并发数量,多个可</description>
    </item>
    
    <item>
      <title>[Gerrit] Gerrit Code Reviewer in Docker</title>
      <link>https://piaohua.github.io/post/golang/20220701-gerrit-docker/</link>
      <pubDate>Fri, 01 Jul 2022 21:53:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220701-gerrit-docker/</guid>
      <description>Gerrit是一个基于 Web 的代码审查系统，适于采用 Git 版本控制系统开发的项目进行在线代码审查。 快速启动 快速启动一个gerrit server，启动</description>
    </item>
    
    <item>
      <title>[MySQL] mysql spider sandbox</title>
      <link>https://piaohua.github.io/post/mysql/20210925-mysql-spider-sandbox/</link>
      <pubDate>Sat, 25 Sep 2021 12:55:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210925-mysql-spider-sandbox/</guid>
      <description>This is a simple sandbox to play around with the MySQL spider engine. docker-compose.yaml Docker sandbox for experimenting with the Spider engine for MySQL Dockerfile resources https://github.com/mikesss/mysql-spider-sandbox.git 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 version:&amp;#39;3&amp;#39;services:mysql_spider:build:./dockerports:- &amp;#34;3307:3306&amp;#34;environment:MYSQL_DATABASE:spiderMYSQL_USER:spiderMYSQL_PASSWORD:spidervolumes:- ./scripts/spider:/docker-entrypoint-initdb.dmysql_backend1:image:mysql:5.5ports:- &amp;#34;3308:3306&amp;#34;environment:MYSQL_ALLOW_EMPTY_PASSWORD:&amp;#39;yes&amp;#39;MYSQL_DATABASE:spiderMYSQL_USER:spiderMYSQL_PASSWORD:spidervolumes:- ./scripts/mysql:/docker-entrypoint-initdb.dmysql_backend2:image:mysql:5.5ports:- &amp;#34;3309:3306&amp;#34;environment:MYSQL_ALLOW_EMPTY_PASSWORD:&amp;#39;yes&amp;#39;MYSQL_DATABASE:spiderMYSQL_USER:spiderMYSQL_PASSWORD:spidervolumes:-</description>
    </item>
    
    <item>
      <title>[Git] git add -A 和 git add . 及 git add -u的区别</title>
      <link>https://piaohua.github.io/post/git/20210925-git-add/</link>
      <pubDate>Sat, 25 Sep 2021 12:39:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20210925-git-add/</guid>
      <description>git add -A 和 git add . 及 git add -u的区别 git add . git add .会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区， 包括文件内容修改(modified)</description>
    </item>
    
    <item>
      <title>[MySQL] Mobike 高可用MySQL集群方案使用实践</title>
      <link>https://piaohua.github.io/post/mysql/20210919-mysql-moha/</link>
      <pubDate>Sun, 19 Sep 2021 10:38:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210919-mysql-moha/</guid>
      <description>MoHA 是 Mobike 开源的跨数据中心的 MySQL 集群的高可用（HA）解决方案 MoHA 提供了详细的设计和使用说明文档，点击查看 启动使用 下载项目 1 git clone https://gitee.com/piao/moha.git $GOPATH/src/github.com/moiot/moha 可选择修改配置中的</description>
    </item>
    
    <item>
      <title>[Linux] shell exec 命令</title>
      <link>https://piaohua.github.io/post/linux/20210830-linux-shell-exec/</link>
      <pubDate>Mon, 30 Aug 2021 22:07:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20210830-linux-shell-exec/</guid>
      <description>Linux shell exec command shell中exec命令 语法格式 exec [-cl] [-a name] [command [arguments]] 选项说明 -c #在空环境中执行指定的命令 -l #在传递给command的第零个arg的开头放置一</description>
    </item>
    
    <item>
      <title>[MySQL] Docker Official Image packaging for MySQL Community Server</title>
      <link>https://piaohua.github.io/post/mysql/20210830-mysql-dockerfile/</link>
      <pubDate>Mon, 30 Aug 2021 21:53:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210830-mysql-dockerfile/</guid>
      <description>Docker Official Image packaging for MySQL Community Server mysql5.7 Dockerfile.debian 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60</description>
    </item>
    
    <item>
      <title>[MySQL] show slave status 介绍</title>
      <link>https://piaohua.github.io/post/mysql/20210829-mysql-show-slave-status/</link>
      <pubDate>Sun, 29 Aug 2021 17:10:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210829-mysql-show-slave-status/</guid>
      <description>MySQL show slave status 介绍 执行show slave status返回结果 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47</description>
    </item>
    
    <item>
      <title>[Docker] Docker-compose 安装 Wordpress 博客</title>
      <link>https://piaohua.github.io/post/docker/20210829-docker-wordpress/</link>
      <pubDate>Sun, 29 Aug 2021 10:32:41 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20210829-docker-wordpress/</guid>
      <description>Docker-compose 安装 Wordpress 博客 安装 Wordpress 创建 docker-compose.wordpress.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 version:&amp;#39;3.3&amp;#39;services:db:image:mysql:5.7.22volumes:- db_data:/var/lib/mysqlrestart:alwaysenvironment:MYSQL_ROOT_PASSWORD:somewordpressMYSQL_DATABASE:wordpressMYSQL_USER:wordpressMYSQL_PASSWORD:wordpresswordpress:depends_on:- dbimage:wordpress:latestvolumes:- wordpress_data:/var/www/htmlports:- &amp;#34;8000:80&amp;#34;restart:alwaysenvironment:WORDPRESS_DB_HOST:db:3306WORDPRESS_DB_USER:wordpressWORDPRESS_DB_PASSWORD:wordpressWORDPRESS_DB_NAME:wordpressvolumes:db_data:{}wordpress_data:{} 启动 wordpress 1 &amp;gt; docker-compose -f docker-compose.wordpress.yml up -d 访问博客: localhost:8000 访问管理后台：l</description>
    </item>
    
    <item>
      <title>[Docker] 为什么`mysql -h localhost`无法登录了？</title>
      <link>https://piaohua.github.io/post/docker/20210823-docker-mysql-login/</link>
      <pubDate>Mon, 23 Aug 2021 22:35:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20210823-docker-mysql-login/</guid>
      <description>为什么mysql -h localhost无法登录了？ 在mac上用docker运行了一个mysql,配置如下： docker-compose.yml</description>
    </item>
    
    <item>
      <title>[Docker] Etcd Cluster</title>
      <link>https://piaohua.github.io/post/docker/20210822-docker-etcd-cluster/</link>
      <pubDate>Sun, 22 Aug 2021 15:33:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20210822-docker-etcd-cluster/</guid>
      <description>Docker 部署 Etcd 集群 拉取镜像 选择一个镜像拉取 1 2 3 4 5 6 7 docker pull gcr.io/etcd-development/etcd:v3.5.0 docker pull quay.io/coreos/etcd:v3.5.0 docker pull bitnami/etcd:latest docker pull k8s.gcr.io/etcd:3.4.13-0 运行容器 使用gcr.io/etcd-development/etc</description>
    </item>
    
    <item>
      <title>[MyRocks] Docker中使用MyRocks</title>
      <link>https://piaohua.github.io/post/mysql/20210726-mysql-myrocks/</link>
      <pubDate>Mon, 26 Jul 2021 00:17:24 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210726-mysql-myrocks/</guid>
      <description>RocksDB是FaceBook基于Google开源的LevelDB实现的，使用LSM(Log-Structure Merge）树来存储数据。</description>
    </item>
    
    <item>
      <title>[MySQL] 部署GreatSQL及MGR集群</title>
      <link>https://piaohua.github.io/post/mysql/20210725-mysql-greatsql/</link>
      <pubDate>Sun, 25 Jul 2021 10:46:24 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210725-mysql-greatsql/</guid>
      <description>转自 GreatSQL 社区 关于 GreatSQL GreatSQL是源于Percona Server的分支版本，除了Percona Server已有的稳定可靠、高效、管理更方便等</description>
    </item>
    
    <item>
      <title>[Linux] dig 命令使用</title>
      <link>https://piaohua.github.io/post/linux/20210710-linux-dig/</link>
      <pubDate>Sat, 10 Jul 2021 10:58:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20210710-linux-dig/</guid>
      <description>Linux dig 命令主要用于 查询单个域名的 DNS 信息 使用方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 &amp;gt; dig baidu.com ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.7-P3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; baidu.com ;; global options: +cmd ;; Got</description>
    </item>
    
    <item>
      <title>[Go] Golang Webp</title>
      <link>https://piaohua.github.io/post/golang/20210710-golang-webp/</link>
      <pubDate>Sat, 10 Jul 2021 10:29:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210710-golang-webp/</guid>
      <description>Webp 是由谷歌在 2010 年 9 月发布的一种用于 web 端支持有损和无损压缩的图片格式 WebP 是 Google 推出的一种同时提供了有损压缩与无损压缩（可逆压缩）的图片文件格式。派</description>
    </item>
    
    <item>
      <title>[五笔] 五笔字根表</title>
      <link>https://piaohua.github.io/post/tool/20210626-wubi/</link>
      <pubDate>Sat, 26 Jun 2021 16:58:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20210626-wubi/</guid>
      <description>五笔字根表 横区： G（11）：王旁青头兼五一 F（12）：土士二干十寸雨，革字底 D（13）：大犬三羊古石厂，百有龙头肆左边 S（14）：木西丁 A（</description>
    </item>
    
    <item>
      <title>[唐诗] 《大堤曲》</title>
      <link>https://piaohua.github.io/post/chinese/20210626-poetry-tang-lihe/</link>
      <pubDate>Sat, 26 Jun 2021 12:11:00 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210626-poetry-tang-lihe/</guid>
      <description>《大堤曲》唐·李贺 妾家住横塘，红纱满桂香。 青云教绾头上髻，明月与作耳边珰。 莲风起，江畔春；大堤上，留北人。 郎食鲤鱼尾，妾食猩猩唇。 莫指襄阳道</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Insert Id</title>
      <link>https://piaohua.github.io/post/mysql/20210612-mysql-insert-id/</link>
      <pubDate>Sat, 12 Jun 2021 16:17:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210612-mysql-insert-id/</guid>
      <description>The value to be used by the following INSERT or ALTER TABLE statement when inserting an AUTO_INCREMENT value. This is mainly used with the binary log. insert_id 是mysql session变量，设置该变量会影响下一条INSERT 或 ALTER TABLE 操作的 AUTO_INCREMENT 值。 比</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Binlog 初识</title>
      <link>https://piaohua.github.io/post/mysql/20210612-mysql-binlog/</link>
      <pubDate>Sat, 12 Jun 2021 15:39:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210612-mysql-binlog/</guid>
      <description>原文 Mysql日志 MySQL 的日志包括错误日志（ErrorLog），更新日志（Update Log），二进制日志（Binlog），查询日志（Query</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL redolog undolog binlog</title>
      <link>https://piaohua.github.io/post/mysql/20210529-mysql-log/</link>
      <pubDate>Sat, 29 May 2021 10:04:33 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210529-mysql-log/</guid>
      <description>MySQL redolog undolog binlog ySQL中有六种日志文件，分别是： 重做日志（redo log）、回滚日志（undo log）、二进制日志（binlog）、错误日志（er</description>
    </item>
    
    <item>
      <title>[MySQL] 用Docker搭建MySQL主从多节点集群</title>
      <link>https://piaohua.github.io/post/mysql/20210523-mysql-master-slaves/</link>
      <pubDate>Sun, 23 May 2021 18:56:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210523-mysql-master-slaves/</guid>
      <description>用Docker搭建MySQL主从多节点集群 MySQL 主从同步分为 5 个步骤： master 节点将数据的更新记录写到 binary log 中。 slave 节点开启 IO 线程连接 master 节点，请求获取指定</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 存储引擎的比较</title>
      <link>https://piaohua.github.io/post/mysql/20210523-mysql-engines-compare/</link>
      <pubDate>Sun, 23 May 2021 12:33:14 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210523-mysql-engines-compare/</guid>
      <description>转载自 MySql 存储引擎的比较 InnoDB 存储引擎 InnoDB 是事务性数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL5.5.5 之后，Inno</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Cluster on docker-compose</title>
      <link>https://piaohua.github.io/post/mysql/20210523-mysql-cluster/</link>
      <pubDate>Sun, 23 May 2021 12:07:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210523-mysql-cluster/</guid>
      <description>MySQL Cluster on docker-compose MySQL Cluster是一个高性能、可扩展、集群化数据库产品。MySQL Cluster是一个基于NDB Cluster存储引擎的完整分布式数</description>
    </item>
    
    <item>
      <title>[MySQL] Percona XtraDB Cluster on docker-compose</title>
      <link>https://piaohua.github.io/post/mysql/20210523-mysql-pxc/</link>
      <pubDate>Sun, 23 May 2021 11:40:17 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210523-mysql-pxc/</guid>
      <description>Percona XtraDB Cluster on docker-compose 选择percona/percona-xtradb-cluster:5.7版本，搭建一个3节点的集群; 使用haproxy做反向代理负</description>
    </item>
    
    <item>
      <title>[Go] Golang Unicode</title>
      <link>https://piaohua.github.io/post/golang/20210518-golang-unicode/</link>
      <pubDate>Tue, 18 May 2021 21:14:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210518-golang-unicode/</guid>
      <description>unicode包提供数据和函数来测试Unicode代码点的一些属性。 unicode 包 [原文] (https://www.cnblogs.com/golove/p/3273585.html) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</description>
    </item>
    
    <item>
      <title>[宋词] 《卜算子·黄州定慧院寓居作》</title>
      <link>https://piaohua.github.io/post/chinese/20210427-poetry-songci-sushi/</link>
      <pubDate>Tue, 27 Apr 2021 21:10:35 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210427-poetry-songci-sushi/</guid>
      <description>《卜算子·黄州定慧院寓居作》 北宋·苏轼 缺月挂疏桐，漏断人初静。 时见幽人独往来，缥缈孤鸿影。 惊起却回头，有恨无人省。 拣尽寒枝不肯栖，寂寞沙洲冷</description>
    </item>
    
    <item>
      <title>[Linux] 网络分析工具 tcpdump</title>
      <link>https://piaohua.github.io/post/linux/20210424-linux-tcpdump/</link>
      <pubDate>Sat, 24 Apr 2021 11:08:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20210424-linux-tcpdump/</guid>
      <description>Linux tcpdump tcpdump是Linux系统中功能强大的网络工具, 运行在用户态，通过调用 libpcap 库的 api 来实现数据包的抓取。常用于故障诊断，网络分析，收集网络</description>
    </item>
    
    <item>
      <title>[宋词] 《满江红·怒发冲冠》</title>
      <link>https://piaohua.github.io/post/chinese/20210418-poetry-songci-yuefei/</link>
      <pubDate>Sun, 18 Apr 2021 16:02:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210418-poetry-songci-yuefei/</guid>
      <description>《满江红·怒发冲冠》南宋·岳飞 怒发冲冠，凭栏处，潇潇雨歇。 抬望眼，仰天长啸，壮怀激烈。 三十功名尘与土，八千里路云和月。 莫等闲，白了少年头，空</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL身份验证插件</title>
      <link>https://piaohua.github.io/post/mysql/20210404-mysql-pluggable-authentication/</link>
      <pubDate>Sun, 04 Apr 2021 21:38:33 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210404-mysql-pluggable-authentication/</guid>
      <description>MySQL身份验证插件(mysql_old_password、mysql_native_password、sha256_password、c</description>
    </item>
    
    <item>
      <title>[Linux] ssh端口转发</title>
      <link>https://piaohua.github.io/post/linux/20210307-linux-ssh-proxy/</link>
      <pubDate>Sun, 07 Mar 2021 18:30:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20210307-linux-ssh-proxy/</guid>
      <description>Linux ssh 端口转发 SSH有三种端口转发模式: 本地端口转发(Local Port Forwarding) 远程端口转发(Local Port Forwarding) 动态端口转发(Dynamic Port Forwarding) 本地端口转发 使</description>
    </item>
    
    <item>
      <title>[Go] rsa OAEP 加密、解密在go中使用及mysql中的应用</title>
      <link>https://piaohua.github.io/post/golang/20210306-golang-rsa-oaep/</link>
      <pubDate>Sat, 06 Mar 2021 11:55:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210306-golang-rsa-oaep/</guid>
      <description>rsa OAEP 加密、解密 OAEP全称为Optimal Asymmetric Encryption Padding.是一种非对称加密填充场景. 生成RSA证书 use the openssl command to set up the RSA key files. create 2,048-bit keys. 1 2 openssl genrsa -out</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 8.0 身份验证插件(caching_sha2_password)</title>
      <link>https://piaohua.github.io/post/mysql/20210305-mysql-connecton/</link>
      <pubDate>Fri, 05 Mar 2021 23:16:17 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210305-mysql-connecton/</guid>
      <description>MySQL 8.0 身份验证插件(caching_sha2_password) MySQL 5.6/5.7 默认身份验证插件是 mysql_native_password, 依赖于 SHA1 算法 MySQL 5.6 开始支持 sha256_password 身份验证插件。它使用加盐密码</description>
    </item>
    
    <item>
      <title>[Go] 实现TCP连接的双向拷贝</title>
      <link>https://piaohua.github.io/post/golang/20210228-go-tcp-proxy/</link>
      <pubDate>Sun, 28 Feb 2021 21:12:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210228-go-tcp-proxy/</guid>
      <description>实现TCP连接的双向拷贝 用io.Copy来实现内容拷贝，将源端数据复制到目标端，为防止内存溢出， io.Copy方法默认缓冲区为32k，io.</description>
    </item>
    
    <item>
      <title>[唐] 《忆秦娥·箫声咽》</title>
      <link>https://piaohua.github.io/post/chinese/20210206-poetry-tang-libai/</link>
      <pubDate>Sat, 06 Feb 2021 16:35:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210206-poetry-tang-libai/</guid>
      <description>《忆秦娥·箫声咽》唐·李白 箫声咽，秦娥梦断秦楼月。 秦楼月，年年柳色，灞陵伤别。 乐游原上清秋节，咸阳古道音尘绝。 音尘绝，西风残照，汉家陵阙。</description>
    </item>
    
    <item>
      <title>[宋词] 《浣溪沙·游蕲水清泉寺》</title>
      <link>https://piaohua.github.io/post/chinese/20210126-poetry-songci-sushi/</link>
      <pubDate>Tue, 26 Jan 2021 21:19:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210126-poetry-songci-sushi/</guid>
      <description>《浣溪沙·游蕲水清泉寺》北宋·苏轼 游蕲水清泉寺，寺临兰溪，溪水西流。 山下兰芽短浸溪，松间沙路净无泥，潇潇暮雨子规啼。 谁道人生无再少？门前流水</description>
    </item>
    
    <item>
      <title>[Go] Golang flag 获取多个值</title>
      <link>https://piaohua.github.io/post/golang/20210126-golang-flag-array/</link>
      <pubDate>Tue, 26 Jan 2021 20:49:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210126-golang-flag-array/</guid>
      <description>Golang 一个 flag 参数获取多个值 flag包提供一个动态Value接口,标准库中的flag方法都是通过Value实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Value is the</description>
    </item>
    
    <item>
      <title>[唐诗] 《酬乐天咏老见示》</title>
      <link>https://piaohua.github.io/post/chinese/20210123-poetry-tang-liuyuxi/</link>
      <pubDate>Sat, 23 Jan 2021 19:54:45 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210123-poetry-tang-liuyuxi/</guid>
      <description>《酬乐天咏老见示》唐·刘禹锡 人谁不顾老，老去有谁怜。 身瘦带频减，发稀冠自偏。 废书缘惜眼，多灸为随年。 经事还谙事，阅人如阅川。 细思皆幸矣，下此</description>
    </item>
    
    <item>
      <title>[唐诗] 《听雪》</title>
      <link>https://piaohua.github.io/post/chinese/20210123-poetry-tang-baijuyi/</link>
      <pubDate>Sat, 23 Jan 2021 19:35:58 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210123-poetry-tang-baijuyi/</guid>
      <description>《听雪》唐·白居易 已讶衾枕冷，复见窗户明。 夜深知雪重，时闻折竹声。</description>
    </item>
    
    <item>
      <title>[诗词] 《探春慢》</title>
      <link>https://piaohua.github.io/post/chinese/20210123-poetry-qing/</link>
      <pubDate>Sat, 23 Jan 2021 19:05:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210123-poetry-qing/</guid>
      <description>《探春慢》清·志锐 四面寒山，孤城一角，烟外穹庐三五。 雨必兼风，霜前见雪，节序恼人如许。 沦落天涯久，又谁见、羝羊能乳？ 故乡一片归心，相对药炉同</description>
    </item>
    
    <item>
      <title>[Go] 使用 CGroup 实现进程内存控制</title>
      <link>https://piaohua.github.io/post/golang/20210123-golang-cgroups-memory-limit/</link>
      <pubDate>Sat, 23 Jan 2021 10:16:51 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210123-golang-cgroups-memory-limit/</guid>
      <description>使用 CGroup 实现进程内存控制 参考原文 背景 从 Linux 内核 2.6.25 开始，CGroup 支持对进程内存的隔离和限制，这也是 Docker 等容器技术的底层支撑。 使用 CGroup 有如下好处 在共</description>
    </item>
    
    <item>
      <title>[唐诗] 《题破山寺后禅院》</title>
      <link>https://piaohua.github.io/post/chinese/20210118-poetry-tang-changjian/</link>
      <pubDate>Mon, 18 Jan 2021 22:41:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210118-poetry-tang-changjian/</guid>
      <description>《题破山寺后禅院》 唐·常建 清晨入古寺，初日照高林。 竹径通幽处，禅房花林深。 山光悦鸟性，潭影空人心。 万籁此都寂，但余钟馨音。</description>
    </item>
    
    <item>
      <title>[Linux] taskset Command</title>
      <link>https://piaohua.github.io/post/linux/20210117-linux-taskset-command/</link>
      <pubDate>Sun, 17 Jan 2021 14:25:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20210117-linux-taskset-command/</guid>
      <description>Linux taskset Command taskset命令用于设置进程（或 线程）的处理器亲和性（Processor Affinity），可以将进程（或 线程）绑定到特定的一个 或 多</description>
    </item>
    
    <item>
      <title>[Linux] ulimit</title>
      <link>https://piaohua.github.io/post/linux/20210117-linux-ulimit/</link>
      <pubDate>Sun, 17 Jan 2021 13:43:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20210117-linux-ulimit/</guid>
      <description>Linux ulimit 命令 ulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、Shell 进程创建文件的大小、内</description>
    </item>
    
    <item>
      <title>[宋词] 《临江仙·夜归临皋》</title>
      <link>https://piaohua.github.io/post/chinese/20210110-poetry-songci-sushi/</link>
      <pubDate>Sun, 10 Jan 2021 15:50:37 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210110-poetry-songci-sushi/</guid>
      <description>《临江仙·夜归临皋》 北宋·苏轼 夜饮东坡醒复醉，归来仿佛三更。 家童鼻息已雷鸣。 敲门都不应，依仗听江声。 长恨此身非我有，何时忘却营营。 夜阑风静縠</description>
    </item>
    
    <item>
      <title>[Go] sync.ErrGroup</title>
      <link>https://piaohua.github.io/post/golang/20210109-golang-err-group/</link>
      <pubDate>Sat, 09 Jan 2021 12:42:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210109-golang-err-group/</guid>
      <description>sync.ErrGroup sync.WaitGroup可以阻塞等待多个goroutine执行完成，但是WaitGroup无法知道goroutine出错的原因，syn</description>
    </item>
    
    <item>
      <title>[唐诗] 《梦微之》</title>
      <link>https://piaohua.github.io/post/chinese/20210105-poetry-tang-baijuyi/</link>
      <pubDate>Tue, 05 Jan 2021 22:24:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210105-poetry-tang-baijuyi/</guid>
      <description>《梦微之》唐·白居易 夜来携手梦同游，晨起盈巾泪莫收。 漳浦老身三度病，咸阳宿草八回秋。 君埋泉下泥销骨，我寄人间雪满头。 阿卫韩郎相次去，夜台茫昧</description>
    </item>
    
    <item>
      <title>[唐诗] 《小寒》</title>
      <link>https://piaohua.github.io/post/chinese/20210104-poetry-tang-yuanzhen/</link>
      <pubDate>Mon, 04 Jan 2021 21:46:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210104-poetry-tang-yuanzhen/</guid>
      <description>《小寒》唐·元稹 小寒连大吕，欢鹊垒新巢。 拾食寻河曲，衔紫绕树梢。 霜鹰近北首，雊雉隐丛茅。 莫怪严凝切，春冬正月交。</description>
    </item>
    
    <item>
      <title>[Go] A Fast String Searching Algorithm</title>
      <link>https://piaohua.github.io/post/golang/20210102-golang-a-fast-string-searching-algorithm/</link>
      <pubDate>Sat, 02 Jan 2021 20:54:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210102-golang-a-fast-string-searching-algorithm/</guid>
      <description>A Fast String Searching Algorithm BF算法（Brute Force） 将模式串和主串进行比较，一致时则继续比较下一字符，直到比较完整个模式串。不一致时则将模式串后移一位</description>
    </item>
    
    <item>
      <title>[宋词] 《西江月·日日深杯酒满》</title>
      <link>https://piaohua.github.io/post/chinese/20210102-poetry-songci/</link>
      <pubDate>Sat, 02 Jan 2021 14:26:58 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210102-poetry-songci/</guid>
      <description>《西江月·日日深杯酒满》 南宋·朱敦儒 日日深杯酒满，朝朝小圃花开。 自歌自舞自开怀，无拘无束无碍。 青史几番春梦，黄泉多少奇才。 不须计较与安排，领</description>
    </item>
    
    <item>
      <title>[Go] Uber Go Style Guide</title>
      <link>https://piaohua.github.io/post/golang/20210101-golang-uber-go-style-guide/</link>
      <pubDate>Fri, 01 Jan 2021 14:57:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210101-golang-uber-go-style-guide/</guid>
      <description>Uber Go 语言编程规范 不必要的else 如果在if的两个分支中都设置了变量，则可以将其替换为单个if。 Bad 1 2 3 4 5 6 var a int if b { a = 100 } else { a = 10 }</description>
    </item>
    
    <item>
      <title>[唐诗] 《元日感怀》</title>
      <link>https://piaohua.github.io/post/chinese/20210101-poetry-tang-liuyuxi/</link>
      <pubDate>Fri, 01 Jan 2021 11:58:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210101-poetry-tang-liuyuxi/</guid>
      <description>《元日感怀》唐·刘禹锡 振蛰春潜至，湘南人未归。 身加一日长，心觉去年非。 燎火委虚烬，儿童炫彩衣。 异乡无旧识，车马到门稀。</description>
    </item>
    
    <item>
      <title>[Git] git commit 输入 message 方式和规范</title>
      <link>https://piaohua.github.io/post/git/20201231-git-commit-message/</link>
      <pubDate>Thu, 31 Dec 2020 19:50:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20201231-git-commit-message/</guid>
      <description>git commit 输入 message 方式和规范 方式 常见的-m &amp;lt;msg&amp;gt;单行输入 git commit -m &amp;quot;message&amp;quot; . 当要输入多行时，可以不带参数，直接使用git commit会启动默认</description>
    </item>
    
    <item>
      <title>[唐诗] 《问刘十九》</title>
      <link>https://piaohua.github.io/post/chinese/20201230-poetry-tang-baijuyi/</link>
      <pubDate>Wed, 30 Dec 2020 21:41:24 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20201230-poetry-tang-baijuyi/</guid>
      <description>《问刘十九》唐·白居易 绿蚁新醅酒，红泥小火炉。 晚来天欲雪，能饮一杯无？</description>
    </item>
    
    <item>
      <title>[宋词] 《苏幕遮·燎沉香》</title>
      <link>https://piaohua.github.io/post/chinese/20201229-poetry-songci/</link>
      <pubDate>Tue, 29 Dec 2020 21:33:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20201229-poetry-songci/</guid>
      <description>《苏幕遮·燎沉香》 北宋·周邦彦 燎沈香，消溽暑。 鸟雀呼晴，侵晓窥檐语。 叶上初阳干宿雨，水面清圆，一一风荷举。 故乡遥，何日去？ 家住吴门，久作长安</description>
    </item>
    
    <item>
      <title>[Git] Git 代码回滚操作(reset/revert/checkout)</title>
      <link>https://piaohua.github.io/post/git/20201228-git-reset/</link>
      <pubDate>Mon, 28 Dec 2020 22:44:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20201228-git-reset/</guid>
      <description>Git 代码回滚操作 git reset的理解 git reset 直接把之前 commit 删掉，非 git reset --hard 的操作是不会删掉 git reset 参数定义 --soft 回退后分支修改的代码被保留并标记为add的状态（</description>
    </item>
    
    <item>
      <title>[宋词] 《虞美人 · 听雨》</title>
      <link>https://piaohua.github.io/post/chinese/20201227-poetry-songci-tingyu/</link>
      <pubDate>Sun, 27 Dec 2020 11:56:31 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20201227-poetry-songci-tingyu/</guid>
      <description>《虞美人 · 听雨》南宋·蒋捷 少年听雨歌楼上，红烛昏罗账。 壮年听雨客舟中，江阔云低，断雁叫西风。 而今听雨僧庐下，鬓已星星也。 悲欢离合总无情，一任</description>
    </item>
    
    <item>
      <title>[GCC] gcc和g&#43;&#43;是什么</title>
      <link>https://piaohua.github.io/post/tool/20201127-gcc-g&#43;&#43;/</link>
      <pubDate>Sun, 27 Dec 2020 10:41:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20201127-gcc-g&#43;&#43;/</guid>
      <description>gcc和g++是什么 gcc和g++区别介绍 GCC:GNU Compiler Collection(GUN 编译器集合)，它可以编译C、C++、JAV、Fortran、Pascal、Object-C、</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 半同步复制(semi_sync_replication)</title>
      <link>https://piaohua.github.io/post/mysql/20201226-mysql-semi-sync-replication/</link>
      <pubDate>Sat, 26 Dec 2020 16:32:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20201226-mysql-semi-sync-replication/</guid>
      <description>MySQL 半同步复制(semi-sync-replication) semi-sync-replication介绍 MySQL 5.5 开始引入半同步复制支持，5.5之</description>
    </item>
    
    <item>
      <title>[宋词] 《虞美人》</title>
      <link>https://piaohua.github.io/post/chinese/20201226-poetry-songci/</link>
      <pubDate>Sat, 26 Dec 2020 12:20:29 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20201226-poetry-songci/</guid>
      <description>《虞美人》南唐·李煜 春花秋月何时了？往事知多少。 小楼昨夜又东风，故国不堪回首月明中。 雕栏玉砌应犹在，只是朱颜改。 问君能有几多愁？恰似一江春水</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Character</title>
      <link>https://piaohua.github.io/post/mysql/20201226-mysql-character/</link>
      <pubDate>Sat, 26 Dec 2020 10:18:24 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20201226-mysql-character/</guid>
      <description>Mysql 字符集(Character) 介绍 字符集介绍 MySQL支持多种字符集，不同字符集有区别；广泛使用是utf8和utf8mb4。 utf8是utf</description>
    </item>
    
    <item>
      <title>[MySQL] Mysql Binlog 操作命令</title>
      <link>https://piaohua.github.io/post/mysql/20201122-mysql-binlog/</link>
      <pubDate>Sun, 22 Nov 2020 23:17:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20201122-mysql-binlog/</guid>
      <description>Mysql Binlog 日志 使用场景 MySQL主从复制，Master节点开启binlog日志记录，然后同步到slave节点 MySQL数据恢复，使用mysqlbi</description>
    </item>
    
    <item>
      <title>[Go] Golang 标准命令</title>
      <link>https://piaohua.github.io/post/golang/20200929-golang-command/</link>
      <pubDate>Tue, 29 Sep 2020 00:10:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200929-golang-command/</guid>
      <description>Golang 标准命令 go build 在编译只包含库源码文件的代码包时，只会检查性的编译，不会输出任何结果文件 在编译命令源码文件时，生成可执行包 go build会忽略目</description>
    </item>
    
    <item>
      <title>[Go] golang io.Reader数据读取</title>
      <link>https://piaohua.github.io/post/golang/20200927-golang-io-reader/</link>
      <pubDate>Sun, 27 Sep 2020 15:48:16 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200927-golang-io-reader/</guid>
      <description>golang 从 io.Reader 读取数据 io.Reader 1 2 3 type Reader interface { Read(p []byte) (n int, err error) } Reader接口用于包装基本的读取方法。 Read方法读取len(p)字节数据写入p。它返回写入的</description>
    </item>
    
    <item>
      <title>[Go] golang plugin插件使用</title>
      <link>https://piaohua.github.io/post/golang/20200924-golang-plugin/</link>
      <pubDate>Thu, 24 Sep 2020 22:10:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200924-golang-plugin/</guid>
      <description>Package plugin implements loading and symbol resolution of Go plugins. Golang是静态编译型语言，在编译时就将所有引用的包（库）全部加载打包到最终的可执行程序（或库文件）中， 因此并不能在运</description>
    </item>
    
    <item>
      <title>[Go] golang 和 C 语言相互调用</title>
      <link>https://piaohua.github.io/post/golang/20200920-golang-cgo/</link>
      <pubDate>Sun, 20 Sep 2020 13:03:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200920-golang-cgo/</guid>
      <description>cgo 提供了 golang 和 C 语言相互调用的机制 cgo使用需要安装gcc 1 2 3 4 5 6 &amp;gt; gcc -v Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 Apple LLVM version 9.0.0 (clang-900.0.39.2) Target: x86_64-apple-darwin17.4.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin 通过import &amp;quot;C&amp;q</description>
    </item>
    
    <item>
      <title>[Go] 使用二进制形式发布go package</title>
      <link>https://piaohua.github.io/post/golang/20200920-golang-binary-package/</link>
      <pubDate>Sun, 20 Sep 2020 10:32:33 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200920-golang-binary-package/</guid>
      <description>golang可以使用二进制形式发布包提供给第三方使用 提供一个编译好的库，同时为这个package提供一个源文件。这个源文件不用包含任何代码逻</description>
    </item>
    
    <item>
      <title>[Go] golang new和make的区别</title>
      <link>https://piaohua.github.io/post/golang/20200919-golang-new-make/</link>
      <pubDate>Sat, 19 Sep 2020 11:08:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200919-golang-new-make/</guid>
      <description>new 和 make 都可以用来分配空间，初始化类型 new和make的区别 new 用来分配内存，作用值类型和用户定义的类型，并初始化零值，返回零值指针 make 用来分配内</description>
    </item>
    
    <item>
      <title>[Go] golang build 编译文件</title>
      <link>https://piaohua.github.io/post/golang/20200916-golang-build-flags/</link>
      <pubDate>Wed, 16 Sep 2020 22:19:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200916-golang-build-flags/</guid>
      <description>go build 命令是用来编译 命令源码文件 以及它依赖的 库源码文件 go build介绍 go的代码源文件分类: 命令源码文件：含有 main 函数的主文件 测试源码文件：单元</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL索引优化总结</title>
      <link>https://piaohua.github.io/post/mysql/20200913-mysql-index-optimize/</link>
      <pubDate>Sun, 13 Sep 2020 17:54:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200913-mysql-index-optimize/</guid>
      <description>MySQL索引优化总结 什么是索引 索引（在MySQL中也叫“键key”）是存储引擎快速找到记录的一种数据结构。 - 《高性能MySQL》 索引类型 可</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL大表优化方案</title>
      <link>https://piaohua.github.io/post/mysql/20200913-mysql-large-table-scheme/</link>
      <pubDate>Sun, 13 Sep 2020 17:40:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200913-mysql-large-table-scheme/</guid>
      <description>MySQL大表优化方案 单表优化 字段 尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNS</description>
    </item>
    
    <item>
      <title>[Git] Git cherry-pick用法</title>
      <link>https://piaohua.github.io/post/git/20200913-git-cherry-pick/</link>
      <pubDate>Sun, 13 Sep 2020 15:08:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20200913-git-cherry-pick/</guid>
      <description>Git cherry-pick可以选择指定的若干commit进行合并 cherry-pick与merge、bease之间的最大区别是，cherry-</description>
    </item>
    
    <item>
      <title>[Go] Golang 官方包管理工具 mod 使用</title>
      <link>https://piaohua.github.io/post/golang/20200911-go-mod-usage/</link>
      <pubDate>Fri, 11 Sep 2020 21:57:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200911-go-mod-usage/</guid>
      <description>golang 1.11 开始新加入mod特性 mod用来替换旧版本基于GOPATH来指定构建项目的方式。 使用介绍 golang版本需要1.11或以上版本 设置GO11</description>
    </item>
    
    <item>
      <title>[Go] Golang 5种 Import Package 用法</title>
      <link>https://piaohua.github.io/post/golang/20200911-go-import-package-usages/</link>
      <pubDate>Fri, 11 Sep 2020 21:56:52 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200911-go-import-package-usages/</guid>
      <description>Golang Import Package Usages 在golang程序编译时，从main包开始依次导入其它引用包，当一个包被多个包同时导入时， 只会导入一次，当被导入的包又引用了其它包时</description>
    </item>
    
    <item>
      <title>[Linux] Supervisor Event功能</title>
      <link>https://piaohua.github.io/post/linux/20200909-linux-supervisor-event/</link>
      <pubDate>Wed, 09 Sep 2020 22:46:28 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200909-linux-supervisor-event/</guid>
      <description>Supervisor 是一个进程管理工具，在 3.0 版本之后，新增了 Event 的高级特性, 主要用做(进程启动、退出、失败等)事件告警服务 Event 特性是将监听的服务(listener</description>
    </item>
    
    <item>
      <title>[Linux] 进程监控工具supervisor使用</title>
      <link>https://piaohua.github.io/post/linux/20200908-linux-supervisor-launch-monitor/</link>
      <pubDate>Tue, 08 Sep 2020 23:20:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200908-linux-supervisor-launch-monitor/</guid>
      <description>supervisor是使用python开发的一个进程管工具 supervisor可以方便的监听、启动、停止、重启一个或多个进程。 并监控进程状态</description>
    </item>
    
    <item>
      <title>[Go] Golang 中信号(signal)处理</title>
      <link>https://piaohua.github.io/post/golang/20200907-golang-signal/</link>
      <pubDate>Mon, 07 Sep 2020 22:52:58 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200907-golang-signal/</guid>
      <description>Golang 中信号(signal)处理 Go信号通知机制可以通过往一个channel中发送 os.Signal 实现。 使用 signal.Notify 注册要接收的信号。signal.Stop 取消监听</description>
    </item>
    
    <item>
      <title>[Go] Golang Zookeeper 客户端操作</title>
      <link>https://piaohua.github.io/post/golang/20200906-golang-zookeeper/</link>
      <pubDate>Sun, 06 Sep 2020 15:53:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200906-golang-zookeeper/</guid>
      <description>Golang Zookeeper 客户端操作 golang zookeeper 常用客户端 go-zookeeper 文档说明 https://godoc.org/github.com/go-zookeeper/zk gozk 文档说明 https://wiki.ubuntu.com/gozk 连接zookeeper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/go-zookeeper/zk&amp;#34; ) func main() {</description>
    </item>
    
    <item>
      <title>[Linux] Socket 统计工具ss命令</title>
      <link>https://piaohua.github.io/post/linux/20200905-linux-ss/</link>
      <pubDate>Sat, 05 Sep 2020 12:07:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200905-linux-ss/</guid>
      <description>ss 命令用来统计系统 Socket 网络信息 ss是Socket Statistics的缩写。 ss命令可以用来获取socket统计信息，它可以显示和netsta</description>
    </item>
    
    <item>
      <title>[Git] git rebase 合并多个commit</title>
      <link>https://piaohua.github.io/post/git/20200905-git-rebase/</link>
      <pubDate>Sat, 05 Sep 2020 10:29:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20200905-git-rebase/</guid>
      <description>git rebase 合并多个commit git rebase命令在另一个分支基础之上重新应用，用于把一个分支的修改合并到当前分支。 使用语法 1 2 3 4 5 git rebase [-i | --interactive] [options] [--exec</description>
    </item>
    
    <item>
      <title>[Python] Learn python3 in one picture.</title>
      <link>https://piaohua.github.io/post/python/20200903-python3-in-one-pic/</link>
      <pubDate>Thu, 03 Sep 2020 23:46:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20200903-python3-in-one-pic/</guid>
      <description>Learn python3 in one picture. 离线版思维导图 示例 字典 1 2 3 4 5 ls = {s: len(s) for s in [&amp;#34;Python&amp;#34;, &amp;#34;Javascript&amp;#34;, &amp;#34;Golang&amp;#34;]} print(ls) sl = {v: k for k, v in ls.items()} print(sl) 装饰符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def log(f): def wrapper(): print(&amp;#34;Hey log~&amp;#34;)</description>
    </item>
    
    <item>
      <title>[Go] Zookeeper Client 数据结构详解</title>
      <link>https://piaohua.github.io/post/golang/20200902-golang-zookeeper/</link>
      <pubDate>Wed, 02 Sep 2020 22:40:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200902-golang-zookeeper/</guid>
      <description>Zookeeper 分布式应用的分布式协调服务 Zookeeper简介 ZooKeeper是一种为分布式应用所设计的高可用、高性能且一致的开源协调服务， 一些基本应</description>
    </item>
    
    <item>
      <title>[Vim] Vim 快捷键文档</title>
      <link>https://piaohua.github.io/post/vim/20200901-vim-cheat-sheet/</link>
      <pubDate>Tue, 01 Sep 2020 23:15:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200901-vim-cheat-sheet/</guid>
      <description>Vim 快捷键文档 vim keymap vim cheat sheet 参考 史上最全的 vim 快捷键文档</description>
    </item>
    
    <item>
      <title>[Vim] Vim快捷键键位图</title>
      <link>https://piaohua.github.io/post/vim/20200901-vim-all-vim-cheatsheat/</link>
      <pubDate>Tue, 01 Sep 2020 22:46:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200901-vim-all-vim-cheatsheat/</guid>
      <description>Vim快捷键键位图 经典版 简体中文版 不同编辑模式版 入门版 进阶版 增强版 文字版 参考 Vim快捷键键位图 史上最全Vim快捷键键位图</description>
    </item>
    
    <item>
      <title>[Go] Golang version命令的高级用法</title>
      <link>https://piaohua.github.io/post/golang/20200831-golang-version/</link>
      <pubDate>Mon, 31 Aug 2020 22:10:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200831-golang-version/</guid>
      <description>Golang version命令的高级用法 go version命令常用来查看Go版本和系统架构信息 查看Go版本信息 &amp;gt; go version go version go1.14 darwin/amd64 用法 使用help子命令查看任</description>
    </item>
    
    <item>
      <title>[Linux] lsof Command Examples</title>
      <link>https://piaohua.github.io/post/linux/20200830-linux-lsof-command-examples/</link>
      <pubDate>Sun, 30 Aug 2020 15:45:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200830-linux-lsof-command-examples/</guid>
      <description>lsof（list open files）是一个列出当前系统打开文件的工具。 用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)</description>
    </item>
    
    <item>
      <title>[Go] How to Efficiently Concatenate Strings in Go</title>
      <link>https://piaohua.github.io/post/golang/20200828-golang-how-to-efficiently-concatenate-strings-in-go/</link>
      <pubDate>Fri, 28 Aug 2020 22:27:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200828-golang-how-to-efficiently-concatenate-strings-in-go/</guid>
      <description>How to Efficiently Concatenate Strings in Go 7种拼接方式 String Concat 1 str += &amp;#34;hello-world&amp;#34; String Sprintf 1 str = fmt.Sprintf(&amp;#34;%s%s&amp;#34;, str, &amp;#34;hello-world&amp;#34;) String Join 1 str = strings.Join([]string{str, &amp;#34;hello-world&amp;#34;}, &amp;#34;&amp;#34;) Buffer Write 1 2 3 buf := new(bytes.Buffer) buf.WriteString(&amp;#34;hello-world&amp;#34;) str := buf.String() Bytes Append 1 2 3 4 var b []byte s := &amp;#34;hello-world&amp;#34; b = append(b, s...) str := string(b) String Copy 1 2</description>
    </item>
    
    <item>
      <title>[Linux] Linux查看物理CPU个数、核数、逻辑CPU个数、CPU信息</title>
      <link>https://piaohua.github.io/post/linux/20200827-linux-cpuinfo/</link>
      <pubDate>Thu, 27 Aug 2020 22:37:31 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200827-linux-cpuinfo/</guid>
      <description>Linux查看物理CPU个数、核数、逻辑CPU个数、CPU信息、内存信息 CPU信息 Linux系统中的CPU信息存在于/proc/cpuinf</description>
    </item>
    
    <item>
      <title>[Linux] Linux大文件查找和清空</title>
      <link>https://piaohua.github.io/post/linux/20200826-linux-big-file/</link>
      <pubDate>Wed, 26 Aug 2020 22:53:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200826-linux-big-file/</guid>
      <description>Linux 查看大文件和快速清空大文件 df 查看磁盘空间使用情况 Filesystem Size Used Avail Capacity iused ifree %iused Mounted on /dev/disk1s1 113Gi 90Gi 19Gi 83% 2074500 9223372036852701307 0% / devfs 201Ki 201Ki 0Bi 100% 696 0 100% /dev /dev/disk1s4 113Gi 3.0Gi 19Gi 14% 3 9223372036854775804 0% /private/var/vm map -hosts 0Bi 0Bi 0Bi 100% 0 0</description>
    </item>
    
    <item>
      <title>[Linux] Linux Commands In Structured Order with Detailed Reference</title>
      <link>https://piaohua.github.io/post/linux/20200826-linux-command-shelf/</link>
      <pubDate>Wed, 26 Aug 2020 22:25:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200826-linux-command-shelf/</guid>
      <description>Linux Commands In Structured Order with Detailed Reference
 SYSTEM $ uname –a =&amp;gt; Display linux system information $ uname –r =&amp;gt; Display kernel release information (refer uname command in detail) $ cat /etc/redhat_release =&amp;gt; Show which version of redhat installed $ uptime =&amp;gt; Show how long system running + load (learn uptime command) $ hostname =&amp;gt; Show system host name $ hostname -i =&amp;gt; Display the IP address of the host (all options hostname) $ last reboot =&amp;gt; Show system reboot history (more examples last command) $ date =&amp;gt; Show the current date and time (options of date command) $ cal =&amp;gt; Show this month calendar (what more in cal) $ w =&amp;gt; Display who is online (learn more about w command) $ whoami =&amp;gt; Who you are logged in as (example + sreenshots) $ finger user =&amp;gt; Display information about user (many options of finger command)  HARDWARE $ dmesg =&amp;gt; Detected hardware and boot messages (dmesg many more options) $ cat /proc/cpuinfo =&amp;gt; CPU model $ cat /proc/meminfo =&amp;gt; Hardware memory $ cat /proc/interrupts =&amp;gt; Lists the number of interrupts per CPU per I/O device $ lshw =&amp;gt; Displays information on hardware configuration of the system $ lsblk =&amp;gt; Displays block device related information in Linux (sudo yum install util-linux-ng) $ free -m =&amp;gt; Used and free memory (-m for MB) (free command in detail) $ lspci -tv =&amp;gt; Show PCI devices (very useful to find vendor ids) $ lsusb -tv =&amp;gt; Show USB devices (read more lsusb options) $ lshal =&amp;gt; Show a list of all devices with their properties $ dmidecode =&amp;gt; Show hardware info from the BIOS (vendor details) $ hdparm -i /dev/sda =&amp;gt; Show info about disk sda $ hdparm -tT /dev/sda =&amp;gt; Do a read speed test on disk sda $ badblocks -s /dev/sda =&amp;gt; Test for unreadable blocks on disk sda  STATISTICS $ top =&amp;gt; Display and update the top cpu processes (30 example options) $ mpstat 1 =&amp;gt; Display processors related statistics (learn mpstat command) $ vmstat 2 =&amp;gt; Display virtual memory statistics (very useful performance tool) $ iostat 2 =&amp;gt; Display I/O statistics (2sec Intervals) (more examples) $ tail -n 500 /var/log/messages =&amp;gt; Last 10 kernel/syslog messages (everyday use tail options) $ tcpdump -i eth1 =&amp;gt; Capture all packets flows on interface eth1 (useful to sort network issue) $ tcpdump -i eth0 &#39;port 80&#39; =&amp;gt; Monitor all traffic on port 80 ( HTTP ) $ lsof =&amp;gt; List all open files belonging to all active processes.</description>
    </item>
    
    <item>
      <title>[Linux] 常用日志文件和系统命令</title>
      <link>https://piaohua.github.io/post/linux/20200826-linux-common-cmd/</link>
      <pubDate>Wed, 26 Aug 2020 22:13:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200826-linux-common-cmd/</guid>
      <description>Linux 常用日志文件和系统命令 日志文件说明 /var/log/message 系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一 /var/log/secure 与安全相关的日志信息 /var/log/maillog 与邮件相关的</description>
    </item>
    
    <item>
      <title>[Linux] Linux使用/dev/urandom生成随机数</title>
      <link>https://piaohua.github.io/post/linux/20200825-linux-dev-urandom/</link>
      <pubDate>Tue, 25 Aug 2020 23:22:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200825-linux-dev-urandom/</guid>
      <description>Linux使用/dev/urandom生成随机数 介绍 /dev/random和/dev/urandom是Linux系统中提供的随机伪设备，这两</description>
    </item>
    
    <item>
      <title>[Linux] iptables常用示例</title>
      <link>https://piaohua.github.io/post/linux/20200824-linux-iptables-examples/</link>
      <pubDate>Mon, 24 Aug 2020 22:35:51 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200824-linux-iptables-examples/</guid>
      <description>Linux iptables常用示例 iptables简介 iptables是 Linux 内核集成的 IP 信息包过滤系统，用于对数据包的过滤和转发。 iptables的规</description>
    </item>
    
    <item>
      <title>[Linux] iptables SNAT DNAT</title>
      <link>https://piaohua.github.io/post/linux/20200823-linux-iptables-snat-dnat/</link>
      <pubDate>Sun, 23 Aug 2020 23:01:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200823-linux-iptables-snat-dnat/</guid>
      <description>Linux Iptables SNAT DNAT 任何一个IP数据包中，都有Source IP Address与Destination IP Address这两个字段， 路由器根据这两个字段来判定</description>
    </item>
    
    <item>
      <title>[Go] 一个Golang实现的MySQL协议库介绍</title>
      <link>https://piaohua.github.io/post/golang/20200822-golang-go-mysqlstack/</link>
      <pubDate>Sat, 22 Aug 2020 18:56:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200822-golang-go-mysqlstack/</guid>
      <description>go-mysqlstack is an MySQL protocol library implementing in Go (golang). 使用示例 下载 1 2 3 go get -u github.com/xelabs/go-mysqlstack/driver cd $GOPATH/src/github.com/xelabs/go-mysqlstack/ make test examples/mysqld.go mocks a MySQL server by running: 1 2 &amp;gt; go run mysqld.go 2020/08/22 19:01:44.518045 mysqld.go:102: [INFO] mysqld.server.start.address[:4407] examples/client.go mocks a client and query from the mock MySQL server: 1 2 &amp;gt; go run client.go 2020/08/22 19:01:50.530677 client.go:32: [INFO] results:[[[10 nice name]]] H</description>
    </item>
    
    <item>
      <title>[Go] 如何一步步提升Go生成随机字符串的效率</title>
      <link>https://piaohua.github.io/post/golang/20200822-golang-rand-string/</link>
      <pubDate>Sat, 22 Aug 2020 17:58:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200822-golang-rand-string/</guid>
      <description>逐步优化实现一个高效的随机字符串算法 来自stackoverflow上的一个问题:How to generate a random string of a fixed length in Go? 问题描述是：我想要一个随机的字符</description>
    </item>
    
    <item>
      <title>[TCP] TCP协议RST包介绍</title>
      <link>https://piaohua.github.io/post/learn/20200822-tcp-rst/</link>
      <pubDate>Sat, 22 Aug 2020 17:00:03 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20200822-tcp-rst/</guid>
      <description>TCP协议RST包介绍、出现场景 RST介绍 RST: TCP协议中重置、复位连接的标志位,用来关闭异常连接。 发送RST包关闭连接时，不等缓冲区的包发送</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Connection Phase Packets</title>
      <link>https://piaohua.github.io/post/mysql/20200821-mysql-connection-phase-packets/</link>
      <pubDate>Fri, 21 Aug 2020 23:40:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200821-mysql-connection-phase-packets/</guid>
      <description>MySQL Connection Phase Packets Initial Handshake Packet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 1 [0a] protocol version string[NUL] server version 4 connection id string[8] auth-plugin-data-part-1 1 [00] filler 2 capability flags (lower 2 bytes) if more data in the packet: 1 character set 2 status flags 2 capability flags (upper 2 bytes) if capabilities &amp;amp;</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Capability Flags</title>
      <link>https://piaohua.github.io/post/mysql/20200821-mysql-capability-flags/</link>
      <pubDate>Fri, 21 Aug 2020 00:07:17 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200821-mysql-capability-flags/</guid>
      <description>MySQL Capability Flags 简介 客户端和服务器使用权能标志来指示它们支持和想要使用的功能。 标志位名称 标志位 说明 CLIENT_LONG_PASSWORD 0x0001 new more secure passwords CLIENT_FOUND_ROWS 0x0002 Found instead of affected rows CLIENT_LONG_FLAG 0x0004 Get all column flags CLIENT_CONNECT_WITH_DB 0x0008 One can specify db on</description>
    </item>
    
    <item>
      <title>[Go] Golang Test 工具指令</title>
      <link>https://piaohua.github.io/post/golang/20200820-golang-test/</link>
      <pubDate>Thu, 20 Aug 2020 21:33:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200820-golang-test/</guid>
      <description>Golang Test 工具指令 简介 go test测试工具包含示例函数测试(ExampleXXX)、单元测试(TestXXX)、基准测试(BenchmarkXXX)</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL身份验证插件</title>
      <link>https://piaohua.github.io/post/mysql/20200818-mysql-plugin/</link>
      <pubDate>Tue, 18 Aug 2020 00:42:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200818-mysql-plugin/</guid>
      <description>MySQL身份验证插件(mysql_native_password、sha256_password、caching_sha2_passwor</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL配置文件my.cnf参数解释说明</title>
      <link>https://piaohua.github.io/post/mysql/20200817-mysql-my-cnf/</link>
      <pubDate>Mon, 17 Aug 2020 23:32:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200817-mysql-my-cnf/</guid>
      <description>MySQL配置文件my.cnf参数解释说明 参数说明 #BEGIN CONFIG INFO #DESCR: 4GB RAM, 只使用InnoDB, ACID, 少量的连接, 队列负载大 #TYPE: SYSTEM #END CONFIG INFO # # 此mysql配置文件</description>
    </item>
    
    <item>
      <title>[Go] Golang应用构建Docker镜像</title>
      <link>https://piaohua.github.io/post/docker/20200816-golang-docker/</link>
      <pubDate>Sun, 16 Aug 2020 23:15:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20200816-golang-docker/</guid>
      <description>Golang应用通过Dockerfile构建Docker镜像 构建镜像 构建一个go应用镜像，当前目录加载项目，编译生成二进制文件 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 内连接、外连接、左连接、右连接示例介绍</title>
      <link>https://piaohua.github.io/post/mysql/20200816-mysql-join/</link>
      <pubDate>Sun, 16 Aug 2020 12:57:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200816-mysql-join/</guid>
      <description>MySQL 内连接、左连接（左外连接）、右连接（右外连接） 创建示例表 1 2 3 4 5 6 7 8 9 10 11 CREATE TABLE `a_table` ( `a_id` int(11) DEFAULT NULL, `a_name` varchar(10) DEFAULT NULL, `a_part` varchar(10) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8 CREATE TABLE `b_table` ( `b_id` int(11) DEFAULT NULL, `b_name` varchar(10)</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL事务详情</title>
      <link>https://piaohua.github.io/post/mysql/20200816-mysql-transaction/</link>
      <pubDate>Sun, 16 Aug 2020 00:09:58 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200816-mysql-transaction/</guid>
      <description>数据库中的事务是指对数据库执行一批操作，这些操作最终要么全部执行成功，要么全部失败，不会存在部分成功的情况。 事务的特性(ACID) 原子性（A</description>
    </item>
    
    <item>
      <title>[Go] Golang 官方限流器time/rate使用</title>
      <link>https://piaohua.github.io/post/golang/20200815-golang-rate-limiter/</link>
      <pubDate>Sat, 15 Aug 2020 21:36:37 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200815-golang-rate-limiter/</guid>
      <description>time/rate是基于Token Bucket(令牌桶)算法实现的限流 限流 限制某个服务每秒的调用本服务的频率 客户端请求太多，超出服务端的服务</description>
    </item>
    
    <item>
      <title>[Go] Golang http.Client请求程序遇到 Connection Reset by Peer 或 EOF 问题</title>
      <link>https://piaohua.github.io/post/golang/20200814-golang-connection-reset-by-peer/</link>
      <pubDate>Fri, 14 Aug 2020 23:43:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200814-golang-connection-reset-by-peer/</guid>
      <description>Golang http.Client请求程序遇到Connection Reset by peer 或 EOF 问题 问题 线上服务经常规律性的出现http.Client请求服务器数据和上报</description>
    </item>
    
    <item>
      <title>[Hey] 基于Golang开发的一款类似Ab的压测工具</title>
      <link>https://piaohua.github.io/post/golang/20200814-golang-hey/</link>
      <pubDate>Fri, 14 Aug 2020 23:05:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200814-golang-hey/</guid>
      <description>Hey 基于Golang开发的一款类似Ab的压测工具 安装 MaxOS 安装 1 brew install hey golang源码编译安装 1 go get -u github.com/rakyll/hey 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>[Phabricator] 代码审查工具</title>
      <link>https://piaohua.github.io/post/tool/20200813-phabricator/</link>
      <pubDate>Thu, 13 Aug 2020 23:09:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20200813-phabricator/</guid>
      <description>Phabricator是Facebook开源的一个可视化的代码审查工具 安装 1 2 git clone https://github.com/phacility/libphutil.git git clone https://github.com/phacility/arcanist.git arc执行文件路径加载到系统路径并加载 1 2 3 source ~/.bash_profile arc</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL通过Sys库查看数据库运行情况</title>
      <link>https://piaohua.github.io/post/mysql/20200812-mysql-sys/</link>
      <pubDate>Wed, 12 Aug 2020 22:52:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200812-mysql-sys/</guid>
      <description>快捷的了解到MySQL的一些信息 sys库里面的表、视图、函数、存储过程可以使我们更方便、快捷的了解到MySQL的一些信息，比如哪些语句使用了</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL autocommit</title>
      <link>https://piaohua.github.io/post/mysql/20200812-mysql-autocommit/</link>
      <pubDate>Wed, 12 Aug 2020 22:24:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200812-mysql-autocommit/</guid>
      <description>MySQL autocommit 控制是否开启隐式事务 查看状态 mysql&amp;gt; show variables like &#39;%autocommit%&#39;; 开启自动提交 mysql&amp;gt; set autocommit=1; 关闭自动提交 使用commit提交事务操作，或者使用rollback回滚操作 配置文</description>
    </item>
    
    <item>
      <title>[Go] 一个Golang实现的MySQL基准测试工具</title>
      <link>https://piaohua.github.io/post/golang/20200812-golang-benchyou/</link>
      <pubDate>Wed, 12 Aug 2020 22:15:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200812-golang-benchyou/</guid>
      <description>benchyou is a benchmark tool for MySQL, similar Sysbench. Introduction benchyou is a benchmark tool for MySQL, real-time monitoring TPS and vmstat/iostat Build 1 2 3 $ git clone https://github.com/xelabs/benchyou $ cd benchyou $ make build Usage 1 $ ./bin/benchyou -h Examples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 prepare 64 tables: ./bin/benchyou --mysql-host=192.168.0.3</description>
    </item>
    
    <item>
      <title>[Go] Golang实现一个工作池</title>
      <link>https://piaohua.github.io/post/golang/20200811-golang-worker-pool/</link>
      <pubDate>Tue, 11 Aug 2020 23:02:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200811-golang-worker-pool/</guid>
      <description>Golang实现一个工作池处理并发任务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51</description>
    </item>
    
    <item>
      <title>[Go] Golang用Channel实现互斥锁</title>
      <link>https://piaohua.github.io/post/golang/20200810-golang-channel-lock/</link>
      <pubDate>Mon, 10 Aug 2020 22:23:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200810-golang-channel-lock/</guid>
      <description>使用长度为1的有缓冲channel实现互斥锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48</description>
    </item>
    
    <item>
      <title>[Go] Golang Quic</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-quic/</link>
      <pubDate>Sun, 09 Aug 2020 23:53:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-quic/</guid>
      <description>Quick UDP Internet Connection QUIC 概述 QUIC（Quick UDP Internet Connection，快速 UDP 互联网连接协议）是一种以 UDP 为底层传输协议，支持加密、多路复用，工作在用户空</description>
    </item>
    
    <item>
      <title>[Go] Golang 在编译时使用ldflags动态设置包中变量的值</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-ldflags/</link>
      <pubDate>Sun, 09 Aug 2020 18:25:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-ldflags/</guid>
      <description>Golang 在编译时使用ldflags动态设置包中变量的值 -X importpath.name=value Set the value of the string variable in importpath named name to value. Note that before Go 1.5 this option took two separate arguments. Now it takes one argument split on the first = sign. ldflags用于</description>
    </item>
    
    <item>
      <title>[Go] Golang Crc32 Packet</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-crc32-packet/</link>
      <pubDate>Sun, 09 Aug 2020 12:47:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-crc32-packet/</guid>
      <description>打包解包协议中应用crc32校验和 crc32 介绍 crc32包实现了32位循环冗余校验（CRC-32）的校验和算法; CRC全称为Cyclic Redundancy Chec</description>
    </item>
    
    <item>
      <title>[Go] Golang Adler32 Packet</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-adler32-packet/</link>
      <pubDate>Sun, 09 Aug 2020 12:47:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-adler32-packet/</guid>
      <description>打包解包协议中应用adler32校验和 adler32 介绍 Adler-32是Mark Adler发明的校验和算法，和32位CRC校验算法一样，都是保护数据防</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 连接数和状态查看</title>
      <link>https://piaohua.github.io/post/mysql/20200809-mysql-show-connections/</link>
      <pubDate>Sun, 09 Aug 2020 00:09:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200809-mysql-show-connections/</guid>
      <description>MySQL 连接数和状态查看 mysql的最大连接数默认是100, 最大可以达到16384 查看mysql服务器最大连接数 1 2 mysql&amp;gt; show variables like &amp;#39;%max_connections%&amp;#39;; mysql&amp;gt; select @@max_connections; 设置mysql</description>
    </item>
    
    <item>
      <title>[MySQL] 使用Sysbench对MySQL数据库性能压测</title>
      <link>https://piaohua.github.io/post/mysql/20200808-mysql-sysbench/</link>
      <pubDate>Sat, 08 Aug 2020 11:53:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200808-mysql-sysbench/</guid>
      <description>MySQL 基准测试 sysbench介绍 sysbench 是一个模块化的、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。 它主要包括以</description>
    </item>
    
    <item>
      <title>[Go] Golang Context</title>
      <link>https://piaohua.github.io/post/golang/20200808-golang-context/</link>
      <pubDate>Sat, 08 Aug 2020 11:53:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200808-golang-context/</guid>
      <description>Golang Context Context 接口 1 2 3 4 5 6 7 8 9 type Context interface { Deadline() (deadline time.Time, ok bool) Done() &amp;lt;-chan struct{} Err() error Value(key interface{}) interface{} } context包提供暴露Context接口可以在多个Goroutine共享数</description>
    </item>
    
    <item>
      <title>[Go] Golang Channel</title>
      <link>https://piaohua.github.io/post/golang/20200808-golang-channel/</link>
      <pubDate>Sat, 08 Aug 2020 11:52:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200808-golang-channel/</guid>
      <description>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating. 介绍 channel是GO语言级别提供的goroutine间的通信方式，channel是类型相关的，需要在声明channel</description>
    </item>
    
    <item>
      <title>[VIM] Vim实用小技巧</title>
      <link>https://piaohua.github.io/post/vim/20200807-vim-tips/</link>
      <pubDate>Fri, 07 Aug 2020 23:06:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200807-vim-tips/</guid>
      <description>Vim实用小技巧 插入递增数字 let i=0 | g/toPlaced/s//\=i/ |let i=i+1 这条命令由三部分组成： let i=1 和 let i=i+1 构成了一个变量递增的循环。 g命令用于全局查找一个字符串，并对此字符串</description>
    </item>
    
    <item>
      <title>[VIM] vim十六进制格式查看</title>
      <link>https://piaohua.github.io/post/vim/20200806-vim-hex-edit/</link>
      <pubDate>Fri, 07 Aug 2020 00:24:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200806-vim-hex-edit/</guid>
      <description>vim十六进制格式查看 xxd xxd是linux下一个显示、编辑、转换二进制命令 man xxd 查看帮助 DESCRIPTION xxd creates a hex dump of a given file or standard input. It can also convert a hex dump back to its original binary form. Like</description>
    </item>
    
    <item>
      <title>[VIM] Vim命令图解</title>
      <link>https://piaohua.github.io/post/vim/20200805-vim-cheat-sheet-full/</link>
      <pubDate>Thu, 06 Aug 2020 23:36:25 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200805-vim-cheat-sheet-full/</guid>
      <description>Vim命令图解 ref</description>
    </item>
    
    <item>
      <title>[VIM] 我的VIM配置</title>
      <link>https://piaohua.github.io/post/vim/20200805-my-config-vim/</link>
      <pubDate>Thu, 06 Aug 2020 23:23:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200805-my-config-vim/</guid>
      <description>我的Vim配置项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Affected Rows</title>
      <link>https://piaohua.github.io/post/mysql/20200805-mysql-affected-rows/</link>
      <pubDate>Wed, 05 Aug 2020 21:27:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200805-mysql-affected-rows/</guid>
      <description>MySQL INSERT/INSERT &amp;hellip; ON DUPLICATE KEY UPDATE Affected Rows 问题 问题描述 在INSERT/INSERT ... ON DUPLICATE KEY UPDATE操作时, 会存在MySQL连接client_flag是否设置CL</description>
    </item>
    
    <item>
      <title>[Mac] Mac OSX Keyword Cmd</title>
      <link>https://piaohua.github.io/post/tool/20200805-mac-osx-keyword-cmd/</link>
      <pubDate>Wed, 05 Aug 2020 00:07:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20200805-mac-osx-keyword-cmd/</guid>
      <description>Mac OSX 快捷键指令 mac 终端shell下把option键设置为alt键 打开终端，在终端shell菜单下选择偏好设置，选择描述文件选项卡， 选择一个终端</description>
    </item>
    
    <item>
      <title>[Git] 指令集</title>
      <link>https://piaohua.github.io/post/git/20180803.git.command/</link>
      <pubDate>Mon, 03 Aug 2020 21:21:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20180803.git.command/</guid>
      <description>Git常用操作命令 Clone仓库 # 获取一个仓库，支持多种协议(http/git/ssh) $ git clone https://git.kernel.org/pub/scm/git/git.git $ git clone git://git.kernel.org/pub/scm/git/git.git $ git clone user@server:path/to/repo.git # GitHub创建仓库提示代</description>
    </item>
    
    <item>
      <title>[helm] 基于github搭建helm repository</title>
      <link>https://piaohua.github.io/post/tool/helm_github/</link>
      <pubDate>Mon, 03 Aug 2020 00:12:45 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/helm_github/</guid>
      <description>基于github搭建helm repository 创建仓库 通过 https://github.com/new 创建一个 repository; 比如：https://github.com/piaohua/helm-charts 创建</description>
    </item>
    
    <item>
      <title>[里仁篇] My Blog</title>
      <link>https://piaohua.github.io/post/chinese/first/</link>
      <pubDate>Sun, 02 Aug 2020 11:14:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/first/</guid>
      <description>《论语 &amp;ndash; 里仁篇》不患无位，患所以立。不患莫己知，求为可知也。</description>
    </item>
    
    <item>
      <title>Theme preview</title>
      <link>https://piaohua.github.io/post/even-preview/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/even-preview/</guid>
      <description>Based on MarkdownPreview test.md. Markdown 1 2 3 4 5 6 7 8 # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 ### Duplicate Header ### Duplicate Header H1 H2 H3 H4 H5 H6 Duplicate Header Duplicate Header Paragraphs 1 2 3 4 This is a paragraph. I am still part of the paragraph. New paragraph. This is a paragraph. I am still part of the paragraph.</description>
    </item>
    
    <item>
      <title>[Erlang] Erlang Top</title>
      <link>https://piaohua.github.io/post/erlang/20140127-erlang-top/</link>
      <pubDate>Mon, 27 Jan 2014 14:47:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/erlang/20140127-erlang-top/</guid>
      <description>Erlang Top 1、在服务器运行中，经常会出现内存orCPU占用过高,可以通过top来查看 2、如果在Erlang虚拟机中出现单个进程占用过高或跑死循环了</description>
    </item>
    
    <item>
      <title>[Erlang] OTP gen_server起步</title>
      <link>https://piaohua.github.io/post/erlang/20131026-erlang-otp-gen_server/</link>
      <pubDate>Sat, 26 Oct 2013 14:52:35 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/erlang/20131026-erlang-otp-gen_server/</guid>
      <description>Erlang OTP gen_server起步 Erlang OTP/gen_server实现简单频道服务，没有用ETS表存储，在record中更新； 1、alloc/0:获</description>
    </item>
    
    <item>
      <title>This is a hidden post.</title>
      <link>https://piaohua.github.io/post/hidden-post/</link>
      <pubDate>Thu, 08 Mar 2018 17:40:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/hidden-post/</guid>
      <description>&lt;p&gt;This post is hidden from the home page.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[English] Creating a New Theme</title>
      <link>https://piaohua.github.io/post/english-preview/</link>
      <pubDate>Thu, 31 Aug 2017 15:43:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/english-preview/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>[日本語] 敬語体系</title>
      <link>https://piaohua.github.io/post/japanese-preview/</link>
      <pubDate>Wed, 30 Aug 2017 01:53:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/japanese-preview/</guid>
      <description>日本語の敬語体系は、一般に、大きく尊敬語・謙譲語・丁寧語に分類される。文化審議会国語分科会は、2007年2月に「敬語の指針」を答申し、これに</description>
    </item>
    
    <item>
      <title>[中文] 《长恨歌》</title>
      <link>https://piaohua.github.io/post/chinese-preview/</link>
      <pubDate>Wed, 30 Aug 2017 01:37:56 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese-preview/</guid>
      <description>《长恨歌》是中国唐朝诗人白居易的一首长篇叙事诗。 第一段：贵妃受宠爱 汉皇重色思倾国，御宇多年求不得。杨家有女初长成，养在深闺人未识。 天生丽质难</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://piaohua.github.io/post/shortcodes/</link>
      <pubDate>Tue, 30 Aug 2016 16:01:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/shortcodes/</guid>
      <description>&lt;h1 id=&#34;admonition&#34;&gt;Admonition&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;biu biu biu.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;{{% admonition note &amp;#34;I&amp;#39;m title!&amp;#34; false %}}
biu biu biu.

{{% admonition type=&amp;#34;note&amp;#34; title=&amp;#34;note&amp;#34; details=&amp;#34;true&amp;#34; %}}
biu biu biu.
{{% /admonition %}}

{{% admonition example %}}
Without title.
{{% /admonition %}}

{{% /admonition %}}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JS Flowchart Diagrams</title>
      <link>https://piaohua.github.io/post/js-flowchart-diagrams/</link>
      <pubDate>Wed, 04 Mar 2015 21:57:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/js-flowchart-diagrams/</guid>
      <description>&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;st=&amp;gt;start: Start|past:&amp;gt;http://www.google.com[blank]
e=&amp;gt;end: End:&amp;gt;http://www.google.com
op1=&amp;gt;operation: My Operation|past
op2=&amp;gt;operation: Stuff|current
sub1=&amp;gt;subroutine: My Subroutine|invalid
cond=&amp;gt;condition: Yes
or No?|approved:&amp;gt;http://www.google.com
c2=&amp;gt;condition: Good idea|rejected
io=&amp;gt;inputoutput: catch something...|request

st-&amp;gt;op1(right)-&amp;gt;cond
cond(yes, right)-&amp;gt;c2
cond(no)-&amp;gt;sub1(left)-&amp;gt;op1
c2(yes)-&amp;gt;io-&amp;gt;e
c2(no)-&amp;gt;op2-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JS Sequence Diagrams</title>
      <link>https://piaohua.github.io/post/js-sequence-diagrams/</link>
      <pubDate>Wed, 04 Mar 2015 21:57:45 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/js-sequence-diagrams/</guid>
      <description>&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Andrew-&amp;gt;China: Says Hello
Note right of China: China thinks\nabout it
China--&amp;gt;Andrew: How are you?
Andrew-&amp;gt;&amp;gt;China: I am good thanks!
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Syntax Highlighting</title>
      <link>https://piaohua.github.io/post/syntax-highlighting/</link>
      <pubDate>Tue, 30 Aug 2011 16:01:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/syntax-highlighting/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helloWorld&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>