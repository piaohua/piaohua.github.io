<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/post/</link>
    <description>Recent content in Posts on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Jan 2021 11:58:39 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[唐诗] 《元日感怀》</title>
      <link>https://piaohua.github.io/post/chinese/20210101-poetry-tang-liuyuxi/</link>
      <pubDate>Fri, 01 Jan 2021 11:58:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20210101-poetry-tang-liuyuxi/</guid>
      <description>《元日感怀》唐·刘禹锡 振蛰春潜至，湘南人未归。 身加一日长，心觉去年非。 燎火委虚烬，儿童炫彩衣。 异乡无旧识，车马到门稀。</description>
    </item>
    
    <item>
      <title>[Git] git commit 输入 message 方式和规范</title>
      <link>https://piaohua.github.io/post/git/20201231-git-commit-message/</link>
      <pubDate>Thu, 31 Dec 2020 19:50:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20201231-git-commit-message/</guid>
      <description>git commit 输入 message 方式和规范 方式 常见的-m &amp;lt;msg&amp;gt;单行输入 git commit -m &amp;quot;message&amp;quot; . 当要输入多行时，可以不带参数，直接使用git commit会启动默认</description>
    </item>
    
    <item>
      <title>[唐诗] 《问刘十九》</title>
      <link>https://piaohua.github.io/post/chinese/20201230-poetry-tang-baijuyi/</link>
      <pubDate>Wed, 30 Dec 2020 21:41:24 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20201230-poetry-tang-baijuyi/</guid>
      <description>《问刘十九》唐·白居易 绿蚁新醅酒，红泥小火炉。 晚来天欲雪，能饮一杯无？</description>
    </item>
    
    <item>
      <title>[宋词] 《苏幕遮·燎沉香》</title>
      <link>https://piaohua.github.io/post/chinese/20201229-poetry-songci/</link>
      <pubDate>Tue, 29 Dec 2020 21:33:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20201229-poetry-songci/</guid>
      <description>《苏幕遮·燎沉香》 北宋·周邦彦 燎沈香，消溽暑。 鸟雀呼晴，侵晓窥檐语。 叶上初阳干宿雨，水面清圆，一一风荷举。 故乡遥，何日去？ 家住吴门，久作长安</description>
    </item>
    
    <item>
      <title>[Git] Git 代码回滚操作(reset/revert/checkout)</title>
      <link>https://piaohua.github.io/post/git/20201228-git-reset/</link>
      <pubDate>Mon, 28 Dec 2020 22:44:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20201228-git-reset/</guid>
      <description>Git 代码回滚操作 git reset的理解 git reset 直接把之前 commit 删掉，非 git reset --hard 的操作是不会删掉 git reset 参数定义 --soft 回退后分支修改的代码被保留并标记为add的状态（</description>
    </item>
    
    <item>
      <title>[宋词] 《虞美人 · 听雨》</title>
      <link>https://piaohua.github.io/post/chinese/20201227-poetry-songci-tingyu/</link>
      <pubDate>Sun, 27 Dec 2020 11:56:31 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20201227-poetry-songci-tingyu/</guid>
      <description>《虞美人 · 听雨》南宋·蒋捷 少年听雨歌楼上，红烛昏罗账。 壮年听雨客舟中，江阔云低，断雁叫西风。 而今听雨僧庐下，鬓已星星也。 悲欢离合总无情，一任</description>
    </item>
    
    <item>
      <title>[GCC] gcc和g&#43;&#43;是什么</title>
      <link>https://piaohua.github.io/post/tool/20201127-gcc-g&#43;&#43;/</link>
      <pubDate>Sun, 27 Dec 2020 10:41:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20201127-gcc-g&#43;&#43;/</guid>
      <description>gcc和g++是什么 gcc和g++区别介绍 通常习惯使用gcc编译c语言程序，使用g++编译c++语言程序； gcc是GCC编译器的通用编译指令</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 半同步复制(semi_sync_replication)</title>
      <link>https://piaohua.github.io/post/mysql/20201226-mysql-semi-sync-replication/</link>
      <pubDate>Sat, 26 Dec 2020 16:32:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20201226-mysql-semi-sync-replication/</guid>
      <description>MySQL 半同步复制(semi-sync-replication) semi-sync-replication介绍 MySQL 5.5 开始引入半同步复制支持，5.5之</description>
    </item>
    
    <item>
      <title>[宋词] 《虞美人》</title>
      <link>https://piaohua.github.io/post/chinese/20201226-poetry-songci/</link>
      <pubDate>Sat, 26 Dec 2020 12:20:29 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/20201226-poetry-songci/</guid>
      <description>《虞美人》南唐·李煜 春花秋月何时了？往事知多少。 小楼昨夜又东风，故国不堪回首月明中。 雕栏玉砌应犹在，只是朱颜改。 问君能有几多愁？恰似一江春水</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Character</title>
      <link>https://piaohua.github.io/post/mysql/20201226-mysql-character/</link>
      <pubDate>Sat, 26 Dec 2020 10:18:24 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20201226-mysql-character/</guid>
      <description>Mysql 字符集(Character) 介绍 字符集介绍 MySQL支持多种字符集，不同字符集有区别；广泛使用是utf8和utf8mb4。 utf8是utf</description>
    </item>
    
    <item>
      <title>[MySQL] Mysql Binlog 操作命令</title>
      <link>https://piaohua.github.io/post/mysql/20201122-mysql-binlog/</link>
      <pubDate>Sun, 22 Nov 2020 23:17:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20201122-mysql-binlog/</guid>
      <description>Mysql Binlog 日志 使用场景 MySQL主从复制，Master节点开启binlog日志记录，然后同步到slave节点 MySQL数据恢复，使用mysqlbi</description>
    </item>
    
    <item>
      <title>[Go] Golang 标准命令</title>
      <link>https://piaohua.github.io/post/golang/20200929-golang-command/</link>
      <pubDate>Tue, 29 Sep 2020 00:10:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200929-golang-command/</guid>
      <description>Golang 标准命令 go build 在编译只包含库源码文件的代码包时，只会检查性的编译，不会输出任何结果文件 在编译命令源码文件时，生成可执行包 go build会忽略目</description>
    </item>
    
    <item>
      <title>[Go] golang io.Reader数据读取</title>
      <link>https://piaohua.github.io/post/golang/20200927-golang-io-reader/</link>
      <pubDate>Sun, 27 Sep 2020 15:48:16 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200927-golang-io-reader/</guid>
      <description>golang 从 io.Reader 读取数据 io.Reader 1 2 3 type Reader interface { Read(p []byte) (n int, err error) } Reader接口用于包装基本的读取方法。 Read方法读取len(p)字节数据写入p。它返回写入的</description>
    </item>
    
    <item>
      <title>[Go] golang plugin插件使用</title>
      <link>https://piaohua.github.io/post/golang/20200924-golang-plugin/</link>
      <pubDate>Thu, 24 Sep 2020 22:10:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200924-golang-plugin/</guid>
      <description>Package plugin implements loading and symbol resolution of Go plugins. Golang是静态编译型语言，在编译时就将所有引用的包（库）全部加载打包到最终的可执行程序（或库文件）中， 因此并不能在运</description>
    </item>
    
    <item>
      <title>[Go] golang 和 C 语言相互调用</title>
      <link>https://piaohua.github.io/post/golang/20200920-golang-cgo/</link>
      <pubDate>Sun, 20 Sep 2020 13:03:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200920-golang-cgo/</guid>
      <description>cgo 提供了 golang 和 C 语言相互调用的机制 cgo使用需要安装gcc 1 2 3 4 5 6 &amp;gt; gcc -v Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 Apple LLVM version 9.0.0 (clang-900.0.39.2) Target: x86_64-apple-darwin17.4.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin 通过import &amp;quot;C&amp;q</description>
    </item>
    
    <item>
      <title>[Go] 使用二进制形式发布go package</title>
      <link>https://piaohua.github.io/post/golang/20200920-golang-binary-package/</link>
      <pubDate>Sun, 20 Sep 2020 10:32:33 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200920-golang-binary-package/</guid>
      <description>golang可以使用二进制形式发布包提供给第三方使用 提供一个编译好的库，同时为这个package提供一个源文件。这个源文件不用包含任何代码逻</description>
    </item>
    
    <item>
      <title>[Go] golang new和make的区别</title>
      <link>https://piaohua.github.io/post/golang/20200919-golang-new-make/</link>
      <pubDate>Sat, 19 Sep 2020 11:08:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200919-golang-new-make/</guid>
      <description>new 和 make 都可以用来分配空间，初始化类型 new和make的区别 new 用来分配内存，作用值类型和用户定义的类型，并初始化零值，返回零值指针 make 用来分配内</description>
    </item>
    
    <item>
      <title>[Go] golang build 编译文件</title>
      <link>https://piaohua.github.io/post/golang/20200916-golang-build-flags/</link>
      <pubDate>Wed, 16 Sep 2020 22:19:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200916-golang-build-flags/</guid>
      <description>go build 命令是用来编译 命令源码文件 以及它依赖的 库源码文件 go build介绍 go的代码源文件分类: 命令源码文件：含有 main 函数的主文件 测试源码文件：单元</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL索引优化总结</title>
      <link>https://piaohua.github.io/post/mysql/20200913-mysql-index-optimize/</link>
      <pubDate>Sun, 13 Sep 2020 17:54:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200913-mysql-index-optimize/</guid>
      <description>MySQL索引优化总结 什么是索引 索引（在MySQL中也叫“键key”）是存储引擎快速找到记录的一种数据结构。 - 《高性能MySQL》 索引类型 可</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL大表优化方案</title>
      <link>https://piaohua.github.io/post/mysql/20200913-mysql-large-table-scheme/</link>
      <pubDate>Sun, 13 Sep 2020 17:40:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200913-mysql-large-table-scheme/</guid>
      <description>MySQL大表优化方案 单表优化 字段 尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNS</description>
    </item>
    
    <item>
      <title>[Git] Git cherry-pick用法</title>
      <link>https://piaohua.github.io/post/git/20200913-git-cherry-pick/</link>
      <pubDate>Sun, 13 Sep 2020 15:08:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20200913-git-cherry-pick/</guid>
      <description>Git cherry-pick可以选择指定的若干commit进行合并 cherry-pick与merge、bease之间的最大区别是，cherry-</description>
    </item>
    
    <item>
      <title>[Go] Golang 官方包管理工具 mod 使用</title>
      <link>https://piaohua.github.io/post/golang/20200911-go-mod-usage/</link>
      <pubDate>Fri, 11 Sep 2020 21:57:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200911-go-mod-usage/</guid>
      <description>golang 1.11 开始新加入mod特性 mod用来替换旧版本基于GOPATH来指定构建项目的方式。 使用介绍 golang版本需要1.11或以上版本 设置GO11</description>
    </item>
    
    <item>
      <title>[Go] Golang 5种 Import Package 用法</title>
      <link>https://piaohua.github.io/post/golang/20200911-go-import-package-usages/</link>
      <pubDate>Fri, 11 Sep 2020 21:56:52 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200911-go-import-package-usages/</guid>
      <description>Golang Import Package Usages 在golang程序编译时，从main包开始依次导入其它引用包，当一个包被多个包同时导入时， 只会导入一次，当被导入的包又引用了其它包时</description>
    </item>
    
    <item>
      <title>[Linux] Supervisor Event功能</title>
      <link>https://piaohua.github.io/post/linux/20200909-linux-supervisor-event/</link>
      <pubDate>Wed, 09 Sep 2020 22:46:28 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200909-linux-supervisor-event/</guid>
      <description>Supervisor 是一个进程管理工具，在 3.0 版本之后，新增了 Event 的高级特性, 主要用做(进程启动、退出、失败等)事件告警服务 Event 特性是将监听的服务(listener</description>
    </item>
    
    <item>
      <title>[Linux] 进程监控工具supervisor使用</title>
      <link>https://piaohua.github.io/post/linux/20200908-linux-supervisor-launch-monitor/</link>
      <pubDate>Tue, 08 Sep 2020 23:20:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200908-linux-supervisor-launch-monitor/</guid>
      <description>supervisor是使用python开发的一个进程管工具 supervisor可以方便的监听、启动、停止、重启一个或多个进程。 并监控进程状态</description>
    </item>
    
    <item>
      <title>[Go] Golang 中信号(signal)处理</title>
      <link>https://piaohua.github.io/post/golang/20200907-golang-signal/</link>
      <pubDate>Mon, 07 Sep 2020 22:52:58 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200907-golang-signal/</guid>
      <description>Golang 中信号(signal)处理 Go信号通知机制可以通过往一个channel中发送 os.Signal 实现。 使用 signal.Notify 注册要接收的信号。signal.Stop 取消监听</description>
    </item>
    
    <item>
      <title>[Go] Golang Zookeeper 客户端操作</title>
      <link>https://piaohua.github.io/post/golang/20200906-golang-zookeeper/</link>
      <pubDate>Sun, 06 Sep 2020 15:53:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200906-golang-zookeeper/</guid>
      <description>Golang Zookeeper 客户端操作 golang zookeeper 常用客户端 go-zookeeper 文档说明 https://godoc.org/github.com/go-zookeeper/zk gozk 文档说明 https://wiki.ubuntu.com/gozk 连接zookeeper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/go-zookeeper/zk&amp;#34; ) func main() {</description>
    </item>
    
    <item>
      <title>[Linux] Socket 统计工具ss命令</title>
      <link>https://piaohua.github.io/post/linux/20200905-linux-ss/</link>
      <pubDate>Sat, 05 Sep 2020 12:07:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200905-linux-ss/</guid>
      <description>ss 命令用来统计系统 Socket 网络信息 ss是Socket Statistics的缩写。 ss命令可以用来获取socket统计信息，它可以显示和netsta</description>
    </item>
    
    <item>
      <title>[Git] git rebase 合并多个commit</title>
      <link>https://piaohua.github.io/post/git/20200905-git-rebase/</link>
      <pubDate>Sat, 05 Sep 2020 10:29:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20200905-git-rebase/</guid>
      <description>git rebase 合并多个commit git rebase命令在另一个分支基础之上重新应用，用于把一个分支的修改合并到当前分支。 使用语法 1 2 3 4 5 git rebase [-i | --interactive] [options] [--exec</description>
    </item>
    
    <item>
      <title>[Python] Learn python3 in one picture.</title>
      <link>https://piaohua.github.io/post/python/20200903-python3-in-one-pic/</link>
      <pubDate>Thu, 03 Sep 2020 23:46:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20200903-python3-in-one-pic/</guid>
      <description>Learn python3 in one picture. 离线版思维导图 示例 字典 1 2 3 4 5 ls = {s: len(s) for s in [&amp;#34;Python&amp;#34;, &amp;#34;Javascript&amp;#34;, &amp;#34;Golang&amp;#34;]} print(ls) sl = {v: k for k, v in ls.items()} print(sl) 装饰符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def log(f): def wrapper(): print(&amp;#34;Hey log~&amp;#34;)</description>
    </item>
    
    <item>
      <title>[Go] Zookeeper Client 数据结构详解</title>
      <link>https://piaohua.github.io/post/golang/20200902-golang-zookeeper/</link>
      <pubDate>Wed, 02 Sep 2020 22:40:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200902-golang-zookeeper/</guid>
      <description>Zookeeper 分布式应用的分布式协调服务 Zookeeper简介 ZooKeeper是一种为分布式应用所设计的高可用、高性能且一致的开源协调服务， 一些基本应</description>
    </item>
    
    <item>
      <title>[Vim] Vim 快捷键文档</title>
      <link>https://piaohua.github.io/post/vim/20200901-vim-cheat-sheet/</link>
      <pubDate>Tue, 01 Sep 2020 23:15:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200901-vim-cheat-sheet/</guid>
      <description>Vim 快捷键文档 vim keymap vim cheat sheet 参考 史上最全的 vim 快捷键文档</description>
    </item>
    
    <item>
      <title>[Vim] Vim快捷键键位图</title>
      <link>https://piaohua.github.io/post/vim/20200901-vim-all-vim-cheatsheat/</link>
      <pubDate>Tue, 01 Sep 2020 22:46:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200901-vim-all-vim-cheatsheat/</guid>
      <description>Vim快捷键键位图 经典版 简体中文版 不同编辑模式版 入门版 进阶版 增强版 文字版 参考 Vim快捷键键位图 史上最全Vim快捷键键位图</description>
    </item>
    
    <item>
      <title>[Go] Golang version命令的高级用法</title>
      <link>https://piaohua.github.io/post/golang/20200831-golang-version/</link>
      <pubDate>Mon, 31 Aug 2020 22:10:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200831-golang-version/</guid>
      <description>Golang version命令的高级用法 go version命令常用来查看Go版本和系统架构信息 查看Go版本信息 &amp;gt; go version go version go1.14 darwin/amd64 用法 使用help子命令查看任</description>
    </item>
    
    <item>
      <title>[Linux] lsof Command Examples</title>
      <link>https://piaohua.github.io/post/linux/20200830-linux-lsof-command-examples/</link>
      <pubDate>Sun, 30 Aug 2020 15:45:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200830-linux-lsof-command-examples/</guid>
      <description>lsof（list open files）是一个列出当前系统打开文件的工具。 用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)</description>
    </item>
    
    <item>
      <title>[Go] How to Efficiently Concatenate Strings in Go</title>
      <link>https://piaohua.github.io/post/golang/20200828-golang-how-to-efficiently-concatenate-strings-in-go/</link>
      <pubDate>Fri, 28 Aug 2020 22:27:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200828-golang-how-to-efficiently-concatenate-strings-in-go/</guid>
      <description>How to Efficiently Concatenate Strings in Go 7种拼接方式 String Concat 1 str += &amp;#34;hello-world&amp;#34; String Sprintf 1 str = fmt.Sprintf(&amp;#34;%s%s&amp;#34;, str, &amp;#34;hello-world&amp;#34;) String Join 1 str = strings.Join([]string{str, &amp;#34;hello-world&amp;#34;}, &amp;#34;&amp;#34;) Buffer Write 1 2 3 buf := new(bytes.Buffer) buf.WriteString(&amp;#34;hello-world&amp;#34;) str := buf.String() Bytes Append 1 2 3 4 var b []byte s := &amp;#34;hello-world&amp;#34; b = append(b, s...) str := string(b) String Copy 1 2</description>
    </item>
    
    <item>
      <title>[Linux] Linux查看物理CPU个数、核数、逻辑CPU个数、CPU信息</title>
      <link>https://piaohua.github.io/post/linux/20200827-linux-cpuinfo/</link>
      <pubDate>Thu, 27 Aug 2020 22:37:31 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200827-linux-cpuinfo/</guid>
      <description>Linux查看物理CPU个数、核数、逻辑CPU个数、CPU信息、内存信息 CPU信息 Linux系统中的CPU信息存在于/proc/cpuinf</description>
    </item>
    
    <item>
      <title>[Linux] Linux大文件查找和清空</title>
      <link>https://piaohua.github.io/post/linux/20200826-linux-big-file/</link>
      <pubDate>Wed, 26 Aug 2020 22:53:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200826-linux-big-file/</guid>
      <description>Linux 查看大文件和快速清空大文件 df 查看磁盘空间使用情况 Filesystem Size Used Avail Capacity iused ifree %iused Mounted on /dev/disk1s1 113Gi 90Gi 19Gi 83% 2074500 9223372036852701307 0% / devfs 201Ki 201Ki 0Bi 100% 696 0 100% /dev /dev/disk1s4 113Gi 3.0Gi 19Gi 14% 3 9223372036854775804 0% /private/var/vm map -hosts 0Bi 0Bi 0Bi 100% 0 0</description>
    </item>
    
    <item>
      <title>[Linux] Linux Commands In Structured Order with Detailed Reference</title>
      <link>https://piaohua.github.io/post/linux/20200826-linux-command-shelf/</link>
      <pubDate>Wed, 26 Aug 2020 22:25:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200826-linux-command-shelf/</guid>
      <description>Linux Commands In Structured Order with Detailed Reference
 SYSTEM $ uname –a =&amp;gt; Display linux system information $ uname –r =&amp;gt; Display kernel release information (refer uname command in detail) $ cat /etc/redhat_release =&amp;gt; Show which version of redhat installed $ uptime =&amp;gt; Show how long system running + load (learn uptime command) $ hostname =&amp;gt; Show system host name $ hostname -i =&amp;gt; Display the IP address of the host (all options hostname) $ last reboot =&amp;gt; Show system reboot history (more examples last command) $ date =&amp;gt; Show the current date and time (options of date command) $ cal =&amp;gt; Show this month calendar (what more in cal) $ w =&amp;gt; Display who is online (learn more about w command) $ whoami =&amp;gt; Who you are logged in as (example + sreenshots) $ finger user =&amp;gt; Display information about user (many options of finger command)  HARDWARE $ dmesg =&amp;gt; Detected hardware and boot messages (dmesg many more options) $ cat /proc/cpuinfo =&amp;gt; CPU model $ cat /proc/meminfo =&amp;gt; Hardware memory $ cat /proc/interrupts =&amp;gt; Lists the number of interrupts per CPU per I/O device $ lshw =&amp;gt; Displays information on hardware configuration of the system $ lsblk =&amp;gt; Displays block device related information in Linux (sudo yum install util-linux-ng) $ free -m =&amp;gt; Used and free memory (-m for MB) (free command in detail) $ lspci -tv =&amp;gt; Show PCI devices (very useful to find vendor ids) $ lsusb -tv =&amp;gt; Show USB devices (read more lsusb options) $ lshal =&amp;gt; Show a list of all devices with their properties $ dmidecode =&amp;gt; Show hardware info from the BIOS (vendor details) $ hdparm -i /dev/sda =&amp;gt; Show info about disk sda $ hdparm -tT /dev/sda =&amp;gt; Do a read speed test on disk sda $ badblocks -s /dev/sda =&amp;gt; Test for unreadable blocks on disk sda  STATISTICS $ top =&amp;gt; Display and update the top cpu processes (30 example options) $ mpstat 1 =&amp;gt; Display processors related statistics (learn mpstat command) $ vmstat 2 =&amp;gt; Display virtual memory statistics (very useful performance tool) $ iostat 2 =&amp;gt; Display I/O statistics (2sec Intervals) (more examples) $ tail -n 500 /var/log/messages =&amp;gt; Last 10 kernel/syslog messages (everyday use tail options) $ tcpdump -i eth1 =&amp;gt; Capture all packets flows on interface eth1 (useful to sort network issue) $ tcpdump -i eth0 &#39;port 80&#39; =&amp;gt; Monitor all traffic on port 80 ( HTTP ) $ lsof =&amp;gt; List all open files belonging to all active processes.</description>
    </item>
    
    <item>
      <title>[Linux] 常用日志文件和系统命令</title>
      <link>https://piaohua.github.io/post/linux/20200826-linux-common-cmd/</link>
      <pubDate>Wed, 26 Aug 2020 22:13:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200826-linux-common-cmd/</guid>
      <description>Linux 常用日志文件和系统命令 日志文件说明 /var/log/message 系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一 /var/log/secure 与安全相关的日志信息 /var/log/maillog 与邮件相关的</description>
    </item>
    
    <item>
      <title>[Linux] Linux使用/dev/urandom生成随机数</title>
      <link>https://piaohua.github.io/post/linux/20200825-linux-dev-urandom/</link>
      <pubDate>Tue, 25 Aug 2020 23:22:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200825-linux-dev-urandom/</guid>
      <description>Linux使用/dev/urandom生成随机数 介绍 /dev/random和/dev/urandom是Linux系统中提供的随机伪设备，这两</description>
    </item>
    
    <item>
      <title>[Linux] iptables常用示例</title>
      <link>https://piaohua.github.io/post/linux/20200824-linux-iptables-examples/</link>
      <pubDate>Mon, 24 Aug 2020 22:35:51 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200824-linux-iptables-examples/</guid>
      <description>Linux iptables常用示例 iptables简介 iptables是 Linux 内核集成的 IP 信息包过滤系统，用于对数据包的过滤和转发。 iptables的规</description>
    </item>
    
    <item>
      <title>[Linux] iptables SNAT DNAT</title>
      <link>https://piaohua.github.io/post/linux/20200823-linux-iptables-snat-dnat/</link>
      <pubDate>Sun, 23 Aug 2020 23:01:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/linux/20200823-linux-iptables-snat-dnat/</guid>
      <description>Linux Iptables SNAT DNAT 任何一个IP数据包中，都有Source IP Address与Destination IP Address这两个字段， 路由器根据这两个字段来判定</description>
    </item>
    
    <item>
      <title>[Go] 一个Golang实现的MySQL协议库介绍</title>
      <link>https://piaohua.github.io/post/golang/20200822-golang-go-mysqlstack/</link>
      <pubDate>Sat, 22 Aug 2020 18:56:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200822-golang-go-mysqlstack/</guid>
      <description>go-mysqlstack is an MySQL protocol library implementing in Go (golang). 使用示例 下载 1 2 3 go get -u github.com/xelabs/go-mysqlstack/driver cd $GOPATH/src/github.com/xelabs/go-mysqlstack/ make test examples/mysqld.go mocks a MySQL server by running: 1 2 &amp;gt; go run mysqld.go 2020/08/22 19:01:44.518045 mysqld.go:102: [INFO] mysqld.server.start.address[:4407] examples/client.go mocks a client and query from the mock MySQL server: 1 2 &amp;gt; go run client.go 2020/08/22 19:01:50.530677 client.go:32: [INFO] results:[[[10 nice name]]] H</description>
    </item>
    
    <item>
      <title>[Go] 如何一步步提升Go生成随机字符串的效率</title>
      <link>https://piaohua.github.io/post/golang/20200822-golang-rand-string/</link>
      <pubDate>Sat, 22 Aug 2020 17:58:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200822-golang-rand-string/</guid>
      <description>逐步优化实现一个高效的随机字符串算法 来自stackoverflow上的一个问题:How to generate a random string of a fixed length in Go? 问题描述是：我想要一个随机的字符</description>
    </item>
    
    <item>
      <title>[TCP] TCP协议RST包介绍</title>
      <link>https://piaohua.github.io/post/learn/20200822-tcp-rst/</link>
      <pubDate>Sat, 22 Aug 2020 17:00:03 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20200822-tcp-rst/</guid>
      <description>TCP协议RST包介绍、出现场景 RST介绍 RST: TCP协议中重置、复位连接的标志位,用来关闭异常连接。 发送RST包关闭连接时，不等缓冲区的包发送</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Connection Phase Packets</title>
      <link>https://piaohua.github.io/post/mysql/20200821-mysql-connection-phase-packets/</link>
      <pubDate>Fri, 21 Aug 2020 23:40:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200821-mysql-connection-phase-packets/</guid>
      <description>MySQL Connection Phase Packets Initial Handshake Packet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 1 [0a] protocol version string[NUL] server version 4 connection id string[8] auth-plugin-data-part-1 1 [00] filler 2 capability flags (lower 2 bytes) if more data in the packet: 1 character set 2 status flags 2 capability flags (upper 2 bytes) if capabilities &amp;amp;</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Capability Flags</title>
      <link>https://piaohua.github.io/post/mysql/20200821-mysql-capability-flags/</link>
      <pubDate>Fri, 21 Aug 2020 00:07:17 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200821-mysql-capability-flags/</guid>
      <description>MySQL Capability Flags 简介 客户端和服务器使用权能标志来指示它们支持和想要使用的功能。 标志位名称 标志位 说明 CLIENT_LONG_PASSWORD 0x0001 new more secure passwords CLIENT_FOUND_ROWS 0x0002 Found instead of affected rows CLIENT_LONG_FLAG 0x0004 Get all column flags CLIENT_CONNECT_WITH_DB 0x0008 One can specify db on</description>
    </item>
    
    <item>
      <title>[Go] Golang Test 工具指令</title>
      <link>https://piaohua.github.io/post/golang/20200820-golang-test/</link>
      <pubDate>Thu, 20 Aug 2020 21:33:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200820-golang-test/</guid>
      <description>Golang Test 工具指令 简介 go test测试工具包含示例函数测试(ExampleXXX)、单元测试(TestXXX)、基准测试(BenchmarkXXX)</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL身份验证插件</title>
      <link>https://piaohua.github.io/post/mysql/20200818-mysql-plugin/</link>
      <pubDate>Tue, 18 Aug 2020 00:42:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200818-mysql-plugin/</guid>
      <description>MySQL身份验证插件(mysql_native_password、sha256_password、caching_sha2_passwor</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL配置文件my.cnf参数解释说明</title>
      <link>https://piaohua.github.io/post/mysql/20200817-mysql-my-cnf/</link>
      <pubDate>Mon, 17 Aug 2020 23:32:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200817-mysql-my-cnf/</guid>
      <description>MySQL配置文件my.cnf参数解释说明 参数说明 #BEGIN CONFIG INFO #DESCR: 4GB RAM, 只使用InnoDB, ACID, 少量的连接, 队列负载大 #TYPE: SYSTEM #END CONFIG INFO # # 此mysql配置文件</description>
    </item>
    
    <item>
      <title>[Go] Golang应用构建Docker镜像</title>
      <link>https://piaohua.github.io/post/docker/20200816-golang-docker/</link>
      <pubDate>Sun, 16 Aug 2020 23:15:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20200816-golang-docker/</guid>
      <description>Golang应用通过Dockerfile构建Docker镜像 构建镜像 构建一个go应用镜像，当前目录加载项目，编译生成二进制文件 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 内连接、外连接、左连接、右连接示例介绍</title>
      <link>https://piaohua.github.io/post/mysql/20200816-mysql-join/</link>
      <pubDate>Sun, 16 Aug 2020 12:57:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200816-mysql-join/</guid>
      <description>MySQL 内连接、左连接（左外连接）、右连接（右外连接） 创建示例表 1 2 3 4 5 6 7 8 9 10 11 CREATE TABLE `a_table` ( `a_id` int(11) DEFAULT NULL, `a_name` varchar(10) DEFAULT NULL, `a_part` varchar(10) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8 CREATE TABLE `b_table` ( `b_id` int(11) DEFAULT NULL, `b_name` varchar(10)</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL事务详情</title>
      <link>https://piaohua.github.io/post/mysql/20200816-mysql-transaction/</link>
      <pubDate>Sun, 16 Aug 2020 00:09:58 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200816-mysql-transaction/</guid>
      <description>数据库中的事务是指对数据库执行一批操作，这些操作最终要么全部执行成功，要么全部失败，不会存在部分成功的情况。 事务的特性(ACID) 原子性（A</description>
    </item>
    
    <item>
      <title>[Go] Golang 官方限流器time/rate使用</title>
      <link>https://piaohua.github.io/post/golang/20200815-golang-rate-limiter/</link>
      <pubDate>Sat, 15 Aug 2020 21:36:37 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200815-golang-rate-limiter/</guid>
      <description>time/rate是基于Token Bucket(令牌桶)算法实现的限流 限流 限制某个服务每秒的调用本服务的频率 客户端请求太多，超出服务端的服务</description>
    </item>
    
    <item>
      <title>[Go] Golang http.Client请求程序遇到 Connection Reset by Peer 或 EOF 问题</title>
      <link>https://piaohua.github.io/post/golang/20200814-golang-connection-reset-by-peer/</link>
      <pubDate>Fri, 14 Aug 2020 23:43:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200814-golang-connection-reset-by-peer/</guid>
      <description>Golang http.Client请求程序遇到Connection Reset by peer 或 EOF 问题 问题 线上服务经常规律性的出现http.Client请求服务器数据和上报</description>
    </item>
    
    <item>
      <title>[Hey] 基于Golang开发的一款类似Ab的压测工具</title>
      <link>https://piaohua.github.io/post/golang/20200814-golang-hey/</link>
      <pubDate>Fri, 14 Aug 2020 23:05:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200814-golang-hey/</guid>
      <description>Hey 基于Golang开发的一款类似Ab的压测工具 安装 MaxOS 安装 1 brew install hey golang源码编译安装 1 go get -u github.com/rakyll/hey 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>[Phabricator] 代码审查工具</title>
      <link>https://piaohua.github.io/post/tool/20200813-phabricator/</link>
      <pubDate>Thu, 13 Aug 2020 23:09:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20200813-phabricator/</guid>
      <description>Phabricator是Facebook开源的一个可视化的代码审查工具 安装 1 2 git clone https://github.com/phacility/libphutil.git git clone https://github.com/phacility/arcanist.git arc执行文件路径加载到系统路径并加载 1 2 3 source ~/.bash_profile arc</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL通过Sys库查看数据库运行情况</title>
      <link>https://piaohua.github.io/post/mysql/20200812-mysql-sys/</link>
      <pubDate>Wed, 12 Aug 2020 22:52:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200812-mysql-sys/</guid>
      <description>快捷的了解到MySQL的一些信息 sys库里面的表、视图、函数、存储过程可以使我们更方便、快捷的了解到MySQL的一些信息，比如哪些语句使用了</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL autocommit</title>
      <link>https://piaohua.github.io/post/mysql/20200812-mysql-autocommit/</link>
      <pubDate>Wed, 12 Aug 2020 22:24:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200812-mysql-autocommit/</guid>
      <description>MySQL autocommit 控制是否开启隐式事务 查看状态 mysql&amp;gt; show variables like &#39;%autocommit%&#39;; 开启自动提交 mysql&amp;gt; set autocommit=1; 关闭自动提交 使用commit提交事务操作，或者使用rollback回滚操作 配置文</description>
    </item>
    
    <item>
      <title>[Go] 一个Golang实现的MySQL基准测试工具</title>
      <link>https://piaohua.github.io/post/golang/20200812-golang-benchyou/</link>
      <pubDate>Wed, 12 Aug 2020 22:15:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200812-golang-benchyou/</guid>
      <description>benchyou is a benchmark tool for MySQL, similar Sysbench. Introduction benchyou is a benchmark tool for MySQL, real-time monitoring TPS and vmstat/iostat Build 1 2 3 $ git clone https://github.com/xelabs/benchyou $ cd benchyou $ make build Usage 1 $ ./bin/benchyou -h Examples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 prepare 64 tables: ./bin/benchyou --mysql-host=192.168.0.3</description>
    </item>
    
    <item>
      <title>[Go] Golang实现一个工作池</title>
      <link>https://piaohua.github.io/post/golang/20200811-golang-worker-pool/</link>
      <pubDate>Tue, 11 Aug 2020 23:02:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200811-golang-worker-pool/</guid>
      <description>Golang实现一个工作池处理并发任务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51</description>
    </item>
    
    <item>
      <title>[Go] Golang用Channel实现互斥锁</title>
      <link>https://piaohua.github.io/post/golang/20200810-golang-channel-lock/</link>
      <pubDate>Mon, 10 Aug 2020 22:23:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200810-golang-channel-lock/</guid>
      <description>使用长度为1的有缓冲channel实现互斥锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48</description>
    </item>
    
    <item>
      <title>[Go] Golang Quic</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-quic/</link>
      <pubDate>Sun, 09 Aug 2020 23:53:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-quic/</guid>
      <description>Quick UDP Internet Connection QUIC 概述 QUIC（Quick UDP Internet Connection，快速 UDP 互联网连接协议）是一种以 UDP 为底层传输协议，支持加密、多路复用，工作在用户空</description>
    </item>
    
    <item>
      <title>[Go] Golang 在编译时使用ldflags动态设置包中变量的值</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-ldflags/</link>
      <pubDate>Sun, 09 Aug 2020 18:25:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-ldflags/</guid>
      <description>Golang 在编译时使用ldflags动态设置包中变量的值 -X importpath.name=value Set the value of the string variable in importpath named name to value. Note that before Go 1.5 this option took two separate arguments. Now it takes one argument split on the first = sign. 参数作用 golan</description>
    </item>
    
    <item>
      <title>[Go] Golang Crc32 Packet</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-crc32-packet/</link>
      <pubDate>Sun, 09 Aug 2020 12:47:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-crc32-packet/</guid>
      <description>打包解包协议中应用crc32校验和 crc32 介绍 crc32包实现了32位循环冗余校验（CRC-32）的校验和算法; CRC全称为Cyclic Redundancy Chec</description>
    </item>
    
    <item>
      <title>[Go] Golang Adler32 Packet</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-adler32-packet/</link>
      <pubDate>Sun, 09 Aug 2020 12:47:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-adler32-packet/</guid>
      <description>打包解包协议中应用adler32校验和 adler32 介绍 Adler-32是Mark Adler发明的校验和算法，和32位CRC校验算法一样，都是保护数据防</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL 连接数和状态查看</title>
      <link>https://piaohua.github.io/post/mysql/20200809-mysql-show-connections/</link>
      <pubDate>Sun, 09 Aug 2020 00:09:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200809-mysql-show-connections/</guid>
      <description>MySQL 连接数和状态查看 mysql的最大连接数默认是100, 最大可以达到16384 查看mysql服务器最大连接数 1 2 mysql&amp;gt; show variables like &amp;#39;%max_connections%&amp;#39;; mysql&amp;gt; select @@max_connections; 设置mysql</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Sysbench</title>
      <link>https://piaohua.github.io/post/mysql/20200808-mysql-sysbench/</link>
      <pubDate>Sat, 08 Aug 2020 11:53:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200808-mysql-sysbench/</guid>
      <description>MySQL 基准测试 sysbench介绍 sysbench 是一个模块化的、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。 它主要包括以</description>
    </item>
    
    <item>
      <title>[Go] Golang Context</title>
      <link>https://piaohua.github.io/post/golang/20200808-golang-context/</link>
      <pubDate>Sat, 08 Aug 2020 11:53:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200808-golang-context/</guid>
      <description>Golang Context Context 接口 1 2 3 4 5 6 7 8 9 type Context interface { Deadline() (deadline time.Time, ok bool) Done() &amp;lt;-chan struct{} Err() error Value(key interface{}) interface{} } context包提供暴露Context接口可以在多个Goroutine共享数</description>
    </item>
    
    <item>
      <title>[Go] Golang Channel</title>
      <link>https://piaohua.github.io/post/golang/20200808-golang-channel/</link>
      <pubDate>Sat, 08 Aug 2020 11:52:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200808-golang-channel/</guid>
      <description>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating. 介绍 channel是GO语言级别提供的goroutine间的通信方式，channel是类型相关的，需要在声明channel</description>
    </item>
    
    <item>
      <title>[VIM] Vim实用小技巧</title>
      <link>https://piaohua.github.io/post/vim/20200807-vim-tips/</link>
      <pubDate>Fri, 07 Aug 2020 23:06:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200807-vim-tips/</guid>
      <description>Vim实用小技巧 插入递增数字 let i=0 | g/toPlaced/s//\=i/ |let i=i+1 这条命令由三部分组成： let i=1 和 let i=i+1 构成了一个变量递增的循环。 g命令用于全局查找一个字符串，并对此字符串</description>
    </item>
    
    <item>
      <title>[VIM] vim十六进制格式查看</title>
      <link>https://piaohua.github.io/post/vim/20200806-vim-hex-edit/</link>
      <pubDate>Fri, 07 Aug 2020 00:24:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200806-vim-hex-edit/</guid>
      <description>vim十六进制格式查看 xxd xxd是linux下一个显示、编辑、转换二进制命令 man xxd 查看帮助 DESCRIPTION xxd creates a hex dump of a given file or standard input. It can also convert a hex dump back to its original binary form. Like</description>
    </item>
    
    <item>
      <title>[VIM] Vim命令图解</title>
      <link>https://piaohua.github.io/post/vim/20200805-vim-cheat-sheet-full/</link>
      <pubDate>Thu, 06 Aug 2020 23:36:25 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200805-vim-cheat-sheet-full/</guid>
      <description>Vim命令图解 ref</description>
    </item>
    
    <item>
      <title>[VIM] 我的VIM配置</title>
      <link>https://piaohua.github.io/post/vim/20200805-my-config-vim/</link>
      <pubDate>Thu, 06 Aug 2020 23:23:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/vim/20200805-my-config-vim/</guid>
      <description>我的Vim配置项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Affected Rows</title>
      <link>https://piaohua.github.io/post/mysql/20200805-mysql-affected-rows/</link>
      <pubDate>Wed, 05 Aug 2020 21:27:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20200805-mysql-affected-rows/</guid>
      <description>MySQL INSERT/INSERT &amp;hellip; ON DUPLICATE KEY UPDATE Affected Rows 问题 问题描述 在INSERT/INSERT ... ON DUPLICATE KEY UPDATE操作时, 会存在MySQL连接client_flag是否设置CL</description>
    </item>
    
    <item>
      <title>[Mac] Mac OSX Keyword Cmd</title>
      <link>https://piaohua.github.io/post/tool/20200805-mac-osx-keyword-cmd/</link>
      <pubDate>Wed, 05 Aug 2020 00:07:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20200805-mac-osx-keyword-cmd/</guid>
      <description>Mac OSX 快捷键指令 mac 终端shell下把option键设置为alt键 打开终端，在终端shell菜单下选择偏好设置，选择描述文件选项卡， 选择一个终端</description>
    </item>
    
    <item>
      <title>[Git] 指令集</title>
      <link>https://piaohua.github.io/post/git/20180803.git.command/</link>
      <pubDate>Mon, 03 Aug 2020 21:21:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/git/20180803.git.command/</guid>
      <description>Git常用操作命令 Clone仓库 # 获取一个仓库，支持多种协议(http/git/ssh) $ git clone https://git.kernel.org/pub/scm/git/git.git $ git clone git://git.kernel.org/pub/scm/git/git.git $ git clone user@server:path/to/repo.git # GitHub创建仓库提示代</description>
    </item>
    
    <item>
      <title>[helm] 基于github搭建helm repository</title>
      <link>https://piaohua.github.io/post/tool/helm_github/</link>
      <pubDate>Mon, 03 Aug 2020 00:12:45 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/helm_github/</guid>
      <description>基于github搭建helm repository 创建仓库 通过 https://github.com/new 创建一个 repository; 比如：https://github.com/piaohua/helm-charts 创建</description>
    </item>
    
    <item>
      <title>[里仁篇] My Blog</title>
      <link>https://piaohua.github.io/post/chinese/first/</link>
      <pubDate>Sun, 02 Aug 2020 11:14:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese/first/</guid>
      <description>《论语 &amp;ndash; 里仁篇》不患无位，患所以立。不患莫己知，求为可知也。</description>
    </item>
    
    <item>
      <title>Theme preview</title>
      <link>https://piaohua.github.io/post/even-preview/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/even-preview/</guid>
      <description>Based on MarkdownPreview test.md. Markdown 1 2 3 4 5 6 7 8 # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 ### Duplicate Header ### Duplicate Header H1 H2 H3 H4 H5 H6 Duplicate Header Duplicate Header Paragraphs 1 2 3 4 This is a paragraph. I am still part of the paragraph. New paragraph. This is a paragraph. I am still part of the paragraph.</description>
    </item>
    
    <item>
      <title>This is a hidden post.</title>
      <link>https://piaohua.github.io/post/hidden-post/</link>
      <pubDate>Thu, 08 Mar 2018 17:40:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/hidden-post/</guid>
      <description>&lt;p&gt;This post is hidden from the home page.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[English] Creating a New Theme</title>
      <link>https://piaohua.github.io/post/english-preview/</link>
      <pubDate>Thu, 31 Aug 2017 15:43:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/english-preview/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>[日本語] 敬語体系</title>
      <link>https://piaohua.github.io/post/japanese-preview/</link>
      <pubDate>Wed, 30 Aug 2017 01:53:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/japanese-preview/</guid>
      <description>日本語の敬語体系は、一般に、大きく尊敬語・謙譲語・丁寧語に分類される。文化審議会国語分科会は、2007年2月に「敬語の指針」を答申し、これに</description>
    </item>
    
    <item>
      <title>[中文] 《长恨歌》</title>
      <link>https://piaohua.github.io/post/chinese-preview/</link>
      <pubDate>Wed, 30 Aug 2017 01:37:56 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/chinese-preview/</guid>
      <description>《长恨歌》是中国唐朝诗人白居易的一首长篇叙事诗。 第一段：贵妃受宠爱 汉皇重色思倾国，御宇多年求不得。杨家有女初长成，养在深闺人未识。 天生丽质难</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://piaohua.github.io/post/shortcodes/</link>
      <pubDate>Tue, 30 Aug 2016 16:01:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/shortcodes/</guid>
      <description>&lt;h1 id=&#34;admonition&#34;&gt;Admonition&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;biu biu biu.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;{{% admonition note &amp;#34;I&amp;#39;m title!&amp;#34; false %}}
biu biu biu.

{{% admonition type=&amp;#34;note&amp;#34; title=&amp;#34;note&amp;#34; details=&amp;#34;true&amp;#34; %}}
biu biu biu.
{{% /admonition %}}

{{% admonition example %}}
Without title.
{{% /admonition %}}

{{% /admonition %}}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JS Flowchart Diagrams</title>
      <link>https://piaohua.github.io/post/js-flowchart-diagrams/</link>
      <pubDate>Wed, 04 Mar 2015 21:57:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/js-flowchart-diagrams/</guid>
      <description>&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;st=&amp;gt;start: Start|past:&amp;gt;http://www.google.com[blank]
e=&amp;gt;end: End:&amp;gt;http://www.google.com
op1=&amp;gt;operation: My Operation|past
op2=&amp;gt;operation: Stuff|current
sub1=&amp;gt;subroutine: My Subroutine|invalid
cond=&amp;gt;condition: Yes
or No?|approved:&amp;gt;http://www.google.com
c2=&amp;gt;condition: Good idea|rejected
io=&amp;gt;inputoutput: catch something...|request

st-&amp;gt;op1(right)-&amp;gt;cond
cond(yes, right)-&amp;gt;c2
cond(no)-&amp;gt;sub1(left)-&amp;gt;op1
c2(yes)-&amp;gt;io-&amp;gt;e
c2(no)-&amp;gt;op2-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JS Sequence Diagrams</title>
      <link>https://piaohua.github.io/post/js-sequence-diagrams/</link>
      <pubDate>Wed, 04 Mar 2015 21:57:45 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/js-sequence-diagrams/</guid>
      <description>&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Andrew-&amp;gt;China: Says Hello
Note right of China: China thinks\nabout it
China--&amp;gt;Andrew: How are you?
Andrew-&amp;gt;&amp;gt;China: I am good thanks!
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Syntax Highlighting</title>
      <link>https://piaohua.github.io/post/syntax-highlighting/</link>
      <pubDate>Tue, 30 Aug 2011 16:01:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/syntax-highlighting/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helloWorld&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>