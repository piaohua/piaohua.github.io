<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/tags/docker/</link>
    <description>Recent content in docker on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 24 Aug 2025 19:30:50 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Openresty &#43; Websocket &#43; Redis Stream 实现一个简单聊天室，保持长连接，并通过Redis转发消息</title>
      <link>https://piaohua.github.io/post/tool/20250824-openresty-websocket-redis/</link>
      <pubDate>Sun, 24 Aug 2025 19:30:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250824-openresty-websocket-redis/</guid>
      <description>用 Openresty + Websocket + Redis Stream 实现一个简单聊天室，保持长连接，并通过Redis Stream 转发消息 在 Openresty + Websocket + Redis 实现一个简单聊天室，保持长连接，并通过Redis转发消息</description>
    </item>
    
    <item>
      <title>Openresty &#43; Websocket &#43; Redis 实现一个简单聊天室，保持长连接，并通过Redis转发消息</title>
      <link>https://piaohua.github.io/post/tool/20250823-openresty-websocket-redis/</link>
      <pubDate>Sat, 23 Aug 2025 17:31:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250823-openresty-websocket-redis/</guid>
      <description>用 Openresty + Websocket + Redis 实现一个简单聊天室，保持长连接，并通过Redis转发消息 在 Openresty 创建 Websocket 连接，并将消息发到 Redis 队列中 中，详细实现了一个简单的聊天室，将消</description>
    </item>
    
    <item>
      <title>Openresty 创建 Websocket 连接，并将消息发到 Redis 队列中</title>
      <link>https://piaohua.github.io/post/tool/20250816-openresty-websocket-redis/</link>
      <pubDate>Sat, 16 Aug 2025 16:22:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250816-openresty-websocket-redis/</guid>
      <description>Openresty 实现 Websocket 连接，并将消息发到 Redis 队列中，方便其他服务消费。 docker 安装 openresty 在宿主机上创建挂载的目录 1 2 3 mkdir -p /data/openresty/nginx/ cd /data/openresty/nginx mkdir -p conf.d html logs lua conf 下载 openresty 镜像 1 docker pull openresty/openresty:1.25.3.2-alpine-aarch64 启动容</description>
    </item>
    
    <item>
      <title>Openresty 使用入门</title>
      <link>https://piaohua.github.io/post/tool/20250727-openresty-usages/</link>
      <pubDate>Sun, 27 Jul 2025 17:01:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250727-openresty-usages/</guid>
      <description>使用Docker安装OpenResty并使用示例学习 OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模</description>
    </item>
    
    <item>
      <title>在 K8s 中使用 云原生API网关 Higress</title>
      <link>https://piaohua.github.io/post/docker/20240918-higress-quickstart/</link>
      <pubDate>Wed, 18 Sep 2024 20:01:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240918-higress-quickstart/</guid>
      <description>在标准 K8s 集群中使用 在Docker中启动 Higress 只需 Docker 即可启动，方便个人开发者在本地搭建学习，或者用于搭建简易站点: 1 2 3 4 5 6 # 创建一个工作目录 mkdir</description>
    </item>
    
    <item>
      <title>docker.io无法访问情况下，如何构建golang应用</title>
      <link>https://piaohua.github.io/post/golang/20240901-docker-build-golang-app/</link>
      <pubDate>Sun, 01 Sep 2024 19:18:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240901-docker-build-golang-app/</guid>
      <description>最近docker.io国内无法访问，拉取不到最新的镜像，记录使用新的代理获取构建过程 使用镜像加速dockerpull.com拉取镜像 1 2 3 4</description>
    </item>
    
    <item>
      <title>使用 Docker 构建和部署 FastAPI 程序</title>
      <link>https://piaohua.github.io/post/docker/20240817-fastapi-build/</link>
      <pubDate>Sat, 17 Aug 2024 17:01:16 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240817-fastapi-build/</guid>
      <description>使用 Docker 构建和部署 FastAPI 程序，可以保证环境一致性，也方便程序扩展和移植。同时也可以用到官方预制的Docker镜像。 创建FastAPI 应用 初始应用的</description>
    </item>
    
    <item>
      <title>开源手绘风格绘图工具Excalidraw</title>
      <link>https://piaohua.github.io/post/tool/20240801-excalidraw/</link>
      <pubDate>Thu, 01 Aug 2024 23:27:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240801-excalidraw/</guid>
      <description>Excalidraw 是一个开源的在线绘图工具，专为手绘风格的图形设计，且支持中文。 直接浏览器打开Excalidraw即可在线使用，在线可以使用丰富的素材库，可</description>
    </item>
    
    <item>
      <title>Redis-stack helm chart</title>
      <link>https://piaohua.github.io/post/docker/20240730-redis-stack-helm-chart/</link>
      <pubDate>Tue, 30 Jul 2024 22:42:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240730-redis-stack-helm-chart/</guid>
      <description>Redis-stack helm chart
 Run Redis Stack on Docker Docker Pull Command
1  docker pull redis/redis-stack:7.4.0-v0   Getting started with Docker In the default configuration, Redis does not require a password to authenticate clients. To provide basic security for your Redis Stack server, it is recommended to set a password using the requirepass directive. Configure this using an environment variable when starting the container:
To start Redis Stack server using the redis-stack image, run the following command in your terminal:</description>
    </item>
    
    <item>
      <title>云原生API网关 Higress 使用</title>
      <link>https://piaohua.github.io/post/docker/20240716-higress/</link>
      <pubDate>Tue, 16 Jul 2024 22:18:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240716-higress/</guid>
      <description>Higress 一个遵循开源Ingress/Gateway API标准，提供流量调度、服务治理、安全防护三合一的高集成、易使用、易扩展、热更新的云原生API</description>
    </item>
    
    <item>
      <title>Docker Slim(toolkit): 一个优化容器体验，自动分析、缩小容器镜像的工具</title>
      <link>https://piaohua.github.io/post/docker/20240630-docker-slim/</link>
      <pubDate>Sun, 30 Jun 2024 17:07:56 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240630-docker-slim/</guid>
      <description>docker-slim 一个不需要更改容器镜像中的任何内容，而能将其缩小多达 30 倍的命令工具（对于编译语言，缩小幅度甚至更大）。可以优化容器使用体验，让容器更好、更</description>
    </item>
    
    <item>
      <title>kubernetes 基础组件及作用</title>
      <link>https://piaohua.github.io/post/docker/20240608-k8s-base/</link>
      <pubDate>Sat, 08 Jun 2024 16:23:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240608-k8s-base/</guid>
      <description>Kubernetes documentation 什么是 Kubernetes？ Kubernetes 是一个开源容器管理工具，负责容器部署，容器扩缩容以及负载平衡。它提供了出色的社区，并与所有云提供商合作。因</description>
    </item>
    
    <item>
      <title>Python Fastapi 实现获取 Snowflake ID 接口</title>
      <link>https://piaohua.github.io/post/python/20240608-snowflake-fastapi/</link>
      <pubDate>Sat, 08 Jun 2024 00:06:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240608-snowflake-fastapi/</guid>
      <description>Python Fastapi 实现获取 Snowflake ID 接口，并用helm部署。 snowflake python 实现如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44</description>
    </item>
    
    <item>
      <title>Protocol Buffers &#43; Docker</title>
      <link>https://piaohua.github.io/post/docker/20240601-protobuf/</link>
      <pubDate>Sat, 01 Jun 2024 15:02:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240601-protobuf/</guid>
      <description>An all-inclusive protoc Docker image docker-protobuf 使用protoc docker镜像编译proto文件，生成指定的语言文件。 Usage 使用命令格式 1 $ docker run --rm -v&amp;lt;some-path&amp;gt;:&amp;lt;some-path&amp;gt; -w&amp;lt;some-path&amp;gt; rvolosatovs/protoc [OPTION] PROTO_FILES 使用帮助查看 1 $ docker run --rm</description>
    </item>
    
    <item>
      <title>helm 安装 bitnami/nginx-ingress-controller</title>
      <link>https://piaohua.github.io/post/docker/20240529-bitnami-nginx-ingress-controller/</link>
      <pubDate>Wed, 29 May 2024 22:18:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240529-bitnami-nginx-ingress-controller/</guid>
      <description>helm 安装 bitnami/nginx-ingress-controller 镜像源环境 1 2 3 4 5 6 7 8 9 10 11 12 # 镜像源 helm repo list NAME URL bitnami https://charts.bitnami.com/bitnami # 搜索 nginx-ingress helm search repo nginx NAME CHART VERSION APP VERSION DESCRIPTION bitnami/nginx 16.0.6 1.25.5 NGINX Open Source is a web server that can be a... bitnami/nginx-ingress-controller 11.1.1 1.10.1 NGINX Ingress Controller is an Ingress controll...</description>
    </item>
    
    <item>
      <title>使用 Kind 运行本地Kubernetes集群</title>
      <link>https://piaohua.github.io/post/docker/20240529-kind/</link>
      <pubDate>Wed, 29 May 2024 21:28:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240529-kind/</guid>
      <description>使用 Kind 运行本地Kubernetes集群 Kind 是 Kubernetes In Docker 的缩写，顾名思义，就是把 Kubernetes 运行在 Docker容器里面。 特点 创建、启动k8s集群非常快速，资源</description>
    </item>
    
    <item>
      <title>Helm repo 配置</title>
      <link>https://piaohua.github.io/post/docker/20240529-helm-repo/</link>
      <pubDate>Wed, 29 May 2024 20:48:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240529-helm-repo/</guid>
      <description>helm 国内镜像源配置 Repository（仓库） 是用来存放和共享 charts 的地方, 供 Kubernetes 包使用。 Helm Search Helm 自带一个强大的搜索命令，可以用来从两种来源中进行搜索</description>
    </item>
    
    <item>
      <title>Helm 部署 nginx 和 fastapi 本地镜像服务</title>
      <link>https://piaohua.github.io/post/docker/20240525-helm-nginx-fastapi-short-code/</link>
      <pubDate>Sat, 25 May 2024 18:10:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240525-helm-nginx-fastapi-short-code/</guid>
      <description>Helm 部署 nginx 和 fastapi 本地镜像服务 FastAPI web服务 目录结构： 1 2 3 4 5 6 . ├── app │ ├── __init__.py │ └── main.py ├── app.Dockerfile └── requirements.txt app服务 创建一个fastapi服务</description>
    </item>
    
    <item>
      <title>[Helm] Kubernetes 包管理器</title>
      <link>https://piaohua.github.io/post/tool/20240505-helm/</link>
      <pubDate>Sun, 05 May 2024 00:19:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240505-helm/</guid>
      <description>Helm 是查找、分享和使用软件构建 Kubernetes 的最优方式。 Helm 帮助管理 Kubernetes 应用—— Helm Chart，即使是最复杂的 Kubernetes 应用程序，都可以帮助定义，安装和升级。 概念 chart 创建</description>
    </item>
    
    <item>
      <title>Pulsar Docker中启动和golang使用示例</title>
      <link>https://piaohua.github.io/post/tool/20240504-pulsar-start/</link>
      <pubDate>Sat, 04 May 2024 14:11:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240504-pulsar-start/</guid>
      <description>在Docker中启动用于学习 在Docker中启动 以独立模式standalone启动 Pulsar 1 2 3 4 5 6 7 docker run -it \ -p 6650:6650 \ -p 8080:8080 \ --mount source=pulsardata,target=/pulsar/data \ --mount source=pulsarconf,target=/pulsar/conf \ apachepulsar/pulsar:3.2.2 \ bin/pulsar standalone 启</description>
    </item>
    
    <item>
      <title>云原生 API 网关 APISIX 介绍使用</title>
      <link>https://piaohua.github.io/post/tool/20240303-apisix/</link>
      <pubDate>Sun, 03 Mar 2024 15:19:03 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240303-apisix/</guid>
      <description>云原生 API 网关 APISIX 入门教程 Apache APISIX 是 Apache 软件基金会下的云原生 API 网关，它具有动态、实时、高性能等特点，提供了负载均衡、动态上游、灰度发布（金丝雀发布）、</description>
    </item>
    
    <item>
      <title>Minio on Docker Compose</title>
      <link>https://piaohua.github.io/post/tool/20240119-minio-on-docker-compose/</link>
      <pubDate>Fri, 19 Jan 2024 17:00:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240119-minio-on-docker-compose/</guid>
      <description>minio集群docker部署 MinIO 是在 GNU Affero 通用公共许可证 v3.0 下发布的高性能对象存储。它与 Amazon S3 云存储服务 API 兼容。使用 MinIO 为机器学习、分析和应用程序数</description>
    </item>
    
    <item>
      <title>MySQL-router MGR on Docker Compose</title>
      <link>https://piaohua.github.io/post/mysql/20240119-mysql-mgr-on-docker-compose/</link>
      <pubDate>Fri, 19 Jan 2024 16:44:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240119-mysql-mgr-on-docker-compose/</guid>
      <description>docker-compose之mysql-router(MGR单主模式) MGR介绍 MGR 即 MySQL Group Replication MGR 的特点 高一致性，基于原生复制及 paxos 协议的组复制技</description>
    </item>
    
    <item>
      <title>使用 Docker Compose 安装 nginx</title>
      <link>https://piaohua.github.io/post/docker/20240118-nginx-docker-compose/</link>
      <pubDate>Thu, 18 Jan 2024 23:14:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240118-nginx-docker-compose/</guid>
      <description>前后端都用得上的 Nginx 日常使用经验 docker-compose配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 version:&amp;#39;3.1&amp;#39;services:nginx:image:nginx:1.24.0container_name:nginx_1_24restart:alwaysenvironment:TZ :&amp;#39;Asia/Shanghai&amp;#39;ports:- &amp;#34;80:80&amp;#34;- &amp;#34;443:443&amp;#34;volumes:- ./config/nginx.conf:/etc/nginx/nginx.conf- ./config/conf.d:/etc/nginx/conf.d- ./html:/usr/share/nginx/html- ./logs:/var/log/nginx- ./ssl:/sslnetworks:- devopsnetworknetworks:devopsnetwork:external:true 创建相</description>
    </item>
    
    <item>
      <title>使用 docker 快速启动本地 ZooKeeper 集群</title>
      <link>https://piaohua.github.io/post/docker/20240114-zookeeper-cluster-with-docker/</link>
      <pubDate>Sun, 14 Jan 2024 15:47:31 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240114-zookeeper-cluster-with-docker/</guid>
      <description>使用 docker 快速启动本地 ZooKeeper 集群 ZooKeeper 是一个为分布式应用提供一致性服务的软件，是大数据场景下的一个重要的基础组件。 利用 Docker 来快速的在本地启动一个 ZooKeeper 环境。 单</description>
    </item>
    
    <item>
      <title>Mac使用Colima运行Docker</title>
      <link>https://piaohua.github.io/post/docker/20231028-mac-colima/</link>
      <pubDate>Sat, 28 Oct 2023 14:00:28 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20231028-mac-colima/</guid>
      <description>Mac使用Colima运行Docker Container runtimes on macOS (and Linux) with minimal setup Colima是一个免费的开源容器运行时，它使用QEMU在虚拟机中运行Docker容器</description>
    </item>
    
    <item>
      <title>[ClickHouse] ClickHouse 安装部署</title>
      <link>https://piaohua.github.io/post/docker/20221231-clickhouse/</link>
      <pubDate>Sat, 31 Dec 2022 14:43:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20221231-clickhouse/</guid>
      <description>ClickHouse 安装部署 RPM安装包 推荐使用CentOS、RedHat和所有其他基于rpm的Linux发行版的官方预编译rpm包。 首先，您需要添加官方存储</description>
    </item>
    
    <item>
      <title>[Gerrit] Gerrit Code Reviewer in Docker</title>
      <link>https://piaohua.github.io/post/golang/20220701-gerrit-docker/</link>
      <pubDate>Fri, 01 Jul 2022 21:53:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220701-gerrit-docker/</guid>
      <description>Gerrit是一个基于 Web 的代码审查系统，适于采用 Git 版本控制系统开发的项目进行在线代码审查。 快速启动 快速启动一个gerrit server，启动</description>
    </item>
    
    <item>
      <title>[Docker] Docker-compose 安装 Wordpress 博客</title>
      <link>https://piaohua.github.io/post/docker/20210829-docker-wordpress/</link>
      <pubDate>Sun, 29 Aug 2021 10:32:41 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20210829-docker-wordpress/</guid>
      <description>Docker-compose 安装 Wordpress 博客 安装 Wordpress 创建 docker-compose.wordpress.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 version:&amp;#39;3.3&amp;#39;services:db:image:mysql:5.7.22volumes:- db_data:/var/lib/mysqlrestart:alwaysenvironment:MYSQL_ROOT_PASSWORD:somewordpressMYSQL_DATABASE:wordpressMYSQL_USER:wordpressMYSQL_PASSWORD:wordpresswordpress:depends_on:- dbimage:wordpress:latestvolumes:- wordpress_data:/var/www/htmlports:- &amp;#34;8000:80&amp;#34;restart:alwaysenvironment:WORDPRESS_DB_HOST:db:3306WORDPRESS_DB_USER:wordpressWORDPRESS_DB_PASSWORD:wordpressWORDPRESS_DB_NAME:wordpressvolumes:db_data:{}wordpress_data:{} 启动 wordpress 1 &amp;gt; docker-compose -f docker-compose.wordpress.yml up -d 访问博客: localhost:8000 访问管理后台：l</description>
    </item>
    
    <item>
      <title>[Docker] 为什么`mysql -h localhost`无法登录了？</title>
      <link>https://piaohua.github.io/post/docker/20210823-docker-mysql-login/</link>
      <pubDate>Mon, 23 Aug 2021 22:35:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20210823-docker-mysql-login/</guid>
      <description>为什么mysql -h localhost无法登录了？ 在mac上用docker运行了一个mysql,配置如下： docker-compose.yml</description>
    </item>
    
    <item>
      <title>[Docker] Etcd Cluster</title>
      <link>https://piaohua.github.io/post/docker/20210822-docker-etcd-cluster/</link>
      <pubDate>Sun, 22 Aug 2021 15:33:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20210822-docker-etcd-cluster/</guid>
      <description>Docker 部署 Etcd 集群 拉取镜像 选择一个镜像拉取 1 2 3 4 5 6 7 docker pull gcr.io/etcd-development/etcd:v3.5.0 docker pull quay.io/coreos/etcd:v3.5.0 docker pull bitnami/etcd:latest docker pull k8s.gcr.io/etcd:3.4.13-0 运行容器 使用gcr.io/etcd-development/etc</description>
    </item>
    
    <item>
      <title>[MySQL] 用Docker搭建MySQL主从多节点集群</title>
      <link>https://piaohua.github.io/post/mysql/20210523-mysql-master-slaves/</link>
      <pubDate>Sun, 23 May 2021 18:56:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210523-mysql-master-slaves/</guid>
      <description>用Docker搭建MySQL主从多节点集群 MySQL 主从同步分为 5 个步骤： master 节点将数据的更新记录写到 binary log 中。 slave 节点开启 IO 线程连接 master 节点，请求获取指定</description>
    </item>
    
    <item>
      <title>[MySQL] MySQL Cluster on docker-compose</title>
      <link>https://piaohua.github.io/post/mysql/20210523-mysql-cluster/</link>
      <pubDate>Sun, 23 May 2021 12:07:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210523-mysql-cluster/</guid>
      <description>MySQL Cluster on docker-compose MySQL Cluster是一个高性能、可扩展、集群化数据库产品。MySQL Cluster是一个基于NDB Cluster存储引擎的完整分布式数</description>
    </item>
    
    <item>
      <title>[MySQL] Percona XtraDB Cluster on docker-compose</title>
      <link>https://piaohua.github.io/post/mysql/20210523-mysql-pxc/</link>
      <pubDate>Sun, 23 May 2021 11:40:17 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20210523-mysql-pxc/</guid>
      <description>Percona XtraDB Cluster on docker-compose 选择percona/percona-xtradb-cluster:5.7版本，搭建一个3节点的集群; 使用haproxy做反向代理负</description>
    </item>
    
    <item>
      <title>[Go] Golang应用构建Docker镜像</title>
      <link>https://piaohua.github.io/post/docker/20200816-golang-docker/</link>
      <pubDate>Sun, 16 Aug 2020 23:15:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20200816-golang-docker/</guid>
      <description>Golang应用通过Dockerfile构建Docker镜像 构建镜像 构建一个go应用镜像，当前目录加载项目，编译生成二进制文件 1 2 3 4 5 6 7</description>
    </item>
    
  </channel>
</rss>