<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>http on piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/tags/http/</link>
    <description>Recent content in http on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 24 Aug 2025 19:30:50 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/tags/http/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Openresty &#43; Websocket &#43; Redis Stream 实现一个简单聊天室，保持长连接，并通过Redis转发消息</title>
      <link>https://piaohua.github.io/post/tool/20250824-openresty-websocket-redis/</link>
      <pubDate>Sun, 24 Aug 2025 19:30:50 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250824-openresty-websocket-redis/</guid>
      <description>用 Openresty + Websocket + Redis Stream 实现一个简单聊天室，保持长连接，并通过Redis Stream 转发消息 在 Openresty + Websocket + Redis 实现一个简单聊天室，保持长连接，并通过Redis转发消息</description>
    </item>
    
    <item>
      <title>Openresty &#43; Websocket &#43; Redis 实现一个简单聊天室，保持长连接，并通过Redis转发消息</title>
      <link>https://piaohua.github.io/post/tool/20250823-openresty-websocket-redis/</link>
      <pubDate>Sat, 23 Aug 2025 17:31:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250823-openresty-websocket-redis/</guid>
      <description>用 Openresty + Websocket + Redis 实现一个简单聊天室，保持长连接，并通过Redis转发消息 在 Openresty 创建 Websocket 连接，并将消息发到 Redis 队列中 中，详细实现了一个简单的聊天室，将消</description>
    </item>
    
    <item>
      <title>Openresty 创建 Websocket 连接，并将消息发到 Redis 队列中</title>
      <link>https://piaohua.github.io/post/tool/20250816-openresty-websocket-redis/</link>
      <pubDate>Sat, 16 Aug 2025 16:22:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20250816-openresty-websocket-redis/</guid>
      <description>Openresty 实现 Websocket 连接，并将消息发到 Redis 队列中，方便其他服务消费。 docker 安装 openresty 在宿主机上创建挂载的目录 1 2 3 mkdir -p /data/openresty/nginx/ cd /data/openresty/nginx mkdir -p conf.d html logs lua conf 下载 openresty 镜像 1 docker pull openresty/openresty:1.25.3.2-alpine-aarch64 启动容</description>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://piaohua.github.io/post/learn/20240316-http/</link>
      <pubDate>Sat, 16 Mar 2024 23:42:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240316-http/</guid>
      <description>源文 HTTP协议 http协议是超文本传输协议。它是基于TCP协议的应用层传输协议，即客户端和服务端进行数据传输的一种规则。该协议本身HTTP</description>
    </item>
    
    <item>
      <title>[Go] Http 服务加载多个ssl证书</title>
      <link>https://piaohua.github.io/post/golang/20221022-http-with-multiple-certificates/</link>
      <pubDate>Sat, 22 Oct 2022 11:41:52 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221022-http-with-multiple-certificates/</guid>
      <description>Http 服务加载多个ssl证书 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cfg := &amp;amp;tls.Config{} cert, err := tls.LoadX509KeyPair(&amp;#34;cert_one.pem&amp;#34;, &amp;#34;key_one.pem&amp;#34;) if err != nil { log.Fatal(err) } cfg.Certificates = append(cfg.Certificates, cert) // keep adding remaining certs to cfg.Certificates server := http.Server{ Addr: &amp;#34;:443&amp;#34;, // Handler: myHandler, TLSConfig: cfg, } server.ListenAndServeTLS(&amp;#34;&amp;#34;, &amp;#34;&amp;#34;) http.ListenAndServeTLS with</description>
    </item>
    
  </channel>
</rss>