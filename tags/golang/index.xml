<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/tags/golang/</link>
    <description>Recent content in golang on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Jun 2024 18:15:14 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL 数据同步工具 dtle (Data-Transformation-le) 使用</title>
      <link>https://piaohua.github.io/post/mysql/20240602-data-transformation-le/</link>
      <pubDate>Sun, 02 Jun 2024 18:15:14 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/mysql/20240602-data-transformation-le/</guid>
      <description>dtle (Data-Transformation-le) 是上海爱可生信息技术股份有限公司 开发并开源的 CDC 工具. 特点 多种数据传输模式 支持链路压缩 支持同构传输和异构传输 支持跨网络边际的传输 多种数据处</description>
    </item>
    
    <item>
      <title>Sqids: 简短唯一ID生成器</title>
      <link>https://piaohua.github.io/post/golang/20240518-sqids/</link>
      <pubDate>Sat, 18 May 2024 13:24:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240518-sqids/</guid>
      <description>Sqids: 简短唯一ID生成器 Sqids 是Short Quick Unique Identifiers的缩写。 允许从数字中生成简短的唯一且看起来随机的标识符, 而且这些 ID 是 URL 安全的，可</description>
    </item>
    
    <item>
      <title>Pulsar Docker中启动和golang使用示例</title>
      <link>https://piaohua.github.io/post/tool/20240504-pulsar-start/</link>
      <pubDate>Sat, 04 May 2024 14:11:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/tool/20240504-pulsar-start/</guid>
      <description>在Docker中启动用于学习 在Docker中启动 以独立模式standalone启动 Pulsar 1 2 3 4 5 6 7 docker run -it \ -p 6650:6650 \ -p 8080:8080 \ --mount source=pulsardata,target=/pulsar/data \ --mount source=pulsarconf,target=/pulsar/conf \ apachepulsar/pulsar:3.2.2 \ bin/pulsar standalone 启</description>
    </item>
    
    <item>
      <title>[Go] redis 限速器</title>
      <link>https://piaohua.github.io/post/redis/20240501-rate/</link>
      <pubDate>Wed, 01 May 2024 17:45:36 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240501-rate/</guid>
      <description>go-redis/redis_rate 库实现了一个漏桶调度算法（又名通用信元速率算法）。 安装 1 go get github.com/go-redis/redis_rate/v10 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 rdb := redis.NewClient(&amp;amp;redis.Options{ Addr: &amp;#34;localhost:6379&amp;#34;, }) limiter := redis_rate.NewLimiter(rdb) res, err := limiter.Allow(ctx, &amp;#34;project:123&amp;#34;, redis_rate.PerSecond(10)) if err != nil { panic(err) } fmt.Println(&amp;#34;allowed&amp;#34;,</description>
    </item>
    
    <item>
      <title>[Go] 单元测试覆盖率</title>
      <link>https://piaohua.github.io/post/golang/20240501-test-cover/</link>
      <pubDate>Wed, 01 May 2024 15:13:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240501-test-cover/</guid>
      <description>测试覆盖率是代码质量的一个非常重要的衡量指标。 在 golang 中可以使用 go test 运行单元测试，并输出代码测试覆盖率报告。 进入项目目录，执行下面命令，输出当前</description>
    </item>
    
    <item>
      <title>[Go] examples for the mongo-go-driver mock</title>
      <link>https://piaohua.github.io/post/golang/20240424-mongo-go-driver-mock/</link>
      <pubDate>Wed, 24 Apr 2024 23:34:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240424-mongo-go-driver-mock/</guid>
      <description>examples for the mongo-go-driver mock 在使用 mongo-go-driver 时，需要对mongo数据库操作模拟单元测试用例， 使用 testify 或 genmock 中的 mock 都需要实现mock接口。 而 mongo-go-driver 官方有一个 mtest 包，提供更好的实现</description>
    </item>
    
    <item>
      <title>[Go] 在go中使用redis分布式锁</title>
      <link>https://piaohua.github.io/post/golang/20240424-redislock/</link>
      <pubDate>Wed, 24 Apr 2024 22:56:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240424-redislock/</guid>
      <description>Simplified distributed locking implementation using Redis GoDoc 分布式锁使用示例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54</description>
    </item>
    
    <item>
      <title>[Go] go list 命令</title>
      <link>https://piaohua.github.io/post/golang/20240417-go-list/</link>
      <pubDate>Wed, 17 Apr 2024 21:20:03 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240417-go-list/</guid>
      <description>go list命令的作用是列出指定的代码包的信息。 查看帮助文档 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &amp;gt; go help list usage: go list [-f format] [-json] [-m] [list flags] [build flags] [packages] List lists the named packages,</description>
    </item>
    
    <item>
      <title>[Go] 数组与切片</title>
      <link>https://piaohua.github.io/post/golang/20240331-array-slice/</link>
      <pubDate>Sun, 31 Mar 2024 20:20:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240331-array-slice/</guid>
      <description>原文：Go语言进阶：数组与切片 Array （数组） 数组 Array 是一片连续的内存区域，存储相同类型的元素，元素的个数固定。在Go语言中，数组Array不能进行</description>
    </item>
    
    <item>
      <title>[Go] 深入理解深拷贝与浅拷贝</title>
      <link>https://piaohua.github.io/post/golang/20240331-copy/</link>
      <pubDate>Sun, 31 Mar 2024 20:00:06 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240331-copy/</guid>
      <description>原文：Go语言进阶：深入理解深拷贝与浅拷贝 深拷贝和浅拷贝是编程中处理对象或数据结构复制时的两种主要策略。 深拷贝和浅拷贝的定义 浅拷贝 浅拷贝，是</description>
    </item>
    
    <item>
      <title>[Go] 互斥锁实现原理</title>
      <link>https://piaohua.github.io/post/golang/20240330-lock/</link>
      <pubDate>Sat, 30 Mar 2024 16:11:19 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240330-lock/</guid>
      <description>互斥锁（Mutex）是一种关键的并发控制机制，用于保护共享资源免受多个Goroutine的并发访问。 互斥锁(sync.Mutex)的基本操作</description>
    </item>
    
    <item>
      <title>[Go] 防缓存击穿利器 singleflight</title>
      <link>https://piaohua.github.io/post/golang/20240324-singleflight/</link>
      <pubDate>Sun, 24 Mar 2024 18:02:35 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240324-singleflight/</guid>
      <description>Package singleflight provides a duplicate function call suppression mechanism. 原文： Go singleflight：防缓存击穿利器 Documentation 什么是缓存击穿 缓存击穿 是指在高并发的情况下，某个热点的 key 突然过期，导致大</description>
    </item>
    
    <item>
      <title>[Go] 数据校验工具Validator</title>
      <link>https://piaohua.github.io/post/golang/20240323-validator/</link>
      <pubDate>Sat, 23 Mar 2024 21:13:39 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240323-validator/</guid>
      <description>validator Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving Validator包是Golang中一个非常受欢迎的数据验证工具，它提供了丰富的验证规则和简单易用的API。</description>
    </item>
    
    <item>
      <title>[Go] io.TeeReader()函数使用</title>
      <link>https://piaohua.github.io/post/golang/20240120-io-teereader/</link>
      <pubDate>Sat, 20 Jan 2024 12:36:23 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240120-io-teereader/</guid>
      <description>io.TeeReader() 函数用于同时读取输入流并将其复制到输出流中。 io.TeeReader() 函数的作用是将一个输入流 Reader 复制到一个输出流 Writer 中，并返回一个新的 Reader，该 Reader 可以同时读取</description>
    </item>
    
    <item>
      <title>进制转换及位运算</title>
      <link>https://piaohua.github.io/post/learn/20240120-math-base/</link>
      <pubDate>Sat, 20 Jan 2024 10:44:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240120-math-base/</guid>
      <description>在计算机中，除了二进制，比较常用的还有八进制和十六进制。 常用进制 二进制：只有0，1两个数，满2进1，以0b开头表示 八进制：0-7表示，满8进</description>
    </item>
    
    <item>
      <title>[Go] slog日志库使用</title>
      <link>https://piaohua.github.io/post/golang/20240120-slog/</link>
      <pubDate>Sat, 20 Jan 2024 00:04:29 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240120-slog/</guid>
      <description>Go slog 包：开启结构化日志的奇妙之旅 go 1.21.0 版本引入了一个新的包 log/slog，该包提供了结构化日志的功能。相比于普通的日志，结构化日志更受欢迎，</description>
    </item>
    
    <item>
      <title>[Go] CGO使用方法和示例</title>
      <link>https://piaohua.github.io/post/golang/20240119-cgo/</link>
      <pubDate>Fri, 19 Jan 2024 23:08:21 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240119-cgo/</guid>
      <description>Golang中的Cgo是Go语言提供的一种机制，用于在Go程序和C/C++程序之间进行互操作，为Go程序员提供了一个直接调用C库以及使用C语</description>
    </item>
    
    <item>
      <title>将对象上传到aws s3存储桶方案</title>
      <link>https://piaohua.github.io/post/golang/20240117-aws-s3-uploading/</link>
      <pubDate>Wed, 17 Jan 2024 15:05:09 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240117-aws-s3-uploading/</guid>
      <description>将对象上传到aws s3存储桶方案 aws s3提供多种文件上传方式： 业务服务器中转，即业务客户端上传对象到业务服务器，业务服务器接收并上传到s3。 这</description>
    </item>
    
    <item>
      <title>Go 加密解密算法</title>
      <link>https://piaohua.github.io/post/golang/20240114-crypto/</link>
      <pubDate>Sun, 14 Jan 2024 16:45:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240114-crypto/</guid>
      <description>Go 加密解密算法总结 加密解密在实际开发中应用比较广泛，常用加解密分为：“对称式”、“非对称式”和”数字签名“。 对称式：对称加密(也叫私钥加密)</description>
    </item>
    
    <item>
      <title>Go 1.16新特性-embed包及其使用</title>
      <link>https://piaohua.github.io/post/golang/20240114-embed/</link>
      <pubDate>Sun, 14 Jan 2024 16:04:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240114-embed/</guid>
      <description>Go 1.16新特性-embed包及其使用 embed是什么 embed是在Go 1.16中新加包。它通过//go:embed指令，可以在编译阶段将静</description>
    </item>
    
    <item>
      <title>golang text/template &amp; python Jinja2</title>
      <link>https://piaohua.github.io/post/golang/20231230-template/</link>
      <pubDate>Tue, 02 Jan 2024 19:47:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20231230-template/</guid>
      <description>golang text/template &amp;amp; python Jinja2 模板语法 模板语法都包含在{{和}}中间，其中{{.}}中的点表示当前对象。 如果想清除左右的空格，则需要添加-符号，{{- 清除左边空</description>
    </item>
    
    <item>
      <title>[Go] 快速实现电报机器人</title>
      <link>https://piaohua.github.io/post/golang/20231230-telebot/</link>
      <pubDate>Sat, 30 Dec 2023 11:26:21 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20231230-telebot/</guid>
      <description>Telebot is a Telegram bot framework in Go. 先登录telegram创建机器人,创建机器人获取到 ,可以通过API查询。 1 curl -s &amp;#39;https://api.telegram.org/bot&amp;lt;TOKEN&amp;gt;/getMe&amp;#39; 响应结果 1 {&amp;#34;ok&amp;#34;:true,&amp;#34;result&amp;#34;:{&amp;#34;id&amp;#34;:6906901111,&amp;#34;is_bot&amp;#34;:true,&amp;#34;first_name&amp;#34;:&amp;#34;test&amp;#34;,&amp;#34;username&amp;#34;:&amp;#34;test&amp;#34;,&amp;#34;can_join_groups&amp;#34;:true,&amp;#34;can_read_all_group_messages&amp;#34;:false,&amp;#34;supports_inline_queries&amp;#34;:false}} 实现电报机器人示例: 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Polygon测试网络上实现Token交易</title>
      <link>https://piaohua.github.io/post/golang/20230623-polygon-token-transation/</link>
      <pubDate>Sun, 17 Dec 2023 16:52:00 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230623-polygon-token-transation/</guid>
      <description>Polygon测试网络上实现Token交易。 交易节点 Infura和Alchemy是两个最受欢迎的节点供应商。两个节点都支持Polygon主网</description>
    </item>
    
    <item>
      <title>[Nats] nats 简介及使用</title>
      <link>https://piaohua.github.io/post/golang/20230907-nats/</link>
      <pubDate>Thu, 07 Sep 2023 15:24:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230907-nats/</guid>
      <description>NATS是一个开源、轻量级、高性能的分布式消息中间件，实现了高可伸缩性和优雅的Publish/Subscribe模型，使用Golang语言开</description>
    </item>
    
    <item>
      <title>[Go] Golang服务平滑重启更新</title>
      <link>https://piaohua.github.io/post/golang/20230713-gracefully-restarting/</link>
      <pubDate>Thu, 13 Jul 2023 11:24:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230713-gracefully-restarting/</guid>
      <description>重启更新Golang服务，不中断请求中的连接，请求会继续响应，实现服务平滑处理。 Github开源稳定解决方案 facebookgo/grace - Package grace provides a library that makes it easy to build socket based servers</description>
    </item>
    
    <item>
      <title>[Go] 生成polygon和tron钱包地址</title>
      <link>https://piaohua.github.io/post/golang/20230623-ethereum-wallet/</link>
      <pubDate>Fri, 23 Jun 2023 16:38:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230623-ethereum-wallet/</guid>
      <description>使用Go语言创建Polygon公链钱包地址 生成Polygon公链钱包地址 Polygon是建立在以太坊上的Layer2解决方案，私钥、公钥、地</description>
    </item>
    
    <item>
      <title>[Go] 实现 Google Authenticator 二次验证</title>
      <link>https://piaohua.github.io/post/golang/20230527-google-authenticator/</link>
      <pubDate>Sat, 27 May 2023 13:20:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230527-google-authenticator/</guid>
      <description>Google Authenticator 二次验证 Google Authenticator 使用一次性密码(One-time Passcodes)(OTP)进行两步验证。 广泛应用于网站或APP登录二次验证。 Google Authe</description>
    </item>
    
    <item>
      <title>[Go] sync.Cond 使用详解</title>
      <link>https://piaohua.github.io/post/golang/20221108-sync-cond/</link>
      <pubDate>Tue, 08 Nov 2022 20:23:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221108-sync-cond/</guid>
      <description>Cond 通常应用于等待某个条件的一组 goroutine，等条件变为 true 的时候，其中一个 goroutine 或者所有的 goroutine 都会被唤醒执行。 sync.Cond 提供的方法 1 2 3 4 func NewCond(l Locker) *Cond {} //</description>
    </item>
    
    <item>
      <title>[Go] Http 服务加载多个ssl证书</title>
      <link>https://piaohua.github.io/post/golang/20221022-http-with-multiple-certificates/</link>
      <pubDate>Sat, 22 Oct 2022 11:41:52 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221022-http-with-multiple-certificates/</guid>
      <description>Http 服务加载多个ssl证书 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cfg := &amp;amp;tls.Config{} cert, err := tls.LoadX509KeyPair(&amp;#34;cert_one.pem&amp;#34;, &amp;#34;key_one.pem&amp;#34;) if err != nil { log.Fatal(err) } cfg.Certificates = append(cfg.Certificates, cert) // keep adding remaining certs to cfg.Certificates server := http.Server{ Addr: &amp;#34;:443&amp;#34;, // Handler: myHandler, TLSConfig: cfg, } server.ListenAndServeTLS(&amp;#34;&amp;#34;, &amp;#34;&amp;#34;) http.ListenAndServeTLS with</description>
    </item>
    
    <item>
      <title>[Gin] Gin 实现反向代理</title>
      <link>https://piaohua.github.io/post/golang/20221022-gin-reverse-proxy/</link>
      <pubDate>Sat, 22 Oct 2022 10:56:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221022-gin-reverse-proxy/</guid>
      <description>Gin 实现代理 直接代理，不做任何修改 1 2 3 4 5 6 router.POST(&amp;#34;/api&amp;#34;, func(c *gin.Context) { proxy := httputil.ReverseProxy{Director: func(request *http.Request) { request = c.Request }} proxy.ServeHTTP(c.Writer, c.Request) }) 转发指定路径给后端服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 router.POST(&amp;#34;/api/v1/backend&amp;#34;, ReverseProxy()) func ReverseProxy() gin.HandlerFunc</description>
    </item>
    
    <item>
      <title>[Go] 官方mock框架gomock工具使用</title>
      <link>https://piaohua.github.io/post/golang/20220814-mock/</link>
      <pubDate>Sun, 14 Aug 2022 11:24:38 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220814-mock/</guid>
      <description>mock 是Go官方提供的测试框架，很好的集成testing包，实现对interface的mock。 安装mock 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &amp;gt; go version</description>
    </item>
    
    <item>
      <title>[Go] 使用 go-sqlmock 模拟数据库驱动编写单元测试用例</title>
      <link>https://piaohua.github.io/post/golang/20220813-go-sqlmock/</link>
      <pubDate>Sat, 13 Aug 2022 12:35:06 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220813-go-sqlmock/</guid>
      <description>go-sqlmock 是一个实现 sql/driver 的模拟库 在使用gorm等orm框架时，由于需要和数据库进行交互，使得单元测试难于编写， 使用go-sqlmock库可以很好的缓解</description>
    </item>
    
    <item>
      <title>[Go] 代码规范检查工具GolangCI-Lint</title>
      <link>https://piaohua.github.io/post/golang/20220810-lint/</link>
      <pubDate>Wed, 10 Aug 2022 21:33:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220810-lint/</guid>
      <description>GolangCI-Lint 是Go的代码规范检查工具。 `GolangCi-Lint功能特点： 非常快：并行运行 linters，重用 Go 构建缓存和缓存分析结果。 基于 Yaml 的配置</description>
    </item>
    
    <item>
      <title>[Go] 第三方命令行工具 - spf13/cobra和urfave/cli</title>
      <link>https://piaohua.github.io/post/golang/20220807-cobra-cli/</link>
      <pubDate>Sun, 07 Aug 2022 18:33:34 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220807-cobra-cli/</guid>
      <description>spf13/cobra 和 urfave/cli 是Go的2个最流行的优秀的命令行工具 对比 spf13/cobra urfave/cli 简介 A Framework for Modern CLI Apps in Go urfave/cli is a simple, fast, and fun package for building command line apps in Go. 应用项目 docker, kubernetes, istio, etcd, hugo &amp;hellip; drone, peach, gogs, gitea &amp;hellip; LICENSE Apache 2.0 license MIT</description>
    </item>
    
    <item>
      <title>[Go] Handle &#39;broken pipe&#39; error in Go</title>
      <link>https://piaohua.github.io/post/golang/20220731-connection-broken-pipe/</link>
      <pubDate>Sun, 31 Jul 2022 11:30:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220731-connection-broken-pipe/</guid>
      <description>Handle &amp;lsquo;broken pipe&amp;rsquo; error in Go 向一个异常关闭并发送过RST包的TCP连接写入数据时，会发生broken pipe错误。第一次向异常关闭的连接 发送数据时，对端会回</description>
    </item>
    
    <item>
      <title>[Go] Handle &#39;connection reset by peer&#39; error in Go</title>
      <link>https://piaohua.github.io/post/golang/20220731-connection-reset-by-peer/</link>
      <pubDate>Sun, 31 Jul 2022 11:04:37 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220731-connection-reset-by-peer/</guid>
      <description>Handle &amp;lsquo;connection reset by peer&amp;rsquo; error in Go TCP连接在对端异常关闭，并发送RST包过来重建连接时，连接会报connection reset by peer错误，正常关闭连接会发送FI</description>
    </item>
    
    <item>
      <title>[Go] time.Time 时间格式处理</title>
      <link>https://piaohua.github.io/post/golang/20220730-time/</link>
      <pubDate>Sat, 30 Jul 2022 16:37:55 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220730-time/</guid>
      <description>golang中对时间和日期格式处理 date format in Go golang 时间格式化文档time constants 1 2 3 4 5 6 7 time.Now().UTC().Format(&amp;#34;2006-01-02&amp;#34;) time.Now().UTC().Format(&amp;#34;02/01/2006&amp;#34;) time.Now().UTC().Format(&amp;#34;2006-01-02 15:04:05&amp;#34;) time.Now().UTC().Format(time.RFC3339) Parse date with a timezone 1 2 3 4 s := &amp;#34;2022-07-30T19:12:00+01:00&amp;#34; loc, _ := time.LoadLocation(&amp;#34;Europe/Berlin&amp;#34;) t, _ := time.ParseInLocation(time.RFC3339, s, loc) fmt.Println(t) 计</description>
    </item>
    
    <item>
      <title>[Gerrit] Gerrit Code Reviewer in Docker</title>
      <link>https://piaohua.github.io/post/golang/20220701-gerrit-docker/</link>
      <pubDate>Fri, 01 Jul 2022 21:53:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20220701-gerrit-docker/</guid>
      <description>Gerrit是一个基于 Web 的代码审查系统，适于采用 Git 版本控制系统开发的项目进行在线代码审查。 快速启动 快速启动一个gerrit server，启动</description>
    </item>
    
    <item>
      <title>[Go] Golang Webp</title>
      <link>https://piaohua.github.io/post/golang/20210710-golang-webp/</link>
      <pubDate>Sat, 10 Jul 2021 10:29:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210710-golang-webp/</guid>
      <description>Webp 是由谷歌在 2010 年 9 月发布的一种用于 web 端支持有损和无损压缩的图片格式 WebP 是 Google 推出的一种同时提供了有损压缩与无损压缩（可逆压缩）的图片文件格式。派</description>
    </item>
    
    <item>
      <title>[Go] Golang Unicode</title>
      <link>https://piaohua.github.io/post/golang/20210518-golang-unicode/</link>
      <pubDate>Tue, 18 May 2021 21:14:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210518-golang-unicode/</guid>
      <description>unicode包提供数据和函数来测试Unicode代码点的一些属性。 unicode 包 [原文] (https://www.cnblogs.com/golove/p/3273585.html) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</description>
    </item>
    
    <item>
      <title>[Go] rsa OAEP 加密、解密在go中使用及mysql中的应用</title>
      <link>https://piaohua.github.io/post/golang/20210306-golang-rsa-oaep/</link>
      <pubDate>Sat, 06 Mar 2021 11:55:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210306-golang-rsa-oaep/</guid>
      <description>rsa OAEP 加密、解密 OAEP全称为Optimal Asymmetric Encryption Padding.是一种非对称加密填充场景. 生成RSA证书 use the openssl command to set up the RSA key files. create 2,048-bit keys. 1 2 openssl genrsa -out</description>
    </item>
    
    <item>
      <title>[Go] 实现TCP连接的双向拷贝</title>
      <link>https://piaohua.github.io/post/golang/20210228-go-tcp-proxy/</link>
      <pubDate>Sun, 28 Feb 2021 21:12:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210228-go-tcp-proxy/</guid>
      <description>实现TCP连接的双向拷贝 用io.Copy来实现内容拷贝，将源端数据复制到目标端，为防止内存溢出， io.Copy方法默认缓冲区为32k，io.</description>
    </item>
    
    <item>
      <title>[Go] Golang flag 获取多个值</title>
      <link>https://piaohua.github.io/post/golang/20210126-golang-flag-array/</link>
      <pubDate>Tue, 26 Jan 2021 20:49:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210126-golang-flag-array/</guid>
      <description>Golang 一个 flag 参数获取多个值 flag包提供一个动态Value接口,标准库中的flag方法都是通过Value实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Value is the</description>
    </item>
    
    <item>
      <title>[Go] 使用 CGroup 实现进程内存控制</title>
      <link>https://piaohua.github.io/post/golang/20210123-golang-cgroups-memory-limit/</link>
      <pubDate>Sat, 23 Jan 2021 10:16:51 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210123-golang-cgroups-memory-limit/</guid>
      <description>使用 CGroup 实现进程内存控制 参考原文 背景 从 Linux 内核 2.6.25 开始，CGroup 支持对进程内存的隔离和限制，这也是 Docker 等容器技术的底层支撑。 使用 CGroup 有如下好处 在共</description>
    </item>
    
    <item>
      <title>[Go] sync.ErrGroup</title>
      <link>https://piaohua.github.io/post/golang/20210109-golang-err-group/</link>
      <pubDate>Sat, 09 Jan 2021 12:42:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210109-golang-err-group/</guid>
      <description>sync.ErrGroup sync.WaitGroup可以阻塞等待多个goroutine执行完成，但是WaitGroup无法知道goroutine出错的原因，syn</description>
    </item>
    
    <item>
      <title>[Go] A Fast String Searching Algorithm</title>
      <link>https://piaohua.github.io/post/golang/20210102-golang-a-fast-string-searching-algorithm/</link>
      <pubDate>Sat, 02 Jan 2021 20:54:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210102-golang-a-fast-string-searching-algorithm/</guid>
      <description>A Fast String Searching Algorithm BF算法（Brute Force） 将模式串和主串进行比较，一致时则继续比较下一字符，直到比较完整个模式串。不一致时则将模式串后移一位</description>
    </item>
    
    <item>
      <title>[Go] Uber Go Style Guide</title>
      <link>https://piaohua.github.io/post/golang/20210101-golang-uber-go-style-guide/</link>
      <pubDate>Fri, 01 Jan 2021 14:57:44 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20210101-golang-uber-go-style-guide/</guid>
      <description>Uber Go 语言编程规范 不必要的else 如果在if的两个分支中都设置了变量，则可以将其替换为单个if。 Bad 1 2 3 4 5 6 var a int if b { a = 100 } else { a = 10 }</description>
    </item>
    
    <item>
      <title>[Go] Golang 标准命令</title>
      <link>https://piaohua.github.io/post/golang/20200929-golang-command/</link>
      <pubDate>Tue, 29 Sep 2020 00:10:42 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200929-golang-command/</guid>
      <description>Golang 标准命令 go build 在编译只包含库源码文件的代码包时，只会检查性的编译，不会输出任何结果文件 在编译命令源码文件时，生成可执行包 go build会忽略目</description>
    </item>
    
    <item>
      <title>[Go] golang io.Reader数据读取</title>
      <link>https://piaohua.github.io/post/golang/20200927-golang-io-reader/</link>
      <pubDate>Sun, 27 Sep 2020 15:48:16 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200927-golang-io-reader/</guid>
      <description>golang 从 io.Reader 读取数据 io.Reader 1 2 3 type Reader interface { Read(p []byte) (n int, err error) } Reader接口用于包装基本的读取方法。 Read方法读取len(p)字节数据写入p。它返回写入的</description>
    </item>
    
    <item>
      <title>[Go] golang plugin插件使用</title>
      <link>https://piaohua.github.io/post/golang/20200924-golang-plugin/</link>
      <pubDate>Thu, 24 Sep 2020 22:10:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200924-golang-plugin/</guid>
      <description>Package plugin implements loading and symbol resolution of Go plugins. Golang是静态编译型语言，在编译时就将所有引用的包（库）全部加载打包到最终的可执行程序（或库文件）中， 因此并不能在运</description>
    </item>
    
    <item>
      <title>[Go] golang 和 C 语言相互调用</title>
      <link>https://piaohua.github.io/post/golang/20200920-golang-cgo/</link>
      <pubDate>Sun, 20 Sep 2020 13:03:05 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200920-golang-cgo/</guid>
      <description>cgo 提供了 golang 和 C 语言相互调用的机制 cgo使用需要安装gcc 1 2 3 4 5 6 &amp;gt; gcc -v Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 Apple LLVM version 9.0.0 (clang-900.0.39.2) Target: x86_64-apple-darwin17.4.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin 通过import &amp;quot;C&amp;q</description>
    </item>
    
    <item>
      <title>[Go] 使用二进制形式发布go package</title>
      <link>https://piaohua.github.io/post/golang/20200920-golang-binary-package/</link>
      <pubDate>Sun, 20 Sep 2020 10:32:33 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200920-golang-binary-package/</guid>
      <description>golang可以使用二进制形式发布包提供给第三方使用 提供一个编译好的库，同时为这个package提供一个源文件。这个源文件不用包含任何代码逻</description>
    </item>
    
    <item>
      <title>[Go] golang new和make的区别</title>
      <link>https://piaohua.github.io/post/golang/20200919-golang-new-make/</link>
      <pubDate>Sat, 19 Sep 2020 11:08:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200919-golang-new-make/</guid>
      <description>new 和 make 都可以用来分配空间，初始化类型 new和make的区别 new 用来分配内存，作用值类型和用户定义的类型，并初始化零值，返回零值指针 make 用来分配内</description>
    </item>
    
    <item>
      <title>[Go] golang build 编译文件</title>
      <link>https://piaohua.github.io/post/golang/20200916-golang-build-flags/</link>
      <pubDate>Wed, 16 Sep 2020 22:19:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200916-golang-build-flags/</guid>
      <description>go build 命令是用来编译 命令源码文件 以及它依赖的 库源码文件 go build介绍 go的代码源文件分类: 命令源码文件：含有 main 函数的主文件 测试源码文件：单元</description>
    </item>
    
    <item>
      <title>[Go] Golang 官方包管理工具 mod 使用</title>
      <link>https://piaohua.github.io/post/golang/20200911-go-mod-usage/</link>
      <pubDate>Fri, 11 Sep 2020 21:57:22 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200911-go-mod-usage/</guid>
      <description>golang 1.11 开始新加入mod特性 mod用来替换旧版本基于GOPATH来指定构建项目的方式。 使用介绍 golang版本需要1.11或以上版本 设置GO11</description>
    </item>
    
    <item>
      <title>[Go] Golang 5种 Import Package 用法</title>
      <link>https://piaohua.github.io/post/golang/20200911-go-import-package-usages/</link>
      <pubDate>Fri, 11 Sep 2020 21:56:52 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200911-go-import-package-usages/</guid>
      <description>Golang Import Package Usages 在golang程序编译时，从main包开始依次导入其它引用包，当一个包被多个包同时导入时， 只会导入一次，当被导入的包又引用了其它包时</description>
    </item>
    
    <item>
      <title>[Go] Golang 中信号(signal)处理</title>
      <link>https://piaohua.github.io/post/golang/20200907-golang-signal/</link>
      <pubDate>Mon, 07 Sep 2020 22:52:58 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200907-golang-signal/</guid>
      <description>Golang 中信号(signal)处理 Go信号通知机制可以通过往一个channel中发送 os.Signal 实现。 使用 signal.Notify 注册要接收的信号。signal.Stop 取消监听</description>
    </item>
    
    <item>
      <title>[Go] Golang Zookeeper 客户端操作</title>
      <link>https://piaohua.github.io/post/golang/20200906-golang-zookeeper/</link>
      <pubDate>Sun, 06 Sep 2020 15:53:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200906-golang-zookeeper/</guid>
      <description>Golang Zookeeper 客户端操作 golang zookeeper 常用客户端 go-zookeeper 文档说明 https://godoc.org/github.com/go-zookeeper/zk gozk 文档说明 https://wiki.ubuntu.com/gozk 连接zookeeper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/go-zookeeper/zk&amp;#34; ) func main() {</description>
    </item>
    
    <item>
      <title>[Go] Zookeeper Client 数据结构详解</title>
      <link>https://piaohua.github.io/post/golang/20200902-golang-zookeeper/</link>
      <pubDate>Wed, 02 Sep 2020 22:40:59 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200902-golang-zookeeper/</guid>
      <description>Zookeeper 分布式应用的分布式协调服务 Zookeeper简介 ZooKeeper是一种为分布式应用所设计的高可用、高性能且一致的开源协调服务， 一些基本应</description>
    </item>
    
    <item>
      <title>[Go] Golang version命令的高级用法</title>
      <link>https://piaohua.github.io/post/golang/20200831-golang-version/</link>
      <pubDate>Mon, 31 Aug 2020 22:10:12 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200831-golang-version/</guid>
      <description>Golang version命令的高级用法 go version命令常用来查看Go版本和系统架构信息 查看Go版本信息 &amp;gt; go version go version go1.14 darwin/amd64 用法 使用help子命令查看任</description>
    </item>
    
    <item>
      <title>[Go] How to Efficiently Concatenate Strings in Go</title>
      <link>https://piaohua.github.io/post/golang/20200828-golang-how-to-efficiently-concatenate-strings-in-go/</link>
      <pubDate>Fri, 28 Aug 2020 22:27:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200828-golang-how-to-efficiently-concatenate-strings-in-go/</guid>
      <description>How to Efficiently Concatenate Strings in Go 7种拼接方式 String Concat 1 str += &amp;#34;hello-world&amp;#34; String Sprintf 1 str = fmt.Sprintf(&amp;#34;%s%s&amp;#34;, str, &amp;#34;hello-world&amp;#34;) String Join 1 str = strings.Join([]string{str, &amp;#34;hello-world&amp;#34;}, &amp;#34;&amp;#34;) Buffer Write 1 2 3 buf := new(bytes.Buffer) buf.WriteString(&amp;#34;hello-world&amp;#34;) str := buf.String() Bytes Append 1 2 3 4 var b []byte s := &amp;#34;hello-world&amp;#34; b = append(b, s...) str := string(b) String Copy 1 2</description>
    </item>
    
    <item>
      <title>[Go] 一个Golang实现的MySQL协议库介绍</title>
      <link>https://piaohua.github.io/post/golang/20200822-golang-go-mysqlstack/</link>
      <pubDate>Sat, 22 Aug 2020 18:56:46 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200822-golang-go-mysqlstack/</guid>
      <description>go-mysqlstack is an MySQL protocol library implementing in Go (golang). 使用示例 下载 1 2 3 go get -u github.com/xelabs/go-mysqlstack/driver cd $GOPATH/src/github.com/xelabs/go-mysqlstack/ make test examples/mysqld.go mocks a MySQL server by running: 1 2 &amp;gt; go run mysqld.go 2020/08/22 19:01:44.518045 mysqld.go:102: [INFO] mysqld.server.start.address[:4407] examples/client.go mocks a client and query from the mock MySQL server: 1 2 &amp;gt; go run client.go 2020/08/22 19:01:50.530677 client.go:32: [INFO] results:[[[10 nice name]]] H</description>
    </item>
    
    <item>
      <title>[Go] 如何一步步提升Go生成随机字符串的效率</title>
      <link>https://piaohua.github.io/post/golang/20200822-golang-rand-string/</link>
      <pubDate>Sat, 22 Aug 2020 17:58:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200822-golang-rand-string/</guid>
      <description>逐步优化实现一个高效的随机字符串算法 来自stackoverflow上的一个问题:How to generate a random string of a fixed length in Go? 问题描述是：我想要一个随机的字符</description>
    </item>
    
    <item>
      <title>[Go] Golang Test 工具指令</title>
      <link>https://piaohua.github.io/post/golang/20200820-golang-test/</link>
      <pubDate>Thu, 20 Aug 2020 21:33:40 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200820-golang-test/</guid>
      <description>Golang Test 工具指令 简介 go test测试工具包含示例函数测试(ExampleXXX)、单元测试(TestXXX)、基准测试(BenchmarkXXX)</description>
    </item>
    
    <item>
      <title>[Go] Golang应用构建Docker镜像</title>
      <link>https://piaohua.github.io/post/docker/20200816-golang-docker/</link>
      <pubDate>Sun, 16 Aug 2020 23:15:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20200816-golang-docker/</guid>
      <description>Golang应用通过Dockerfile构建Docker镜像 构建镜像 构建一个go应用镜像，当前目录加载项目，编译生成二进制文件 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>[Go] Golang 官方限流器time/rate使用</title>
      <link>https://piaohua.github.io/post/golang/20200815-golang-rate-limiter/</link>
      <pubDate>Sat, 15 Aug 2020 21:36:37 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200815-golang-rate-limiter/</guid>
      <description>time/rate是基于Token Bucket(令牌桶)算法实现的限流 限流 限制某个服务每秒的调用本服务的频率 客户端请求太多，超出服务端的服务</description>
    </item>
    
    <item>
      <title>[Go] Golang http.Client请求程序遇到 Connection Reset by Peer 或 EOF 问题</title>
      <link>https://piaohua.github.io/post/golang/20200814-golang-connection-reset-by-peer/</link>
      <pubDate>Fri, 14 Aug 2020 23:43:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200814-golang-connection-reset-by-peer/</guid>
      <description>Golang http.Client请求程序遇到Connection Reset by peer 或 EOF 问题 问题 线上服务经常规律性的出现http.Client请求服务器数据和上报</description>
    </item>
    
    <item>
      <title>[Hey] 基于Golang开发的一款类似Ab的压测工具</title>
      <link>https://piaohua.github.io/post/golang/20200814-golang-hey/</link>
      <pubDate>Fri, 14 Aug 2020 23:05:10 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200814-golang-hey/</guid>
      <description>Hey 基于Golang开发的一款类似Ab的压测工具 安装 MaxOS 安装 1 brew install hey golang源码编译安装 1 go get -u github.com/rakyll/hey 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>[Go] 一个Golang实现的MySQL基准测试工具</title>
      <link>https://piaohua.github.io/post/golang/20200812-golang-benchyou/</link>
      <pubDate>Wed, 12 Aug 2020 22:15:53 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200812-golang-benchyou/</guid>
      <description>benchyou is a benchmark tool for MySQL, similar Sysbench. Introduction benchyou is a benchmark tool for MySQL, real-time monitoring TPS and vmstat/iostat Build 1 2 3 $ git clone https://github.com/xelabs/benchyou $ cd benchyou $ make build Usage 1 $ ./bin/benchyou -h Examples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 prepare 64 tables: ./bin/benchyou --mysql-host=192.168.0.3</description>
    </item>
    
    <item>
      <title>[Go] Golang实现一个工作池</title>
      <link>https://piaohua.github.io/post/golang/20200811-golang-worker-pool/</link>
      <pubDate>Tue, 11 Aug 2020 23:02:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200811-golang-worker-pool/</guid>
      <description>Golang实现一个工作池处理并发任务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51</description>
    </item>
    
    <item>
      <title>[Go] Golang用Channel实现互斥锁</title>
      <link>https://piaohua.github.io/post/golang/20200810-golang-channel-lock/</link>
      <pubDate>Mon, 10 Aug 2020 22:23:26 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200810-golang-channel-lock/</guid>
      <description>使用长度为1的有缓冲channel实现互斥锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48</description>
    </item>
    
    <item>
      <title>[Go] Golang Quic</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-quic/</link>
      <pubDate>Sun, 09 Aug 2020 23:53:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-quic/</guid>
      <description>Quick UDP Internet Connection QUIC 概述 QUIC（Quick UDP Internet Connection，快速 UDP 互联网连接协议）是一种以 UDP 为底层传输协议，支持加密、多路复用，工作在用户空</description>
    </item>
    
    <item>
      <title>[Go] Golang 在编译时使用ldflags动态设置包中变量的值</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-ldflags/</link>
      <pubDate>Sun, 09 Aug 2020 18:25:49 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-ldflags/</guid>
      <description>Golang 在编译时使用ldflags动态设置包中变量的值 -X importpath.name=value Set the value of the string variable in importpath named name to value. Note that before Go 1.5 this option took two separate arguments. Now it takes one argument split on the first = sign. ldflags用于</description>
    </item>
    
    <item>
      <title>[Go] Golang Crc32 Packet</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-crc32-packet/</link>
      <pubDate>Sun, 09 Aug 2020 12:47:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-crc32-packet/</guid>
      <description>打包解包协议中应用crc32校验和 crc32 介绍 crc32包实现了32位循环冗余校验（CRC-32）的校验和算法; CRC全称为Cyclic Redundancy Chec</description>
    </item>
    
    <item>
      <title>[Go] Golang Adler32 Packet</title>
      <link>https://piaohua.github.io/post/golang/20200809-golang-adler32-packet/</link>
      <pubDate>Sun, 09 Aug 2020 12:47:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200809-golang-adler32-packet/</guid>
      <description>打包解包协议中应用adler32校验和 adler32 介绍 Adler-32是Mark Adler发明的校验和算法，和32位CRC校验算法一样，都是保护数据防</description>
    </item>
    
    <item>
      <title>[Go] Golang Context</title>
      <link>https://piaohua.github.io/post/golang/20200808-golang-context/</link>
      <pubDate>Sat, 08 Aug 2020 11:53:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200808-golang-context/</guid>
      <description>Golang Context Context 接口 1 2 3 4 5 6 7 8 9 type Context interface { Deadline() (deadline time.Time, ok bool) Done() &amp;lt;-chan struct{} Err() error Value(key interface{}) interface{} } context包提供暴露Context接口可以在多个Goroutine共享数</description>
    </item>
    
    <item>
      <title>[Go] Golang Channel</title>
      <link>https://piaohua.github.io/post/golang/20200808-golang-channel/</link>
      <pubDate>Sat, 08 Aug 2020 11:52:32 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20200808-golang-channel/</guid>
      <description>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating. 介绍 channel是GO语言级别提供的goroutine间的通信方式，channel是类型相关的，需要在声明channel</description>
    </item>
    
  </channel>
</rss>