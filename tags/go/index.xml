<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/tags/go/</link>
    <description>Recent content in go on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Dec 2023 16:52:00 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Polygon测试网络上实现Token交易</title>
      <link>https://piaohua.github.io/post/golang/20230623-polygon-token-transation/</link>
      <pubDate>Sun, 17 Dec 2023 16:52:00 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230623-polygon-token-transation/</guid>
      <description>Polygon测试网络上实现Token交易。 交易节点 Infura和Alchemy是两个最受欢迎的节点供应商。两个节点都支持Polygon主网</description>
    </item>
    
    <item>
      <title>[Go] 生成polygon和tron钱包地址</title>
      <link>https://piaohua.github.io/post/golang/20230623-ethereum-wallet/</link>
      <pubDate>Fri, 23 Jun 2023 16:38:11 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230623-ethereum-wallet/</guid>
      <description>使用Go语言创建Polygon公链钱包地址 生成Polygon公链钱包地址 Polygon是建立在以太坊上的Layer2解决方案，私钥、公钥、地</description>
    </item>
    
    <item>
      <title>[Go] 实现 Google Authenticator 二次验证</title>
      <link>https://piaohua.github.io/post/golang/20230527-google-authenticator/</link>
      <pubDate>Sat, 27 May 2023 13:20:27 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20230527-google-authenticator/</guid>
      <description>Google Authenticator 二次验证 Google Authenticator 使用一次性密码(One-time Passcodes)(OTP)进行两步验证。 广泛应用于网站或APP登录二次验证。 Google Authe</description>
    </item>
    
    <item>
      <title>[Go] sync.Cond 使用详解</title>
      <link>https://piaohua.github.io/post/golang/20221108-sync-cond/</link>
      <pubDate>Tue, 08 Nov 2022 20:23:01 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221108-sync-cond/</guid>
      <description>Cond 通常应用于等待某个条件的一组 goroutine，等条件变为 true 的时候，其中一个 goroutine 或者所有的 goroutine 都会被唤醒执行。 sync.Cond 提供的方法 1 2 3 4 func NewCond(l Locker) *Cond {} //</description>
    </item>
    
    <item>
      <title>[Go] Http 服务加载多个ssl证书</title>
      <link>https://piaohua.github.io/post/golang/20221022-http-with-multiple-certificates/</link>
      <pubDate>Sat, 22 Oct 2022 11:41:52 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221022-http-with-multiple-certificates/</guid>
      <description>Http 服务加载多个ssl证书 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cfg := &amp;amp;tls.Config{} cert, err := tls.LoadX509KeyPair(&amp;#34;cert_one.pem&amp;#34;, &amp;#34;key_one.pem&amp;#34;) if err != nil { log.Fatal(err) } cfg.Certificates = append(cfg.Certificates, cert) // keep adding remaining certs to cfg.Certificates server := http.Server{ Addr: &amp;#34;:443&amp;#34;, // Handler: myHandler, TLSConfig: cfg, } server.ListenAndServeTLS(&amp;#34;&amp;#34;, &amp;#34;&amp;#34;) http.ListenAndServeTLS with</description>
    </item>
    
    <item>
      <title>[Gin] Gin 实现反向代理</title>
      <link>https://piaohua.github.io/post/golang/20221022-gin-reverse-proxy/</link>
      <pubDate>Sat, 22 Oct 2022 10:56:04 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20221022-gin-reverse-proxy/</guid>
      <description>Gin 实现代理 直接代理，不做任何修改 1 2 3 4 5 6 router.POST(&amp;#34;/api&amp;#34;, func(c *gin.Context) { proxy := httputil.ReverseProxy{Director: func(request *http.Request) { request = c.Request }} proxy.ServeHTTP(c.Writer, c.Request) }) 转发指定路径给后端服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 router.POST(&amp;#34;/api/v1/backend&amp;#34;, ReverseProxy()) func ReverseProxy() gin.HandlerFunc</description>
    </item>
    
  </channel>
</rss>