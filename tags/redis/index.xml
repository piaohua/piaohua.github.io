<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on piaohua&#39;s blog</title>
    <link>https://piaohua.github.io/tags/redis/</link>
    <description>Recent content in redis on piaohua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 30 Jul 2024 22:42:30 +0800</lastBuildDate>
    
	<atom:link href="https://piaohua.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis-stack helm chart</title>
      <link>https://piaohua.github.io/post/docker/20240730-redis-stack-helm-chart/</link>
      <pubDate>Tue, 30 Jul 2024 22:42:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/docker/20240730-redis-stack-helm-chart/</guid>
      <description>Redis-stack helm chart
 The Quickest way to starting redis-stack with Docker.
1  docker run -p 6379:6379 -p 8001:8001 redis/redis-stack   This launches the redis-stack an extension of Redis that adds all manner of modern data structures to Redis. You&amp;rsquo;ll also notice that if you open up http://localhost:8001 you&amp;rsquo;ll have access to the redis-insight GUI, a GUI you can use to visualize and work with your data in Redis.</description>
    </item>
    
    <item>
      <title>Redis 布隆过滤器(Bloom Filter)</title>
      <link>https://piaohua.github.io/post/redis/20240519-bloom-filter/</link>
      <pubDate>Sun, 19 May 2024 11:33:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240519-bloom-filter/</guid>
      <description>Bloom Filter 是一个二进制bit数组，初始为 0 用于快速查找一个集合中是否存在某个元素。尤其是大数据量中快速查找判断是否存在的问题。 比如在缓存穿透场景中</description>
    </item>
    
    <item>
      <title>Redis内存淘汰策略</title>
      <link>https://piaohua.github.io/post/redis/20240519-maxmemory-policy/</link>
      <pubDate>Sun, 19 May 2024 11:21:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240519-maxmemory-policy/</guid>
      <description>Redis内存淘汰策略 在 Redis 中 过期策略 和 内存淘汰策略 是两个完全不同的概念。Redis 过期策略指的是 Redis 使用那种策略，来删除已经过期的键值对；而内</description>
    </item>
    
    <item>
      <title>[Go] redis 限速器</title>
      <link>https://piaohua.github.io/post/redis/20240501-rate/</link>
      <pubDate>Wed, 01 May 2024 17:45:36 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240501-rate/</guid>
      <description>go-redis/redis_rate 库实现了一个漏桶调度算法（又名通用信元速率算法）。 安装 1 go get github.com/go-redis/redis_rate/v10 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 rdb := redis.NewClient(&amp;amp;redis.Options{ Addr: &amp;#34;localhost:6379&amp;#34;, }) limiter := redis_rate.NewLimiter(rdb) res, err := limiter.Allow(ctx, &amp;#34;project:123&amp;#34;, redis_rate.PerSecond(10)) if err != nil { panic(err) } fmt.Println(&amp;#34;allowed&amp;#34;,</description>
    </item>
    
    <item>
      <title>[Go] 在go中使用redis分布式锁</title>
      <link>https://piaohua.github.io/post/golang/20240424-redislock/</link>
      <pubDate>Wed, 24 Apr 2024 22:56:30 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/golang/20240424-redislock/</guid>
      <description>Simplified distributed locking implementation using Redis GoDoc 分布式锁使用示例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54</description>
    </item>
    
    <item>
      <title>Redis 持久化机制</title>
      <link>https://piaohua.github.io/post/redis/20240328-persistence/</link>
      <pubDate>Thu, 28 Mar 2024 00:24:47 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240328-persistence/</guid>
      <description>Redis 的持久化机制有两种，第一种是快照，第二种是 AOF 日志。快照是一次全量备份，AOF 日志是连续的增量备份。快照是内存数据的二进制序列化形式，在存储</description>
    </item>
    
    <item>
      <title>redis的底层数据结构</title>
      <link>https://piaohua.github.io/post/redis/20240327-type-struct/</link>
      <pubDate>Wed, 27 Mar 2024 23:02:18 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240327-type-struct/</guid>
      <description>redis有String、List、Hash、Set、Sorted Set这五大基本数据类型，不同的数据类型适用不同的场景。 redis数据类型</description>
    </item>
    
    <item>
      <title>Redis 和 HashMap 的区别</title>
      <link>https://piaohua.github.io/post/redis/20240327-hashmap/</link>
      <pubDate>Wed, 27 Mar 2024 17:19:08 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240327-hashmap/</guid>
      <description>Redis 和 HashMap 的区别 Redis 是 Remote Dictionary Service 三个单词中加粗字母的组合，是一种基于键值对（key-value）的 NoSQL 数据库。 但比一般的键值对，比如 HashMap 强大的多，Redi</description>
    </item>
    
    <item>
      <title>Redis 事务</title>
      <link>https://piaohua.github.io/post/redis/20240327-transaction/</link>
      <pubDate>Wed, 27 Mar 2024 17:10:57 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240327-transaction/</guid>
      <description>原文：Redis 事务 Redis 支持简单的事务，可以将多个命令打包，然后一次性的，按照顺序执行。 主要通过 multi、exec、discard、watc</description>
    </item>
    
    <item>
      <title>Redis热key和大key</title>
      <link>https://piaohua.github.io/post/redis/20240327-bigkey-hotkey/</link>
      <pubDate>Wed, 27 Mar 2024 17:04:43 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240327-bigkey-hotkey/</guid>
      <description>Redis热key和大key 所谓的热 key，就是指在很短时间内被频繁访问的键。 比如，热门新闻或热门商品，这类 key 通常会有大流量的访问，对存储这</description>
    </item>
    
    <item>
      <title>什么是缓存雪崩、缓存击穿、缓存穿透</title>
      <link>https://piaohua.github.io/post/learn/20240324-cache/</link>
      <pubDate>Sun, 24 Mar 2024 17:46:13 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/learn/20240324-cache/</guid>
      <description>什么是缓存雪崩、缓存击穿、缓存穿透，各自有哪些解析方案？ Redis 缓存穿透、缓存击穿、缓存雪崩区别和解决方案 缓存穿透 缓存穿透说简单点就是大量请求的 key</description>
    </item>
    
    <item>
      <title>Redis GUI 管理工具 Redislnsight</title>
      <link>https://piaohua.github.io/post/redis/20240221-redislnsight/</link>
      <pubDate>Wed, 21 Feb 2024 16:10:54 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240221-redislnsight/</guid>
      <description>Redis 官方可视化工具 RedisInsight 是一个直观高效的 Redis GUI 管理工具，它可以对 Redis 的内存、连接数、命中率以及正常运行时间进行监控，并且可以在界面上使用 CLI 和连接的 Redis 进</description>
    </item>
    
    <item>
      <title>Python操作Redis</title>
      <link>https://piaohua.github.io/post/python/20240113-redis/</link>
      <pubDate>Sat, 13 Jan 2024 22:40:48 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/python/20240113-redis/</guid>
      <description>Python操作Redis redis-py install 1 pip install redis Start a redis via docker: 1 docker run -p 6379:6379 -it redis/redis-stack:latest Quickly connecting to redis 1 2 3 4 5 import redis r = redis.Redis(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) r.ping() r.set(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;) r.get(&amp;#39;foo&amp;#39;) Connection Pools 1 2 3 4 import redis pool = redis.ConnectionPool(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) r = redis.Redis(connection_pool=pool) r.ping() 操作</description>
    </item>
    
    <item>
      <title>Nginx 直接访问 Redis方案</title>
      <link>https://piaohua.github.io/post/redis/20240113-nginx-redis/</link>
      <pubDate>Sat, 13 Jan 2024 17:12:15 +0800</pubDate>
      
      <guid>https://piaohua.github.io/post/redis/20240113-nginx-redis/</guid>
      <description>Nginx直接访问Redis方案 HttpRedis：提供指令少，功能单一。 HttpRedis2Module：比HttpRedis操作更灵活，</description>
    </item>
    
  </channel>
</rss>